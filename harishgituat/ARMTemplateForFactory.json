{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "harishgituat"
		},
		"AzSQLDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzSQLDatabase'"
		},
		"AzureBlobStorage10_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage10'"
		},
		"AzureBlobStorage11_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage11'"
		},
		"AzureBlobStorage12_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage12'"
		},
		"AzureBlobStorage13_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage13'"
		},
		"AzureBlobStorage14_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage14'"
		},
		"AzureBlobStorage15_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage15'"
		},
		"AzureBlobStorage16_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage16'"
		},
		"AzureBlobStorage17_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage17'"
		},
		"AzureBlobStorage18_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage18'"
		},
		"AzureBlobStorage19_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage19'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"AzureBlobStorage20_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage20'"
		},
		"AzureBlobStorage21_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage21'"
		},
		"AzureBlobStorage22_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage22'"
		},
		"AzureBlobStorage23_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage23'"
		},
		"AzureBlobStorage24_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage24'"
		},
		"AzureBlobStorage25_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage25'"
		},
		"AzureBlobStorage26_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage26'"
		},
		"AzureBlobStorage27_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage27'"
		},
		"AzureBlobStorage28_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage28'"
		},
		"AzureBlobStorage29_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage29'"
		},
		"AzureBlobStorage3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage3'"
		},
		"AzureBlobStorage30_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage30'"
		},
		"AzureBlobStorage31_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage31'"
		},
		"AzureBlobStorage32_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage32'"
		},
		"AzureBlobStorage33_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage33'"
		},
		"AzureBlobStorage34_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage34'"
		},
		"AzureBlobStorage35_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage35'"
		},
		"AzureBlobStorage36_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage36'"
		},
		"AzureBlobStorage37_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage37'"
		},
		"AzureBlobStorage38_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage38'"
		},
		"AzureBlobStorage39_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage39'"
		},
		"AzureBlobStorage4_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage4'"
		},
		"AzureBlobStorage40_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage40'"
		},
		"AzureBlobStorage41_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage41'"
		},
		"AzureBlobStorage42_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage42'"
		},
		"AzureBlobStorage43_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage43'"
		},
		"AzureBlobStorage44_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage44'"
		},
		"AzureBlobStorage45_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage45'"
		},
		"AzureBlobStorage46_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage46'"
		},
		"AzureBlobStorage47_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage47'"
		},
		"AzureBlobStorage48_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage48'"
		},
		"AzureBlobStorage49_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage49'"
		},
		"AzureBlobStorage5_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage5'"
		},
		"AzureBlobStorage50_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage50'"
		},
		"AzureBlobStorage51_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage51'"
		},
		"AzureBlobStorage52_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage52'"
		},
		"AzureBlobStorage53_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage53'"
		},
		"AzureBlobStorage54_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage54'"
		},
		"AzureBlobStorage55_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage55'"
		},
		"AzureBlobStorage56_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage56'"
		},
		"AzureBlobStorage57_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage57'"
		},
		"AzureBlobStorage58_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage58'"
		},
		"AzureBlobStorage59_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage59'"
		},
		"AzureBlobStorage6_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage6'"
		},
		"AzureBlobStorage60_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage60'"
		},
		"AzureBlobStorage61_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage61'"
		},
		"AzureBlobStorage62_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage62'"
		},
		"AzureBlobStorage63_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage63'"
		},
		"AzureBlobStorage64_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage64'"
		},
		"AzureBlobStorage65_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage65'"
		},
		"AzureBlobStorage66_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage66'"
		},
		"AzureBlobStorage67_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage67'"
		},
		"AzureBlobStorage68_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage68'"
		},
		"AzureBlobStorage69_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage69'"
		},
		"AzureBlobStorage7_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage7'"
		},
		"AzureBlobStorage70_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage70'"
		},
		"AzureBlobStorage71_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage71'"
		},
		"AzureBlobStorage72_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage72'"
		},
		"AzureBlobStorage73_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage73'"
		},
		"AzureBlobStorage74_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage74'"
		},
		"AzureBlobStorage75_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage75'"
		},
		"AzureBlobStorage76_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage76'"
		},
		"AzureBlobStorage77_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage77'"
		},
		"AzureBlobStorage78_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage78'"
		},
		"AzureBlobStorage79_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage79'"
		},
		"AzureBlobStorage8_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage8'"
		},
		"AzureBlobStorage80_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage80'"
		},
		"AzureBlobStorage81_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage81'"
		},
		"AzureBlobStorage82_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage82'"
		},
		"AzureBlobStorage83_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage83'"
		},
		"AzureBlobStorage84_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage84'"
		},
		"AzureBlobStorage851111_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage851111'"
		},
		"AzureBlobStorage851112_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage851112'"
		},
		"AzureBlobStorage9_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage9'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage2'"
		},
		"AzureDataLakeStorage3_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage3'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase2'"
		},
		"AzureTableStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureTableStorage1'"
		},
		"AzureTableStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureTableStorage2'"
		},
		"Datasetcsv_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Datasetcsv'"
		},
		"NonprodLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'NonprodLS'"
		},
		"csvdepartmentls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'csvdepartmentls'"
		},
		"csvemplds_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'csvemplds'"
		},
		"csvforematxells_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'csvforematxells'"
		},
		"departmentcsvls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'departmentcsvls'"
		},
		"desktop_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'desktop'"
		},
		"destinationfilterls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'destinationfilterls'"
		},
		"emplls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'emplls'"
		},
		"employeescsvls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'employeescsvls'"
		},
		"eventtestls1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'eventtestls1'"
		},
		"eventtestls2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'eventtestls2'"
		},
		"filterexcells_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'filterexcells'"
		},
		"filteroutputharishls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'filteroutputharishls'"
		},
		"filtertestls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'filtertestls'"
		},
		"harishaggregratelss_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'harishaggregratelss'"
		},
		"joinoutputofemplndeptls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'joinoutputofemplndeptls'"
		},
		"jsontocsv_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'jsontocsv'"
		},
		"linkedService1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService1'"
		},
		"linkedService124_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService124'"
		},
		"linkedService2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService2'"
		},
		"linkedService3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService3'"
		},
		"linkedds1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedds1'"
		},
		"linkedservice123_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedservice123'"
		},
		"lm11_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lm11'"
		},
		"ls11_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls11'"
		},
		"ls22_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls22'"
		},
		"ls33_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls33'"
		},
		"ls333_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls333'"
		},
		"outputempldept_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'outputempldept'"
		},
		"parquet3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'parquet3'"
		},
		"parquetls1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'parquetls1'"
		},
		"parquetls2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'parquetls2'"
		},
		"sharepointdata_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sharepointdata'"
		},
		"sourcecsvls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sourcecsvls'"
		},
		"sql1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sql1'"
		},
		"testtimeds_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'testtimeds'"
		},
		"xelformatls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'xelformatls'"
		},
		"ADLSGen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://mapdatalakestore002p.dfs.core.windows.net"
		},
		"ADLS_gen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://kdataprodadls.dfs.core.windows.net"
		},
		"AzureBlobStorage1_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "harishgit11"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://harishgen2.dfs.core.windows.net"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://harishgen2.dfs.core.windows.net"
		},
		"AzureDataLakeStorage3_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://harishdataflows.dfs.core.windows.net"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://harishgituat.vault.azure.net/"
		},
		"AzureKeyVault2_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://harishgituat.vault.azure.net/"
		},
		"AzureKeyVault3_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://harishgituat.vault.azure.net/"
		},
		"AzureKeyVault4_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://harishgituat.vault.azure.net/"
		},
		"LOGDBSERVER_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "sql-opslog-conn"
		},
		"MAPKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://ECL-MAP-002-P-AKV.vault.azure.net/"
		},
		"datalake_004_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://reportingsa004.dfs.core.windows.net"
		},
		"desktop_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Users\\hariku\\OneDrive - Microsoft\\Desktop\\copyactivity"
		},
		"desktop_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "harishtest"
		},
		"reporting_datalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://reportingsa001.dfs.core.windows.net"
		},
		"copytestblobtoblob_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/82da1dd1-f682-4164-8732-e21666d90066/resourceGroups/harishku/providers/Microsoft.Storage/storageAccounts/harishgen2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CDC_ANZ_CUBE_REFRESH_CDConnect_SOPForecast_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Process AAS Cube using TMSL refresh command. Wait for the processing to complete before proceeding",
				"activities": [
					{
						"name": "Process Cube TMSL",
						"type": "WebHook",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"url": "https://6f448717-1c7f-4249-8c16-88a41769d9eb.webhook.ne.azure-automation.net/webhooks?token=D1KK5%2fTE2QA6T3cBBWwT028BV9VWjnMWcCTH8dbCnq0%3d",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(concat('{\n\t\"WebhookType\" : \"ProcessCube\",\n\t\"DataFactory\" : {\n\t\t\"RunId\" : \"',pipeline().RunId,'\",\n\t\t\"DataFactoryName\" : \"',pipeline().DataFactory,'\",\n\t\t\"PipelineName\" : \"',pipeline().Pipeline,'\"\n\t},\n\t\"Payload\" : {\n\t\t\"OverrideFileName\" : \"',pipeline().parameters.overrideFileName,'\",\n\t\t\"TMSL\":',String(pipeline().parameters.tmslScript),'\n\t},\n\t\"LogFile\" : {\n\t \"PurgeThresholdDays\" : \"',pipeline().parameters.PurgeThresholdDays,'\"\n\t}\n}'))",
								"type": "Expression"
							},
							"timeout": "01:00:00",
							"reportStatusOnCallBack": true
						}
					},
					{
						"name": "Process Cube TMSL_if_refresh_fails",
						"type": "WebHook",
						"dependsOn": [
							{
								"activity": "Process Cube TMSL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"url": "https://6f448717-1c7f-4249-8c16-88a41769d9eb.webhook.ne.azure-automation.net/webhooks?token=D1KK5%2fTE2QA6T3cBBWwT028BV9VWjnMWcCTH8dbCnq0%3d",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(concat('{\n\t\"WebhookType\" : \"ProcessCube\",\n\t\"DataFactory\" : {\n\t\t\"RunId\" : \"',pipeline().RunId,'\",\n\t\t\"DataFactoryName\" : \"',pipeline().DataFactory,'\",\n\t\t\"PipelineName\" : \"',pipeline().Pipeline,'\"\n\t},\n\t\"Payload\" : {\n\t\t\"OverrideFileName\" : \"',pipeline().parameters.overrideFileName,'\",\n\t\t\"TMSL\":',String(pipeline().parameters.tmslScript),'\n\t},\n\t\"LogFile\" : {\n\t \"PurgeThresholdDays\" : \"',pipeline().parameters.PurgeThresholdDays,'\"\n\t}\n}'))",
								"type": "Expression"
							},
							"timeout": "01:00:00",
							"reportStatusOnCallBack": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"tmslScript": {
						"type": "string",
						"defaultValue": {
							"refresh": {
								"type": "full",
								"objects": [
									{
										"database": "CDConnect_SOPForecast"
									}
								]
							}
						}
					},
					"PurgeThresholdDays": {
						"type": "string",
						"defaultValue": "14"
					},
					"overrideFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-06T13:10:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyNewFilesByLastModifiedDate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new and changed files only by using LastModifiedDate",
				"activities": [
					{
						"name": "CopyNewFiles",
						"description": "Copy new and changed files only by using LastModifiedDate",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@{pipeline().parameters.LastModified_From}",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@{pipeline().parameters.LastModified_To}",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "*",
										"type": "Expression"
									}
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BinaryDataSourceStore",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.FolderPath_Source",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.Directory_Source",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryDataDestinationStore",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.FolderPath_Destination",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.Directory_Destination",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderPath_Source": {
						"type": "String",
						"defaultValue": "sourcefolder"
					},
					"Directory_Source": {
						"type": "String",
						"defaultValue": "subfolder"
					},
					"FolderPath_Destination": {
						"type": "String",
						"defaultValue": "destinationfolder"
					},
					"Directory_Destination": {
						"type": "String",
						"defaultValue": "subfolder"
					},
					"LastModified_From": {
						"type": "String",
						"defaultValue": "2019-02-01T00:00:00Z"
					},
					"LastModified_To": {
						"type": "String",
						"defaultValue": "2019-03-01T00:00:00Z"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-12-23T06:00:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinaryDataSourceStore')]",
				"[concat(variables('factoryId'), '/datasets/BinaryDataDestinationStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Getlookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "getlookup",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"lastModified",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@adddays(utcnow(),-10)",
									"type": "Expression"
								},
								"modifiedDatetimeEnd": {
									"value": "@utcnow()",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/getlookup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aggregatedf')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Aggregatedfs",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Aggregationdf",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Aggregationdf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/anikettest1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "anikettesting",
						"description": "1111",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Binary1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Binary2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"testingarm": {
						"type": "string",
						"defaultValue": "1234"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-12-22T09:59:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Binary1')]",
				"[concat(variables('factoryId'), '/datasets/Binary2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/conditionalsp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "conditionalsplit",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "conditionalsplit1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employeesdata": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/conditionalsplit1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowstest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-02-04T16:47:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventblob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Eventblobcopy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "eventtest1ds1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "eventtestls2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2020-12-10T17:49:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/eventtest1ds1')]",
				"[concat(variables('factoryId'), '/datasets/eventtestls2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/exceldataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-23T07:54:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Filter data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Usefiltertransformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Usefiltertransformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getmetadataact')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText24",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@adddays(utcnow(),-10)",
									"type": "Expression"
								},
								"modifiedDatetimeEnd": {
									"value": "@utcnow()",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText24')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jasontest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "jsonarrays",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "jsonarrays",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/jsonarrays')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lastmodifieddate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@adddays(utcnow(),-2)",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"wildcardFileName": "*csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "lm1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText23",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/lm1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText23')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/modifieddates')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText32",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DelimitedText31",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText32')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText31')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data11",
						"description": "fdsgdsfgds",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Binary1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Binary2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T05:14:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Binary1')]",
				"[concat(variables('factoryId'), '/datasets/Binary2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/webactivty')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web111",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://dummy.restapiexample.com/api/v1/employees",
							"method": "GET",
							"headers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/001_SQL_Appointment_Staged')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "001_Principal_Operations"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Test_Appointment_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Appointment Person ID",
						"type": "uniqueidentifier"
					},
					{
						"name": "Appointment Number",
						"type": "nvarchar"
					},
					{
						"name": "Appointment Datetime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Appointment Date",
						"type": "date"
					},
					{
						"name": "Appointment Time",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "001_Test_Appointment_Staged"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/001_SQL_Case_Staged')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "001_Principal_Operations"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "001_Case_Staged"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/001_SQL_Contact_Staged2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "001_Principal_Operations"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "001_Contact_Staged2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/001_SQL_Facility_Staged')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "001_Principal_Operations"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "001_Facility_Staged"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/001_SQL_Grades')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "001_Principal_Operations"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "001_Grades_Staged"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/001_SQL_Health_Survey_Staged')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "001_Principal_Operations"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "001_Health_Survey_Staged"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/001_SQL_OneCaseFacility_Staged')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "001_Principal_Operations"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "001_CaseFacility_staged"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/001_SQL_Test_Staged')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "001_Principal_Operations"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "001_Test_Staged"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/001_SQL_VaccineStatus_Staged')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "001_Principal_Operations"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "rts_person",
						"type": "uniqueidentifier"
					},
					{
						"name": "Vaccine_Status",
						"type": "nvarchar"
					},
					{
						"name": "Last_Vaccination_Date",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "001_VaccineStatus_Staged"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/001_adls_Grades')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "reporting_datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "001_Principal_Operations"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Microsoft_student_Info.csv",
						"folderPath": "Grade Data",
						"fileSystem": "0-bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "UserPrincipalName",
						"type": "String"
					},
					{
						"name": "LocationCode",
						"type": "String"
					},
					{
						"name": "Costcenter",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/reporting_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Archival_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "mapdatastorage"
					},
					"Delimiter": {
						"type": "string",
						"defaultValue": "\t"
					},
					"Archival_Path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Archival_Path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().Delimiter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo.harishSQL",
					"table": "test"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureTableStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureTable",
				"schema": [],
				"typeProperties": {
					"tableName": "harishtest"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureTableStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ASAjobs.txt",
						"container": "inputfolder"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputfolder"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDataDestinationStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your data destination store.  ",
				"linkedServiceName": {
					"referenceName": "linkedService2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDataSourceStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your data source store. ",
				"linkedServiceName": {
					"referenceName": "linkedService1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "day1.txt",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSVTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage72",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "exporteddata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage72')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CohortData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cohort_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Student District ID",
						"type": "nvarchar"
					},
					{
						"name": "Grade",
						"type": "nvarchar"
					},
					{
						"name": "Instructional Model",
						"type": "nvarchar"
					},
					{
						"name": "On-Site Childcare",
						"type": "nvarchar"
					},
					{
						"name": "Transportation",
						"type": "nvarchar"
					},
					{
						"name": "Athletics/Auxiliary",
						"type": "nvarchar"
					},
					{
						"name": "Row Number",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "001_Cohort"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CohortSecondarySchoolData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "reporting_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Secondary Groups and Instructional Program.csv",
						"folderPath": "cohort_data",
						"fileSystem": "0-bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "LOCAL_DISTRICT",
						"type": "String"
					},
					{
						"name": "COS_NAME",
						"type": "String"
					},
					{
						"name": "COST_CENTER_CODE",
						"type": "String"
					},
					{
						"name": "LOCATION_CODE",
						"type": "String"
					},
					{
						"name": "LOCATION_NAME",
						"type": "String"
					},
					{
						"name": "STUDENT_DISTRICT_ID",
						"type": "String"
					},
					{
						"name": "STD_FIRST_NAME",
						"type": "String"
					},
					{
						"name": "STD_LAST_NAME",
						"type": "String"
					},
					{
						"name": "GRADE_CODE",
						"type": "String"
					},
					{
						"name": "BIRTHDATE",
						"type": "String"
					},
					{
						"name": "COURSE_TITLE",
						"type": "String"
					},
					{
						"name": "COURSE_CATALOG_NUMBER",
						"type": "String"
					},
					{
						"name": "SECTION_NUMBER_CODE",
						"type": "String"
					},
					{
						"name": "COHORT_SECTION_NUMBER_CODE",
						"type": "String"
					},
					{
						"name": "CLASS_PERIOD_CODE",
						"type": "String"
					},
					{
						"name": "TEACHER_ID",
						"type": "String"
					},
					{
						"name": "TCH_LAST_NAME",
						"type": "String"
					},
					{
						"name": "TCH_FIRST_NAME",
						"type": "String"
					},
					{
						"name": "CLASS_ROOM_CODE",
						"type": "String"
					},
					{
						"name": "MISIS_CLASS_BEGIN_DATE",
						"type": "String"
					},
					{
						"name": "MISIS_CLASS_END_DATE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/reporting_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_Activity_Delimited_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Delimiter": {
						"type": "string"
					},
					"file_path": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"file_extension": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().file_name,dataset().file_extension)",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().file_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().Delimiter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "error"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText10')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage51",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Anikettestfile.csv",
						"container": "aniketinput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage51')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText11')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage52",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "department.csv",
						"container": "inputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage52')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText12')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage53",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage53')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText13')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage54",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employees_aggre.csv",
						"container": "inputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Empid",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage54')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText14')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage55",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "30",
						"type": "String"
					},
					{
						"name": "Rahul",
						"type": "String"
					},
					{
						"name": "India",
						"type": "String"
					},
					{
						"name": "33",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage55')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText15')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage56",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "30",
						"type": "String"
					},
					{
						"name": "Rahul",
						"type": "String"
					},
					{
						"name": "India",
						"type": "String"
					},
					{
						"name": "33",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage56')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText16')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage57",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "30",
						"type": "String"
					},
					{
						"name": "Rahul",
						"type": "String"
					},
					{
						"name": "India",
						"type": "String"
					},
					{
						"name": "33",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage57')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText17')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage60",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee.csv",
						"container": "inputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage60')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText18')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage61",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employees_aggre.csv",
						"container": "inputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Empid",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage61')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText19')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage62",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Employeecount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage62')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText20')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage63",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Employeecount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage63')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText21')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage64",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Employeecount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage64')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText22')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage65",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Employeecount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage65')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText23')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage66",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "mod",
						"container": "modified"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage66')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText24')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage67",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "inputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage67')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText25')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage69",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "mod1",
						"container": "modified"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage69')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText26')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage71",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "exporteddata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage71')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText27')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedService124",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "inputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService124')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText28')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage74",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": "inputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage74')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText29')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage75",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "exporteddata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage75')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage42",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Anikettestfile.csv",
						"container": "aniketinput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage42')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText31')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage82",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputjson"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage82')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText32')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage83",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "exporteddata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage83')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText33')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage84",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "inputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage84')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage44",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Anikettestfile.csv",
						"container": "aniketinput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Harish",
						"type": "String"
					},
					{
						"name": "33",
						"type": "String"
					},
					{
						"name": "30000",
						"type": "String"
					},
					{
						"name": "Pilani",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage44')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage46",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Anikettestfile.csv",
						"container": "aniketinput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage46')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText7')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage47",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "aniketoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage47')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText8')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage49",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Anikettestfile.csv",
						"container": "aniketinput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage49')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText9')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage50",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Anikettestfile.csv",
						"container": "aniketinput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage50')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delimited_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "mapdatastorage"
					},
					"Delimiter": {
						"type": "string",
						"defaultValue": "\t"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().Delimiter",
						"type": "Expression"
					},
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ElementarySchoolCohortData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "reporting_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "New Group_Groups and Instructional Program.csv",
						"folderPath": "cohort_data",
						"fileSystem": "0-bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Campus LC",
						"type": "String"
					},
					{
						"name": "Campus Name",
						"type": "String"
					},
					{
						"name": "Cohort Type",
						"type": "String"
					},
					{
						"name": "District ID",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "Grade",
						"type": "String"
					},
					{
						"name": "Group Category",
						"type": "String"
					},
					{
						"name": "Group Subcategory",
						"type": "String"
					},
					{
						"name": "GroupEndDate",
						"type": "String"
					},
					{
						"name": "GroupLeader",
						"type": "String"
					},
					{
						"name": "GroupLeader_ID",
						"type": "String"
					},
					{
						"name": "GroupName",
						"type": "String"
					},
					{
						"name": "GroupStartDate",
						"type": "String"
					},
					{
						"name": "Instructional Program",
						"type": "String"
					},
					{
						"name": "Instructional Program End Date",
						"type": "String"
					},
					{
						"name": "Instructional Program Start Date",
						"type": "String"
					},
					{
						"name": "IsStudentSpecialEd",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "LC",
						"type": "String"
					},
					{
						"name": "LD",
						"type": "String"
					},
					{
						"name": "PrincipalEmail",
						"type": "String"
					},
					{
						"name": "PrincipalName",
						"type": "String"
					},
					{
						"name": "School Name",
						"type": "String"
					},
					{
						"name": "Student Group End Date",
						"type": "String"
					},
					{
						"name": "Student Group Start Date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/reporting_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ADF_Test.xlsx",
						"container": "input"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "EmplName",
						"type": "String"
					},
					{
						"name": "EmplDept",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage32",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "timestamp.xlsx",
						"container": "haimfile"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Timevalues",
						"type": "String"
					},
					{
						"name": "values",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage32')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage33",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "timestamp.xlsx",
						"container": "haimfile"
					}
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage33')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage851112",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "d49342fa-40b1-47b1-b959-256f3018be57.xlsx",
						"container": "dataflow"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage851112')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Generic_File_Exists')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"file_path": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"delimiter": {
						"type": "string"
					},
					"file_extension": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().file_name,dataset().file_extension)",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().file_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().delimiter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JSON_Payroll')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_gen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"inputAdlsContainerName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "WFO/payroll"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "2020_06_10_14_02_payroll_testi-j.json",
						"folderPath": "raw/natural/GTWFO/payroll/2020/06/10/PM",
						"fileSystem": {
							"value": "@dataset().inputAdlsContainerName",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"success": {
							"type": "boolean"
						},
						"payload": {
							"type": "object",
							"properties": {
								"payroll_records": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"employee_id": {
												"type": "string"
											},
											"employee_name": {
												"type": "string"
											},
											"payroll_code": {
												"type": "string"
											},
											"employee_payroll_code": {
												"type": "string"
											},
											"external_id": {
												"type": "string"
											},
											"payroll_description": {
												"type": "string"
											},
											"date": {
												"type": "string"
											},
											"task_type_id": {
												"type": "string"
											},
											"task_type_tags": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"id": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"tag_group": {
															"type": "string"
														}
													}
												}
											},
											"hours": {
												"type": "integer"
											},
											"days": {
												"type": "integer"
											},
											"is_confirmed": {
												"type": "boolean"
											},
											"updated_at": {
												"type": "string"
											},
											"time_span_type": {
												"type": "string"
											},
											"time_unit_type": {
												"type": "string"
											},
											"planning_unit_id": {
												"type": "string"
											}
										}
									}
								},
								"payroll_errors": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"employee_id": {
												"type": "string"
											},
											"employee_name": {
												"type": "string"
											},
											"error_type": {
												"type": "string"
											},
											"error_dates": {
												"type": "array"
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage59",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputs"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage59')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage80",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "harishtesting.json",
						"container": "exporteddata"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer"
						},
						"os_version": {
							"type": "string"
						},
						"model": {
							"type": "string"
						},
						"app_version": {
							"type": "string"
						},
						"os_type": {
							"type": "string"
						},
						"udid": {
							"type": "string"
						},
						"imei": {
							"type": "string"
						},
						"serial_number": {
							"type": "string"
						},
						"hardware_serial_number": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"product_name": {
							"type": "string"
						},
						"activated_at": {
							"type": "string"
						},
						"last_app_connection": {
							"type": "string"
						},
						"user": {
							"type": "object",
							"properties": {
								"id": {
									"type": "integer"
								},
								"name": {
									"type": "null"
								},
								"email": {
									"type": "string"
								},
								"external_id": {
									"type": "null"
								},
								"organization": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string"
										},
										"id": {
											"type": "integer"
										}
									}
								}
							}
						},
						"identifier": {
							"type": "string"
						},
						"health_status": {
							"type": "string"
						},
						"compliance_status": {
							"type": "null"
						},
						"risk_status": {
							"type": "string"
						},
						"mdm_status": {
							"type": "string"
						},
						"current_health_warnings": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"current_compliance_warnings": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"current_risk_warnings": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"compromised": {
							"type": "boolean"
						},
						"configuration": {
							"type": "object",
							"properties": {
								"location_services": {
									"type": "string"
								},
								"push_notifications": {
									"type": "string"
								},
								"personal_vpn": {
									"type": "string"
								},
								"default_installer": {
									"type": "string"
								},
								"system_admin": {
									"type": "string"
								},
								"samsung_knox_services": {
									"type": "string"
								}
							}
						},
						"stats": {
							"type": "object",
							"properties": {
								"networks_monitored": {
									"type": "integer"
								},
								"access_points_scanned": {
									"type": "integer"
								},
								"apps_analyzed": {
									"type": "integer"
								},
								"incidents": {
									"type": "object",
									"properties": {
										"network": {
											"type": "object",
											"properties": {
												"open": {
													"type": "integer"
												},
												"total": {
													"type": "integer"
												}
											}
										},
										"malware": {
											"type": "object",
											"properties": {
												"open": {
													"type": "integer"
												},
												"total": {
													"type": "integer"
												}
											}
										},
										"indicator_of_compromise": {
											"type": "object",
											"properties": {
												"open": {
													"type": "integer"
												},
												"total": {
													"type": "integer"
												}
											}
										},
										"configuration": {
											"type": "object",
											"properties": {
												"open": {
													"type": "integer"
												},
												"total": {
													"type": "integer"
												}
											}
										},
										"os": {
											"type": "object",
											"properties": {
												"open": {
													"type": "integer"
												},
												"total": {
													"type": "integer"
												}
											}
										}
									}
								}
							}
						},
						"mdm": {
							"type": "object",
							"properties": {
								"username": {
									"type": "string"
								},
								"device_id": {
									"type": "string"
								},
								"friendly_name": {
									"type": "string"
								},
								"last_connection": {
									"type": "string"
								},
								"organization_group": {
									"type": "string"
								}
							}
						},
						"container": {
							"type": "boolean"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage80')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage81",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "jsonoutputs"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage81')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLSGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tgt_container": {
						"type": "string",
						"defaultValue": "mapdatastorage"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().tgt_container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLSGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tablelist')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedds1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "inputEmp.txt",
						"container": "adfv2tutorial"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedds1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset123')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservice123",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "babu"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservice123')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds111')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls333",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee.csv",
						"container": "inputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls333')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls22",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee.csv",
						"container": "inputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls22')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds33')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls33",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls33')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employeesdatads')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "emplls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employees_aggre.csv",
						"container": "inputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Empid",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/emplls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventtest1ds1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eventtestls1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "eventtest1"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eventtestls1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventtestls2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eventtestls2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "eventtest2"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eventtestls2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getlookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage68",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "inputs"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage68')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lm1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lm11",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "inputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lm11')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls11",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee.csv",
						"container": "inputs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls11')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stg_001_adf_Contact_Staged')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Person Dynamics ID",
						"type": "nvarchar"
					},
					{
						"name": "Person Employee ID",
						"type": "nvarchar"
					},
					{
						"name": "Person Student ID",
						"type": "nvarchar"
					},
					{
						"name": "Person Full Name",
						"type": "nvarchar"
					},
					{
						"name": "Person Cost Center Code",
						"type": "nvarchar"
					},
					{
						"name": "Vaccine Status",
						"type": "nvarchar"
					},
					{
						"name": "Case Type",
						"type": "nvarchar"
					},
					{
						"name": "Case Status",
						"type": "nvarchar"
					},
					{
						"name": "Case Age",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Case Number",
						"type": "nvarchar"
					},
					{
						"name": "Access",
						"type": "nvarchar"
					},
					{
						"name": "Survey Pass Issued",
						"type": "bit"
					},
					{
						"name": "Survey Created On",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "AccessDuration",
						"type": "date"
					},
					{
						"name": "NoOfDaysSinceLastTest",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Conditionally Approved",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "001_adf_Contact_Staged"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLSGen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ADLS Gen 2 data lake ",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLSGen2_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_gen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLS_gen2_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzSQLDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzSQLDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault4",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzureBlobStorage1_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage10')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage10_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage11')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage11_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage12')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage12_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage13')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage13_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage14')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage14_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage15')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage15_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage16')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage16_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage17')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage17_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage18')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage18_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage19')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage19_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage20')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage20_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage21')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage21_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage22')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage22_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage23')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage23_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage24')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage24_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage25')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage25_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage26')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage26_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage27')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage27_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage28')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage28_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage29')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage29_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage3_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage30')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage30_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage31')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage31_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage32')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage32_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage33')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage33_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage34')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage34_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage35')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage35_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage36')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage36_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage37')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage37_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage38')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage38_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage39')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage39_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage4')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage4_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage40')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage40_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage41')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage41_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage42')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage42_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage43')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage43_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage44')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage44_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage45')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage45_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage46')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage46_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage47')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage47_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage48')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage48_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage49')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage49_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage5')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage5_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage50')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage50_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage51')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage51_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage52')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage52_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage53')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage53_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage54')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage54_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage55')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage55_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage56')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage56_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage57')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage57_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage58')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage58_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage59')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage59_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage6')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage6_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage60')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage60_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage61')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage61_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage62')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage62_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage63')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage63_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage64')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage64_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage65')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage65_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage66')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage66_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage67')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage67_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage68')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage68_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage69')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage69_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage7')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage7_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage70')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage70_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage71')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage71_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage72')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage72_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage73')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage73_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage74')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage74_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage75')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage75_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage76')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage76_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage77')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage77_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage78')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage78_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage79')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage79_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage8')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage8_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage80')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage80_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage81')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage81_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage82')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage82_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage83')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage83_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage84')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage84_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage851111')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage851111_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime2",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage851112')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage851112_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime4",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage9')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage9_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage3_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage3_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricksDLL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-8917076304931352.12.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "MAPKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "adb-edo-workspace-token"
					},
					"existingClusterId": "0820-143252-drags18"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MAPKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault2_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault3_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault4')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault4_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime4",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureTableStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureTableStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureTableStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureTableStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureTableStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureTableStorage2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Datasetcsv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Datasetcsv_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOGDBSERVER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "MAPKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LOGDBSERVER_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MAPKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MAPKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('MAPKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NonprodLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "test",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('NonprodLS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvdepartmentls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "csvdepartmentls",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('csvdepartmentls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvemplds')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "csvemplds",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('csvemplds_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvforematxells')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('csvforematxells_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalake_004')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('datalake_004_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/departmentcsvls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "departmentcsv",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('departmentcsvls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/desktop')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('desktop_properties_typeProperties_host')]",
					"userId": "[parameters('desktop_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('desktop_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/destinationfilterls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "destinationfilterls",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('destinationfilterls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/emplls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('emplls_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employeescsvls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "employeescsvls",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('employeescsvls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventtestls1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('eventtestls1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventtestls2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('eventtestls2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/filterexcells')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "filterexcells",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('filterexcells_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/filteroutputharishls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "filteroutputharishls",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('filteroutputharishls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/filtertestls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "filtertestls",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('filtertestls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/harishaggregratelss')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('harishaggregratelss_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/joinoutputofemplndeptls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "joinoutputofemplndept",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('joinoutputofemplndeptls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsontocsv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('jsontocsv_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService124')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService124_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService3_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedds1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedds1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedservice123')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedservice123_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lm11')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('lm11_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls11')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls11_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls22')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls22_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls33')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls33_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls333')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls333_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputempldept')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "outputempldept",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('outputempldept_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquet3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "parquet3",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('parquet3_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquetls1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "parquetls1",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('parquetls1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquetls2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "parquetls2",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('parquetls2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/reporting_datalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('reporting_datalake_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sharepointdata')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "sharepointdata",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('sharepointdata_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sourcecsvls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "sourcecsvls",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('sourcecsvls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('sql1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/testtimeds')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('testtimeds_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/xelformatls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "xelformatls",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('xelformatls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copytestblobtoblob')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "copytestblobtoblob",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "eventblob",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/eventtest1/blobs/eventtest1",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('copytestblobtoblob_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/eventblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "eastus",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime2')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": true
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime3')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "West Europe",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime4')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "West Europe",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/001_Principal_Operations_perf_append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "001_Principal_Operations"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "datalake_004",
								"type": "LinkedServiceReference"
							},
							"name": "oneFacility"
						},
						{
							"linkedService": {
								"referenceName": "datalake_004",
								"type": "LinkedServiceReference"
							},
							"name": "oneContact"
						},
						{
							"linkedService": {
								"referenceName": "datalake_004",
								"type": "LinkedServiceReference"
							},
							"name": "oneCases"
						},
						{
							"linkedService": {
								"referenceName": "datalake_004",
								"type": "LinkedServiceReference"
							},
							"name": "oneTests"
						},
						{
							"linkedService": {
								"referenceName": "datalake_004",
								"type": "LinkedServiceReference"
							},
							"name": "oneSurvey"
						},
						{
							"linkedService": {
								"referenceName": "datalake_004",
								"type": "LinkedServiceReference"
							},
							"name": "oneAppointment"
						},
						{
							"linkedService": {
								"referenceName": "datalake_004",
								"type": "LinkedServiceReference"
							},
							"name": "getGuestSurvey"
						},
						{
							"linkedService": {
								"referenceName": "datalake_004",
								"type": "LinkedServiceReference"
							},
							"name": "VaccineSource2"
						},
						{
							"linkedService": {
								"referenceName": "datalake_004",
								"type": "LinkedServiceReference"
							},
							"name": "OneCaseFacility"
						},
						{
							"dataset": {
								"referenceName": "ElementarySchoolCohortData",
								"type": "DatasetReference"
							},
							"name": "CohortElementarySchoolData"
						},
						{
							"dataset": {
								"referenceName": "CohortSecondarySchoolData",
								"type": "DatasetReference"
							},
							"name": "CohortSecondarySchoolData"
						},
						{
							"dataset": {
								"referenceName": "001_adls_Grades",
								"type": "DatasetReference"
							},
							"name": "Grades"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "001_SQL_Test_Staged",
								"type": "DatasetReference"
							},
							"name": "sinkTests"
						},
						{
							"dataset": {
								"referenceName": "001_SQL_Health_Survey_Staged",
								"type": "DatasetReference"
							},
							"name": "sinkSurvey"
						},
						{
							"dataset": {
								"referenceName": "001_SQL_Facility_Staged",
								"type": "DatasetReference"
							},
							"name": "sinkFacility"
						},
						{
							"dataset": {
								"referenceName": "001_SQL_OneCaseFacility_Staged",
								"type": "DatasetReference"
							},
							"name": "OneCaseFacilitySink"
						},
						{
							"dataset": {
								"referenceName": "CohortData",
								"type": "DatasetReference"
							},
							"name": "sinkCohort"
						},
						{
							"dataset": {
								"referenceName": "001_SQL_VaccineStatus_Staged",
								"type": "DatasetReference"
							},
							"name": "sinkVaccineStatus"
						},
						{
							"dataset": {
								"referenceName": "001_SQL_Appointment_Staged",
								"type": "DatasetReference"
							},
							"name": "sinkAppointment"
						},
						{
							"dataset": {
								"referenceName": "001_SQL_Case_Staged",
								"type": "DatasetReference"
							},
							"name": "sinkCase"
						},
						{
							"dataset": {
								"referenceName": "001_SQL_Contact_Staged2",
								"type": "DatasetReference"
							},
							"name": "sinkContact"
						},
						{
							"dataset": {
								"referenceName": "001_SQL_Grades",
								"type": "DatasetReference"
							},
							"name": "sinkGrades"
						},
						{
							"dataset": {
								"referenceName": "stg_001_adf_Contact_Staged",
								"type": "DatasetReference"
							},
							"name": "sinkAllowedDisallowed"
						}
					],
					"transformations": [
						{
							"name": "twoFacility"
						},
						{
							"name": "threeFacility"
						},
						{
							"name": "twoTests"
						},
						{
							"name": "twoSurvey"
						},
						{
							"name": "twoAppointment"
						},
						{
							"name": "TestCreatedOn"
						},
						{
							"name": "threeSurvey"
						},
						{
							"name": "threeAppointment"
						},
						{
							"name": "DecodeValues"
						},
						{
							"name": "twoGuestSurvey"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "threeCase"
						},
						{
							"name": "NoOfDaysSinceLastTest"
						},
						{
							"name": "threetest"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "TestDateToPST"
						},
						{
							"name": "SelectVaccineColumns"
						},
						{
							"name": "twoCases"
						},
						{
							"name": "DateToPST"
						},
						{
							"name": "Select6"
						},
						{
							"name": "ElementaryColumns"
						},
						{
							"name": "SecondaryColumns"
						},
						{
							"name": "CohortUnion"
						},
						{
							"name": "InstructionalModel"
						},
						{
							"name": "OnSiteChildcare"
						},
						{
							"name": "Transportation"
						},
						{
							"name": "Athletics"
						},
						{
							"name": "SelectCohortColumns"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Select8"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "filterOutBlankLocationNumbers"
						},
						{
							"name": "DerivedColumn8"
						},
						{
							"name": "DailyPass"
						},
						{
							"name": "FilterInactivePersonAndNullCostCenterMapping"
						},
						{
							"name": "ActiveTests"
						},
						{
							"name": "FilterNewExternalTestReviewStatus"
						},
						{
							"name": "FilterDeclinedExternalReviewStatus"
						},
						{
							"name": "FilterPendingResultsaAndCaseClosed"
						},
						{
							"name": "oneAccess"
						},
						{
							"name": "twoAccess"
						},
						{
							"name": "threeAccess"
						},
						{
							"name": "JoinDailyPass"
						},
						{
							"name": "fiveAccess"
						},
						{
							"name": "sixAccess"
						},
						{
							"name": "AccessJoinCase"
						},
						{
							"name": "sevenAccess"
						},
						{
							"name": "OrderByLatest"
						},
						{
							"name": "AggById"
						},
						{
							"name": "AccessDuration"
						},
						{
							"name": "FilterNulls"
						},
						{
							"name": "DerivedColumn9"
						},
						{
							"name": "DerivedColumn10"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "DeriveVaccinationDate"
						},
						{
							"name": "FilteroutInactive"
						},
						{
							"name": "filternewschool"
						},
						{
							"name": "NinetyDaysFromToday"
						},
						{
							"name": "filternewschoolyear"
						},
						{
							"name": "NinetyDaysfromTodayDate"
						},
						{
							"name": "Union2"
						},
						{
							"name": "Union3"
						},
						{
							"name": "SelectGrades"
						},
						{
							"name": "sortbycasecreated"
						},
						{
							"name": "flternullcases"
						},
						{
							"name": "filterObsoleteCaseType"
						},
						{
							"name": "Select13"
						},
						{
							"name": "AgrCreatedOn"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "SortForRemoveDuplicates"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "FilterNotNullAccessDuration"
						},
						{
							"name": "filteropencases"
						},
						{
							"name": "GroupLatestOpenCases"
						},
						{
							"name": "AddAccessDuration"
						},
						{
							"name": "UnionOpenCasesAndAccessDuration"
						},
						{
							"name": "OrderingColumns"
						},
						{
							"name": "Select14"
						},
						{
							"name": "DailyPassSorted"
						},
						{
							"name": "AggDailyPassRecord"
						},
						{
							"name": "DeriveVaccineStatus"
						},
						{
							"name": "twoContact"
						},
						{
							"name": "DervieConsolidatedVaccineStatus"
						},
						{
							"name": "DeriveDateDiffAdd"
						},
						{
							"name": "Filter1MonthsDataOneSurve"
						},
						{
							"name": "DerivedDateDiffNew"
						},
						{
							"name": "Filte1MonthsDataGuestSurvey"
						},
						{
							"name": "Last111DaysOfData"
						},
						{
							"name": "GuestPassIssuedCheckExceptions"
						},
						{
							"name": "ConditionallyApprovedUpdate"
						},
						{
							"name": "AgeCalculate"
						},
						{
							"name": "DateOfBirth"
						},
						{
							"name": "AgeTurning12"
						},
						{
							"name": "AgeForOnlyStudent"
						},
						{
							"name": "Window1"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Window3"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Window4"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "Window5"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "Window6"
						},
						{
							"name": "Filter8"
						},
						{
							"name": "Window7"
						},
						{
							"name": "Filter9"
						},
						{
							"name": "Window8"
						},
						{
							"name": "Filter10"
						},
						{
							"name": "Window9"
						},
						{
							"name": "Filter11"
						}
					],
					"script": "source(output(\n\t\tId as string,\n\t\tSinkCreatedOn as timestamp,\n\t\tSinkModifiedOn as timestamp,\n\t\tstatecode as long,\n\t\tstatuscode as long,\n\t\tmsft_entrywindowinterval as long,\n\t\trts_validasatestlocation as long,\n\t\trts_entitytype as long,\n\t\towningteam as string,\n\t\towningteam_entitytype as string,\n\t\tcreatedby as string,\n\t\tcreatedby_entitytype as string,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfby_entitytype as string,\n\t\tmsft_addresscountryid as string,\n\t\tmsft_addresscountryid_entitytype as string,\n\t\tmsft_facilitytypeid as string,\n\t\tmsft_facilitytypeid_entitytype as string,\n\t\tmsft_reopenphaseid as string,\n\t\tmsft_reopenphaseid_entitytype as string,\n\t\tmsft_facilitygroupid as string,\n\t\tmsft_facilitygroupid_entitytype as string,\n\t\tmodifiedby as string,\n\t\tmodifiedby_entitytype as string,\n\t\towninguser as string,\n\t\towninguser_entitytype as string,\n\t\tmsft_addressstateprovinceid as string,\n\t\tmsft_addressstateprovinceid_entitytype as string,\n\t\towningbusinessunit as string,\n\t\towningbusinessunit_entitytype as string,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfby_entitytype as string,\n\t\townerid as string,\n\t\townerid_entitytype as string,\n\t\tcreatedonbehalfbyname as string,\n\t\ttimezoneruleversionnumber as long,\n\t\towningbusinessunitname as string,\n\t\towneridtype as string,\n\t\tversionnumber as long,\n\t\tmsft_addressstateprovince as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\tmsft_addresscountry as string,\n\t\trts_internalname as string,\n\t\tmsft_facilitygroupidname as string,\n\t\tmsft_name as string,\n\t\tmodifiedbyyominame as string,\n\t\tmsft_addresscity as string,\n\t\trts_boe as string,\n\t\trts_campusname as string,\n\t\trts_campuscode as string,\n\t\timportsequencenumber as long,\n\t\tmsft_description as string,\n\t\tcreatedon as timestamp,\n\t\tmsft_addresscountryidname as string,\n\t\tcreatedbyyominame as string,\n\t\toverriddencreatedon as timestamp,\n\t\trts_sitetype as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\ttraversedpath as string,\n\t\tmsft_addresslatitude as string,\n\t\tmsft_addresspostalcode as string,\n\t\tstageid as string,\n\t\towneridyominame as string,\n\t\tprocessid as string,\n\t\trts_ld as string,\n\t\tcreatedbyname as string,\n\t\tutcconversiontimezonecode as long,\n\t\tmodifiedbyname as string,\n\t\tmsft_addresslongitude as string,\n\t\tmodifiedon as timestamp,\n\t\tmsft_facilitytypeidname as string,\n\t\tmsft_facilityid as string,\n\t\tmsft_reopenphaseidname as string,\n\t\tmsft_addressstateprovinceidname as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\towneridname as string,\n\t\trts_physicalcos as string,\n\t\trts_integrationstatus as long,\n\t\tmsft_addressstreet2 as string,\n\t\tmsft_addressstreet1 as string,\n\t\tmsft_facilitynumber as string,\n\t\tIsDelete as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tentity: 'msft_facility',\n\tformat: 'cdm',\n\tmanifestType: 'model',\n\tfolderPath: '',\n\tfileSystem: 'dataverse-lausdrtsprod-org8533b280') ~> oneFacility\nsource(output(\n\t\tId as string,\n\t\tSinkCreatedOn as timestamp,\n\t\tSinkModifiedOn as timestamp,\n\t\tstatecode as long,\n\t\tstatuscode as long,\n\t\taddress3_freighttermscode as long,\n\t\tcustomersizecode as long,\n\t\trts_dose2sourcesystem as long,\n\t\trts_persontype as long,\n\t\trts_instructionalprogram as long,\n\t\trts_dailypassfordependentsunder13yearsold as long,\n\t\taddress1_freighttermscode as long,\n\t\tfamilystatuscode as long,\n\t\trts_covidtestwithoutparent as long,\n\t\thaschildrencode as long,\n\t\trts_race as long,\n\t\trts_sexualorientation as long,\n\t\trts_qualifiesforadailypass as long,\n\t\trts_primaryphonetype as long,\n\t\tcustomertypecode as long,\n\t\taddress3_addresstypecode as long,\n\t\trts_typeofvaccine as long,\n\t\tgendercode as long,\n\t\tshippingmethodcode as long,\n\t\tpaymenttermscode as long,\n\t\trts_vaccinationstatus as long,\n\t\teducationcode as long,\n\t\trts_preferredlanguage as long,\n\t\taddress2_shippingmethodcode as long,\n\t\tleadsourcecode as long,\n\t\tterritorycode as long,\n\t\taddress3_shippingmethodcode as long,\n\t\trts_portalpersontype as long,\n\t\trts_applanguage as long,\n\t\trts_vaccinationapproval as long,\n\t\trts_ethnicity as long,\n\t\taddress2_freighttermscode as long,\n\t\trts_consent as long,\n\t\trts_othercontact as long,\n\t\trts_dob_month as long,\n\t\taccountrolecode as long,\n\t\taddress1_shippingmethodcode as long,\n\t\trts_authorize as long,\n\t\tpreferredcontactmethodcode as long,\n\t\trts_dose1sourcesystem as long,\n\t\trts_sexcode as long,\n\t\tmsft_contacttype as long,\n\t\trts_gender as long,\n\t\tmsdyn_orgchangestatus as long,\n\t\trts_qualifiesfordailypass as long,\n\t\taddress2_addresstypecode as long,\n\t\taddress1_addresstypecode as long,\n\t\tpreferredappointmentdaycode as long,\n\t\tpreferredappointmenttimecode as long,\n\t\trts_unaccompaniedminor as long,\n\t\trts_dob_day as long,\n\t\trts_validdob as long,\n\t\trts_activetestprompted as boolean,\n\t\tadx_identity_emailaddress1confirmed as boolean,\n\t\tdonotphone as boolean,\n\t\trts_testpositivewithin90days as boolean,\n\t\tdonotpostalmail as boolean,\n\t\tcreditonhold as boolean,\n\t\tadx_confirmremovepassword as boolean,\n\t\tadx_identity_twofactorenabled as boolean,\n\t\tadx_profilealert as boolean,\n\t\tisbackofficecustomer as boolean,\n\t\tisprivate as boolean,\n\t\tdonotbulkemail as boolean,\n\t\tnew_allowteachersupervisedtesting as boolean,\n\t\tadx_identity_locallogindisabled as boolean,\n\t\trts_textmessages as boolean,\n\t\tparticipatesinworkflow as boolean,\n\t\tmsdyn_isminorwithparentalconsent as boolean,\n\t\trts_conditionallyapproved as boolean,\n\t\tmsft_isportalaccessrequired as boolean,\n\t\tmarketingonly as boolean,\n\t\tmerged as boolean,\n\t\trts_covidtestingforhybridinstruction as boolean,\n\t\tdonotemail as boolean,\n\t\tadx_identity_logonenabled as boolean,\n\t\tadx_identity_lockoutenabled as boolean,\n\t\tfollowemail as boolean,\n\t\tmsdyn_isminor as boolean,\n\t\tdonotfax as boolean,\n\t\tmsdyn_gdproptout as boolean,\n\t\tisautocreate as boolean,\n\t\tadx_identity_mobilephoneconfirmed as boolean,\n\t\tdonotbulkpostalmail as boolean,\n\t\tmsdyn_disablewebtracking as boolean,\n\t\tadx_profileisanonymous as boolean,\n\t\tdonotsendmm as boolean,\n\t\tparentcontactid as string,\n\t\tparentcontactid_entitytype as string,\n\t\tmsft_defaultareaid as string,\n\t\tmsft_defaultareaid_entitytype as string,\n\t\tmsft_hostid as string,\n\t\tmsft_hostid_entitytype as string,\n\t\towninguser as string,\n\t\towninguser_entitytype as string,\n\t\tmasterid as string,\n\t\tmasterid_entitytype as string,\n\t\tcreatedbyexternalparty as string,\n\t\tcreatedbyexternalparty_entitytype as string,\n\t\towningbusinessunit as string,\n\t\towningbusinessunit_entitytype as string,\n\t\tslaid as string,\n\t\tslaid_entitytype as string,\n\t\trts_mostrecentapptid as string,\n\t\trts_mostrecentapptid_entitytype as string,\n\t\taccountid as string,\n\t\taccountid_entitytype as string,\n\t\towningteam as string,\n\t\towningteam_entitytype as string,\n\t\trts_union as string,\n\t\trts_union_entitytype as string,\n\t\tpreferredequipmentid as string,\n\t\tpreferredequipmentid_entitytype as string,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfby_entitytype as string,\n\t\trts_dpfacilityid as string,\n\t\trts_dpfacilityid_entitytype as string,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfby_entitytype as string,\n\t\tmsft_assignedareaid as string,\n\t\tmsft_assignedareaid_entitytype as string,\n\t\tdefaultpricelevelid as string,\n\t\tdefaultpricelevelid_entitytype as string,\n\t\tmodifiedby as string,\n\t\tmodifiedby_entitytype as string,\n\t\toriginatingleadid as string,\n\t\toriginatingleadid_entitytype as string,\n\t\trts_msft_employeecase as string,\n\t\trts_msft_employeecase_entitytype as string,\n\t\tslainvokedid as string,\n\t\tslainvokedid_entitytype as string,\n\t\tpreferredserviceid as string,\n\t\tpreferredserviceid_entitytype as string,\n\t\tmsft_defaultfacilityid as string,\n\t\tmsft_defaultfacilityid_entitytype as string,\n\t\tmsa_managingpartnerid as string,\n\t\tmsa_managingpartnerid_entitytype as string,\n\t\tadx_preferredlanguageid as string,\n\t\tadx_preferredlanguageid_entitytype as string,\n\t\tcreatedby as string,\n\t\tcreatedby_entitytype as string,\n\t\tpreferredsystemuserid as string,\n\t\tpreferredsystemuserid_entitytype as string,\n\t\tmodifiedbyexternalparty as string,\n\t\tmodifiedbyexternalparty_entitytype as string,\n\t\ttransactioncurrencyid as string,\n\t\ttransactioncurrencyid_entitytype as string,\n\t\trts_repofunion as string,\n\t\trts_repofunion_entitytype as string,\n\t\townerid as string,\n\t\townerid_entitytype as string,\n\t\tparentcustomerid as string,\n\t\tparentcustomerid_entitytype as string,\n\t\taging30_base as decimal(18,2),\n\t\taging60 as decimal(18,2),\n\t\taging60_base as decimal(18,2),\n\t\taging90_base as decimal(18,2),\n\t\tannualincome as decimal(18,2),\n\t\tcreditlimit_base as decimal(18,2),\n\t\tannualincome_base as decimal(18,2),\n\t\taging90 as decimal(18,2),\n\t\taging30 as decimal(18,2),\n\t\tcreditlimit as decimal(18,2),\n\t\taddress2_latitude as double,\n\t\tmsft_hostidname as string,\n\t\tmanagerphone as string,\n\t\taddress3_city as string,\n\t\tmsa_managingpartneridyominame as string,\n\t\tparentcustomeridname as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\trts_dose1clinic as string,\n\t\taddress2_city as string,\n\t\tutcconversiontimezonecode as long,\n\t\taddress3_name as string,\n\t\towningbusinessunitname as string,\n\t\tadx_identity_lastsuccessfullogin as timestamp,\n\t\tadx_identity_securitystamp as string,\n\t\tbusinesscard as string,\n\t\tspousesname as string,\n\t\tcreatedon as timestamp,\n\t\ttransactioncurrencyidname as string,\n\t\taddress2_line3 as string,\n\t\tmastercontactidname as string,\n\t\taddress2_line1 as string,\n\t\trts_dose1appttime as timestamp,\n\t\taddress1_city as string,\n\t\tfirstname as string,\n\t\tbusiness2 as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\taddress3_latitude as double,\n\t\tcreatedbyname as string,\n\t\toverriddencreatedon as timestamp,\n\t\trts_dose1admin as string,\n\t\tmanagername as string,\n\t\trts_dose1batch as string,\n\t\tmsdyn_portaltermsagreementdate as timestamp,\n\t\trts_dacecostcenter as string,\n\t\tmsft_hostname as string,\n\t\tmsft_defaultareaidname as string,\n\t\taddress1_addressid as string,\n\t\trts_dose2vis as string,\n\t\tassistantphone as string,\n\t\taccountidyominame as string,\n\t\trts_dose2serialno as string,\n\t\tpreferredequipmentidname as string,\n\t\tadx_identity_username as string,\n\t\taddress2_addressid as string,\n\t\taddress2_country as string,\n\t\trts_msft_employeecasename as string,\n\t\trts_responsibleadult as string,\n\t\tadx_modifiedbyipaddress as string,\n\t\tslaname as string,\n\t\tsubscriptionid as string,\n\t\tyomimiddlename as string,\n\t\trts_legalfirstname as string,\n\t\tassistantname as string,\n\t\tonholdtime as long,\n\t\trts_contractorcode as string,\n\t\trts_preferredmiddlename as string,\n\t\taddress1_stateorprovince as string,\n\t\taddress3_line2 as string,\n\t\taddress2_postofficebox as string,\n\t\tadx_profilealertdate as timestamp,\n\t\trts_dose2gtin as string,\n\t\tentityimageid as string,\n\t\taddress3_telephone1 as string,\n\t\taddress3_telephone2 as string,\n\t\taddress3_telephone3 as string,\n\t\temployeeid as string,\n\t\taddress1_primarycontactname as string,\n\t\tmodifiedbyyominame as string,\n\t\taddress1_line1 as string,\n\t\trts_dacestudentcode as string,\n\t\tmodifiedbyexternalpartyyominame as string,\n\t\tchildrensnames as string,\n\t\trts_dailypassexpireson as timestamp,\n\t\taccountidname as string,\n\t\trts_primaryphonenumber as string,\n\t\tnickname as string,\n\t\tsalutation as string,\n\t\trts_gradelevel as string,\n\t\taddress1_telephone1 as string,\n\t\taddress1_telephone2 as string,\n\t\taddress1_telephone3 as string,\n\t\trts_dose1vaccinetime as timestamp,\n\t\taddress3_postofficebox as string,\n\t\tprocessid as string,\n\t\taddress1_longitude as double,\n\t\tmsft_userid as string,\n\t\tmodifiedon as timestamp,\n\t\tfax as string,\n\t\tbirthdate as timestamp,\n\t\tcreatedonbehalfbyname as string,\n\t\trts_dose1serialno as string,\n\t\trts_legalmiddlename as string,\n\t\taddress3_fax as string,\n\t\trts_dose1mfg as string,\n\t\trts_dose2amount as string,\n\t\taddress2_primarycontactname as string,\n\t\tadx_createdbyusername as string,\n\t\temailaddress2 as string,\n\t\temailaddress1 as string,\n\t\trts_dose1amount as string,\n\t\taddress1_utcoffset as long,\n\t\tmastercontactidyominame as string,\n\t\toriginatingleadidyominame as string,\n\t\trts_dose2mfg as string,\n\t\ttelephone3 as string,\n\t\tentityimage_url as string,\n\t\tmsft_hostidyominame as string,\n\t\tadx_timezone as long,\n\t\taddress1_fax as string,\n\t\tcontactid as string,\n\t\tmobilephone as string,\n\t\taddress1_county as string,\n\t\tpager as string,\n\t\tlastonholdtime as timestamp,\n\t\tadx_profilelastactivity as timestamp,\n\t\tversionnumber as long,\n\t\tadx_publicprofilecopy as string,\n\t\taddress3_line1 as string,\n\t\taddress3_utcoffset as long,\n\t\trts_dose1expirationdate as timestamp,\n\t\thome2 as string,\n\t\trts_dose2route as string,\n\t\towneridyominame as string,\n\t\trts_mostrecentapptidname as string,\n\t\tdefaultpricelevelidname as string,\n\t\ttelephone2 as string,\n\t\tadx_modifiedbyusername as string,\n\t\trts_dose1logistition as string,\n\t\tlastusedincampaign as timestamp,\n\t\trts_preferredfirstname as string,\n\t\ttelephone1 as string,\n\t\tyomilastname as string,\n\t\trts_dose1lotnumber as string,\n\t\toriginatingleadidname as string,\n\t\texchangerate as decimal(18,2),\n\t\tnumberofchildren as long,\n\t\trts_parentportalcode as string,\n\t\taddress3_upszone as string,\n\t\taddress2_telephone2 as string,\n\t\tjobtitle as string,\n\t\trts_dose1route as string,\n\t\tadx_organizationname as string,\n\t\trts_mostrecentdpdate as timestamp,\n\t\trts_latesttestpositivedate as timestamp,\n\t\trts_dose1gtin as string,\n\t\tmsft_assignedareaidname as string,\n\t\taddress1_postofficebox as string,\n\t\tcreatedbyexternalpartyname as string,\n\t\tfullname as string,\n\t\trts_dose2appttime as timestamp,\n\t\taddress3_country as string,\n\t\taddress1_composite as string,\n\t\tparentcustomeridtype as string,\n\t\tentityimage_timestamp as long,\n\t\tteamsfollowed as long,\n\t\ttimespentbymeonemailandmeetings as string,\n\t\tadx_identity_lockoutenddate as timestamp,\n\t\taddress1_latitude as double,\n\t\tadx_preferredlanguageidname as string,\n\t\taddress3_postalcode as string,\n\t\taddress2_longitude as double,\n\t\taddress3_stateorprovince as string,\n\t\tparentcontactidyominame as string,\n\t\taddress1_country as string,\n\t\trts_vaccinewasreceived as string,\n\t\towneridtype as string,\n\t\ttraversedpath as string,\n\t\taddress2_line2 as string,\n\t\taddress3_addressid as string,\n\t\timportsequencenumber as long,\n\t\trts_dose2admin as string,\n\t\tadx_profilealertinstructions as string,\n\t\trts_dose1vis as string,\n\t\tdescription as string,\n\t\tmiddlename as string,\n\t\trts_dose2clinic as string,\n\t\tadx_profilemodifiedon as timestamp,\n\t\tmsft_company as string,\n\t\tftpsiteurl as string,\n\t\tpreferredsystemuseridname as string,\n\t\tmodifiedbyexternalpartyname as string,\n\t\tpreferredsystemuseridyominame as string,\n\t\tbusinesscardattributes as string,\n\t\trts_ecedstudentcode as string,\n\t\trts_activetestprompteddate as timestamp,\n\t\taddress3_longitude as double,\n\t\taddress1_upszone as string,\n\t\texternaluseridentifier as string,\n\t\tslainvokedidname as string,\n\t\temailaddress3 as string,\n\t\tmodifiedbyname as string,\n\t\taddress2_county as string,\n\t\tpreferredserviceidname as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\tcallback as string,\n\t\tmsa_managingpartneridname as string,\n\t\trts_dose2expirationdate as timestamp,\n\t\tdepartment as string,\n\t\tsuffix as string,\n\t\tanniversary as timestamp,\n\t\trts_legallastname as string,\n\t\trts_costcentercode as string,\n\t\taddress2_stateorprovince as string,\n\t\trts_dose2site as string,\n\t\trts_dose1site as string,\n\t\taddress2_fax as string,\n\t\trts_studentcode as string,\n\t\taddress2_upszone as string,\n\t\taddress3_county as string,\n\t\tcreatedbyexternalpartyyominame as string,\n\t\taddress3_line3 as string,\n\t\taddress1_line3 as string,\n\t\tcreatedbyyominame as string,\n\t\towneridname as string,\n\t\tadx_identity_passwordhash as string,\n\t\tadx_createdbyipaddress as string,\n\t\tstageid as string,\n\t\trts_repofunionname as string,\n\t\tyomifullname as string,\n\t\trts_dob_year as string,\n\t\trts_emergencycontact as string,\n\t\taddress2_name as string,\n\t\trts_datevaccinated as timestamp,\n\t\trts_preferredlastname as string,\n\t\trts_unionname as string,\n\t\tmsft_defaultfacilityidname as string,\n\t\taddress1_line2 as string,\n\t\twebsiteurl as string,\n\t\tyomifirstname as string,\n\t\tgovernmentid as string,\n\t\tparentcontactidname as string,\n\t\tadx_identity_newpassword as string,\n\t\taddress3_composite as string,\n\t\trts_dose2logistition as string,\n\t\trts_dose2batch as string,\n\t\trts_dpfacilityidname as string,\n\t\taddress2_utcoffset as long,\n\t\trts_autonumber as string,\n\t\tcompany as string,\n\t\trts_emergencycontactphone as string,\n\t\tadx_identity_accessfailedcount as long,\n\t\taddress2_telephone1 as string,\n\t\taddress2_telephone3 as string,\n\t\tlastname as string,\n\t\trts_dose2vaccinetime as timestamp,\n\t\trts_dose2lotnumber as string,\n\t\ttimezoneruleversionnumber as long,\n\t\taddress1_name as string,\n\t\tparentcustomeridyominame as string,\n\t\taddress1_postalcode as string,\n\t\taddress2_composite as string,\n\t\taddress3_primarycontactname as string,\n\t\taddress2_postalcode as string,\n\t\tIsDelete as boolean,\n\t\trts_consentforcovidvaccination as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tentity: 'contact',\n\tformat: 'cdm',\n\tmanifestType: 'model',\n\tfolderPath: '',\n\tfileSystem: 'dataverse-lausdrtsprod-org8533b280',\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','MM/dd/yyyy HH:mm']) ~> oneContact\nsource(output(\n\t\tId as string,\n\t\tSinkCreatedOn as timestamp,\n\t\tSinkModifiedOn as timestamp,\n\t\tstatecode as long,\n\t\tstatuscode as long,\n\t\trts_covid19positivetest as long,\n\t\trts_covid19testresult as long,\n\t\trts_nauseaorvomiting as long,\n\t\tmsft_riskassesment as long,\n\t\trts_closecontacttestingstatus as long,\n\t\trts_deceased_choice as long,\n\t\trts_newlossoftasteorsmell as long,\n\t\trts_casecategory as long,\n\t\trts_fatigue as long,\n\t\trts_muscleorbodyaches as long,\n\t\trts_unknowntype as long,\n\t\trts_cough as long,\n\t\trts_preferredlanguage as long,\n\t\trts_caseaffiliationtoedu as long,\n\t\trts_hospitalized_case as long,\n\t\trts_congestionorrunnynose as long,\n\t\trts_shortnessofbreathdifficultybreathing as long,\n\t\trts_contactinvestigationstatus as long,\n\t\trts_isschool as long,\n\t\trts_casetype as long,\n\t\trts_educationalgroup as long,\n\t\trts_countyofresidence as long,\n\t\trts_personexperiencinghomelessnesspeh as long,\n\t\trts_gender as long,\n\t\trts_fever as long,\n\t\trts_closecontactquarantinestatus as long,\n\t\trts_confirmedorsuspected as long,\n\t\trts_sorethroat as long,\n\t\trts_chills as long,\n\t\trts_diarrhea as long,\n\t\trts_casestatus as long,\n\t\trts_headache as long,\n\t\trts_assigned as boolean,\n\t\trts_contactedthesiteadministratorandaoo as boolean,\n\t\tmsft_isemployeeinstructionsprovided as boolean,\n\t\tmsft_isemployeecontacted as boolean,\n\t\tmsft_isscreened as boolean,\n\t\tmsft_ischeckinavailable as boolean,\n\t\trts_syncteam as boolean,\n\t\trts_hasthecasereceivedthecovid19vaccine as boolean,\n\t\trts_deceased as boolean,\n\t\trts_hospitalized as boolean,\n\t\trts_epilinked as boolean,\n\t\trts_asymptomatic as boolean,\n\t\trts_notifiedmotocleanaffectedareas as boolean,\n\t\trts_notifiedfamiliesandemployeesoftheschools as boolean,\n\t\tmsft_ispublichealthofficialnotified as boolean,\n\t\towninguser as string,\n\t\towninguser_entitytype as string,\n\t\trts_antigentest as string,\n\t\trts_antigentest_entitytype as string,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfby_entitytype as string,\n\t\trts_cohortmember as string,\n\t\trts_cohortmember_entitytype as string,\n\t\towningbusinessunit as string,\n\t\towningbusinessunit_entitytype as string,\n\t\trts_parentcaseid as string,\n\t\trts_parentcaseid_entitytype as string,\n\t\trts_labid as string,\n\t\trts_labid_entitytype as string,\n\t\trts_testid as string,\n\t\trts_testid_entitytype as string,\n\t\towningteam as string,\n\t\towningteam_entitytype as string,\n\t\trts_emleadid as string,\n\t\trts_emleadid_entitytype as string,\n\t\tmsft_originatingcase as string,\n\t\tmsft_originatingcase_entitytype as string,\n\t\tmodifiedby as string,\n\t\tmodifiedby_entitytype as string,\n\t\tmsft_employeeid as string,\n\t\tmsft_employeeid_entitytype as string,\n\t\trts_facility as string,\n\t\trts_facility_entitytype as string,\n\t\trts_celeadid as string,\n\t\trts_celeadid_entitytype as string,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfby_entitytype as string,\n\t\tcreatedby as string,\n\t\tcreatedby_entitytype as string,\n\t\townerid as string,\n\t\townerid_entitytype as string,\n\t\trts_celeadidname as string,\n\t\tversionnumber as long,\n\t\trts_facilityname as string,\n\t\trts_parentguardianphonenumber as string,\n\t\trts_parentcaseidname as string,\n\t\towningbusinessunitname as string,\n\t\trts_pehlocation as string,\n\t\tutcconversiontimezonecode as long,\n\t\tmsft_checkinavailabledate as timestamp,\n\t\trts_labidname as string,\n\t\trts_symptomonsetdate as timestamp,\n\t\trts_notes as string,\n\t\trts_specifycaseaffiliationtoeducationsetting as string,\n\t\trts_lastdateofexposuretoindexcase as timestamp,\n\t\tmodifiedbyyominame as string,\n\t\tmodifiedon as timestamp,\n\t\trts_attemptstocontacttodate as long,\n\t\towneridyominame as string,\n\t\trts_cohortmembername as string,\n\t\trts_attemptstocontacttoday as long,\n\t\trts_parentguardianzipcode as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\trts_closeddate as timestamp,\n\t\tmsft_processstage as string,\n\t\trts_quarantinestartdate as timestamp,\n\t\towneridtype as string,\n\t\trts_emleadidyominame as string,\n\t\trts_nameofeducationgroup as string,\n\t\tcreatedbyname as string,\n\t\trts_emleadidname as string,\n\t\trts_parentguardianstreetaddress as string,\n\t\trts_covid19testdate as timestamp,\n\t\tcreatedon as timestamp,\n\t\toverriddencreatedon as timestamp,\n\t\trts_testidname as string,\n\t\tcreatedbyyominame as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\trts_age as long,\n\t\trts_vcmrid as string,\n\t\trts_parentguardianfirstname as string,\n\t\tmsft_firsttimeinvestigation as timestamp,\n\t\tmsft_duration as long,\n\t\tcreatedonbehalfbyyominame as string,\n\t\trts_specifyothercontactinvestigationstatus as string,\n\t\tmsft_employeeidyominame as string,\n\t\tmodifiedbyname as string,\n\t\tprocessid as string,\n\t\trts_antigentestname as string,\n\t\trts_isolationstartdate as timestamp,\n\t\tmsft_firsttimeemployeecontacted as timestamp,\n\t\trts_educationgroupotherspleasespecify as string,\n\t\timportsequencenumber as long,\n\t\tmsft_employeeidname as string,\n\t\tmsft_employeecaseid as string,\n\t\tcreatedonbehalfbyname as string,\n\t\trts_lastdateateducationsetting as timestamp,\n\t\trts_parentguardiancity as string,\n\t\tmsft_lastcontactsuggestiondate as timestamp,\n\t\trts_celeadidyominame as string,\n\t\towneridname as string,\n\t\tmsft_originatingcasename as string,\n\t\tmsft_checkinblockednote as string,\n\t\trts_parentguardianlastname as string,\n\t\tstageid as string,\n\t\ttimezoneruleversionnumber as long,\n\t\ttraversedpath as string,\n\t\tmsft_casenumber as string,\n\t\tIsDelete as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tentity: 'msft_employeecase',\n\tformat: 'cdm',\n\tmanifestType: 'model',\n\tfolderPath: '',\n\tfileSystem: 'dataverse-lausdrtsprod-org8533b280',\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','MM/dd/yyyy HH:mm']) ~> oneCases\nsource(output(\n\t\tId as string,\n\t\tSinkCreatedOn as timestamp,\n\t\tSinkModifiedOn as timestamp,\n\t\tstatecode as long,\n\t\tstatuscode as long,\n\t\trts_portalpersontype as long,\n\t\trts_firsttest as long,\n\t\trts_dob_day as long,\n\t\trts_hospitalized as long,\n\t\trts_symptomaticasdefinedbycdc as long,\n\t\trts_externaltolausdtesting as long,\n\t\trts_falsepositve as long,\n\t\trts_icu as long,\n\t\trts_haveyoubeenatlainlast14days as long,\n\t\trts_pregnant as long,\n\t\trts__dob_month as long,\n\t\trts_externaltestreportreviewstatus as long,\n\t\trts_employedinhealthcare as long,\n\t\trts_testtype as long,\n\t\trts_result as long,\n\t\trts_residentinacongregatecaresetting as long,\n\t\trts_exported as boolean,\n\t\trts_smssent as boolean,\n\t\trts_resultviewedonportal as boolean,\n\t\trts_testingprovidedbylausd as boolean,\n\t\trts_emailsent as boolean,\n\t\trts_labid as string,\n\t\trts_labid_entitytype as string,\n\t\towningteam as string,\n\t\towningteam_entitytype as string,\n\t\towningbusinessunit as string,\n\t\towningbusinessunit_entitytype as string,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfby_entitytype as string,\n\t\trts_testlocationid as string,\n\t\trts_testlocationid_entitytype as string,\n\t\trts_defaultfacilityid as string,\n\t\trts_defaultfacilityid_entitytype as string,\n\t\towninguser as string,\n\t\towninguser_entitytype as string,\n\t\trts_contractoruser as string,\n\t\trts_contractoruser_entitytype as string,\n\t\tmodifiedby as string,\n\t\tmodifiedby_entitytype as string,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfby_entitytype as string,\n\t\trts_contactid as string,\n\t\trts_contactid_entitytype as string,\n\t\tcreatedby as string,\n\t\tcreatedby_entitytype as string,\n\t\townerid as string,\n\t\townerid_entitytype as string,\n\t\trts_dob_year as string,\n\t\trts_count as long,\n\t\trts_recordguid as string,\n\t\towningbusinessunitname as string,\n\t\tcreatedbyname as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\trts_contactidyominame as string,\n\t\trts_resultdate as timestamp,\n\t\towneridtype as string,\n\t\tmodifiedon as timestamp,\n\t\trts_confirmdob as timestamp,\n\t\trts_name as string,\n\t\tmodifiedbyname as string,\n\t\trts_testdate as timestamp,\n\t\trts_contractoruseryominame as string,\n\t\trts_addadditionaldetails as string,\n\t\trts_labidname as string,\n\t\trts_portaltestdate as timestamp,\n\t\trts_downloadreport as string,\n\t\trts_studentid as string,\n\t\trts_exportbatch as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\trts_dateofsymptomonset as timestamp,\n\t\trts_defaultfacilityidname as string,\n\t\towneridyominame as string,\n\t\trts_specimencode as string,\n\t\towneridname as string,\n\t\timportsequencenumber as long,\n\t\tmodifiedbyyominame as string,\n\t\trts_contractorusername as string,\n\t\tutcconversiontimezonecode as long,\n\t\trts_testlocationidname as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\trts_postalcode as string,\n\t\tcr7cd_trigger as string,\n\t\trts_portalresultdate as timestamp,\n\t\trts_testid as string,\n\t\trts_manualsmstrigger as string,\n\t\ttimezoneruleversionnumber as long,\n\t\toverriddencreatedon as timestamp,\n\t\trts_whichareasofthesite as string,\n\t\tcreatedbyyominame as string,\n\t\trts_lastdateyouwerethere as timestamp,\n\t\tcreatedon as timestamp,\n\t\tversionnumber as long,\n\t\trts_manualemailtrigger as string,\n\t\trts_resultinterpretation as string,\n\t\trts_studentfirstname as string,\n\t\trts_contactidname as string,\n\t\tcreatedonbehalfbyname as string,\n\t\tIsDelete as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tentity: 'rts_test',\n\tformat: 'cdm',\n\tmanifestType: 'model',\n\tfolderPath: '',\n\tfileSystem: 'dataverse-lausdrtsprod-org8533b280',\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','MM/dd/yyyy HH:mm']) ~> oneTests\nsource(output(\n\t\tId as string,\n\t\tSinkCreatedOn as timestamp,\n\t\tSinkModifiedOn as timestamp,\n\t\tstatecode as long,\n\t\tstatuscode as long,\n\t\trts_agreetodisclaimer as long,\n\t\trts_doyouagreetocommittothesafestbehaviors as long,\n\t\trts_areyoufullyvaccinated as long,\n\t\trts_areyoufeelinganycovid19symptoms as long,\n\t\trts_doyouagreetothestatementsbelowaround as long,\n\t\trts_passissued as long,\n\t\tmsft_attested as long,\n\t\trts_traveledoutsideofcaliforniainthepast10day as long,\n\t\trts_contactwithanyonewithaconfirmedorsuspect as long,\n\t\trts_checkedin as boolean,\n\t\trts_emailsent as boolean,\n\t\towninguser as string,\n\t\towninguser_entitytype as string,\n\t\trts_checkedinlocation as string,\n\t\trts_checkedinlocation_entitytype as string,\n\t\tmsft_employeebookingid as string,\n\t\tmsft_employeebookingid_entitytype as string,\n\t\towningbusinessunit as string,\n\t\towningbusinessunit_entitytype as string,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfby_entitytype as string,\n\t\tmsft_employeecaseid as string,\n\t\tmsft_employeecaseid_entitytype as string,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfby_entitytype as string,\n\t\tmodifiedby as string,\n\t\tmodifiedby_entitytype as string,\n\t\tmsft_facilityid as string,\n\t\tmsft_facilityid_entitytype as string,\n\t\tcreatedby as string,\n\t\tcreatedby_entitytype as string,\n\t\tmsft_employeeid as string,\n\t\tmsft_employeeid_entitytype as string,\n\t\towningteam as string,\n\t\towningteam_entitytype as string,\n\t\townerid as string,\n\t\townerid_entitytype as string,\n\t\trts_addressline1 as string,\n\t\trts_city as string,\n\t\trts_checkedinlocationname as string,\n\t\trts_lastname as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\trts_mobilephone as string,\n\t\trts_attestationdate as timestamp,\n\t\tmodifiedbyyominame as string,\n\t\toverriddencreatedon as timestamp,\n\t\tmsft_name as string,\n\t\tmodifiedon as timestamp,\n\t\tmsft_employeebookingidname as string,\n\t\tmsft_employeeattestationid as string,\n\t\trts_checkedindate as timestamp,\n\t\ttimezoneruleversionnumber as long,\n\t\tmsft_employeeidyominame as string,\n\t\trts_dob as timestamp,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\towningbusinessunitname as string,\n\t\tcreatedbyname as string,\n\t\tmsft_attestationdate as timestamp,\n\t\tversionnumber as long,\n\t\timportsequencenumber as long,\n\t\towneridname as string,\n\t\trts_middlename as string,\n\t\tcreatedon as timestamp,\n\t\tutcconversiontimezonecode as long,\n\t\trts_stateorprovince as string,\n\t\trts_addressline2 as string,\n\t\trts_email as string,\n\t\tmsft_facilityidname as string,\n\t\tcreatedonbehalfbyname as string,\n\t\tmodifiedbyname as string,\n\t\tmsft_employeecaseidname as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\tmsft_employeeidname as string,\n\t\tcreatedbyyominame as string,\n\t\trts_firstname as string,\n\t\trts_postalcode as string,\n\t\towneridtype as string,\n\t\towneridyominame as string,\n\t\tIsDelete as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tentity: 'msft_employeeattestation',\n\tformat: 'cdm',\n\tmanifestType: 'model',\n\tfolderPath: '',\n\tfileSystem: 'dataverse-lausdrtsprod-org8533b280',\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','MM/dd/yyyy HH:mm']) ~> oneSurvey\nsource(output(\n\t\tId as string,\n\t\tSinkCreatedOn as timestamp,\n\t\tSinkModifiedOn as timestamp,\n\t\tstatecode as long,\n\t\tstatuscode as long,\n\t\trts_inclosecontactlast14days as long,\n\t\trts_islausdcommunity as long,\n\t\trts_outsideofsoutherncalifornia10d as long,\n\t\trts_willyouaccompany as long,\n\t\trts_testtype as long,\n\t\trts_ethnicity as long,\n\t\trts_amorpm as long,\n\t\trts_haveyoubeenatanlaunifiedsiteinthelast14 as long,\n\t\trts_consent as long,\n\t\trts_validdob as long,\n\t\trts_gender as long,\n\t\trts_dob_day as long,\n\t\trts_race as long,\n\t\trts_registeringlausdstudent as long,\n\t\trts_employedinhealthcare as long,\n\t\trts_symptomaticasdefinedbycdc as long,\n\t\trts_firsttest as long,\n\t\trts_istesting as long,\n\t\trts_dob_month as long,\n\t\trts_authorize as long,\n\t\trts_applanguage as long,\n\t\trts_positiveinlast14 as long,\n\t\trts_pregnant as long,\n\t\trts_multireg as long,\n\t\trts_doyouauthorizedependent as long,\n\t\trts_istestedpositive as long,\n\t\trts_takenfinaldose as long,\n\t\trts_underquarantineorisolationorder as long,\n\t\trts_primaryphonetype as long,\n\t\trts_residentinacongregatecaresetting as long,\n\t\trts_isphoneappt as boolean,\n\t\trts_textmessages as boolean,\n\t\trts_emailsent as boolean,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfby_entitytype as string,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfby_entitytype as string,\n\t\trts_createdbyid as string,\n\t\trts_createdbyid_entitytype as string,\n\t\trts_testdateid as string,\n\t\trts_testdateid_entitytype as string,\n\t\trts_testtimeid as string,\n\t\trts_testtimeid_entitytype as string,\n\t\trts_parenttestappointmentid as string,\n\t\trts_parenttestappointmentid_entitytype as string,\n\t\tcreatedby as string,\n\t\tcreatedby_entitytype as string,\n\t\tmodifiedby as string,\n\t\tmodifiedby_entitytype as string,\n\t\trts_testlocationid as string,\n\t\trts_testlocationid_entitytype as string,\n\t\torganizationid as string,\n\t\torganizationid_entitytype as string,\n\t\trts_contactid as string,\n\t\trts_contactid_entitytype as string,\n\t\tversionnumber as long,\n\t\tcreatedon as timestamp,\n\t\trts_schooltext as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\trts_testdateidname as string,\n\t\trts_email as string,\n\t\tmodifiedbyyominame as string,\n\t\trts_dateofsymptomonset as timestamp,\n\t\trts_schoolssites as string,\n\t\trts_firstname as string,\n\t\trts_mobilephone as string,\n\t\trts_parenttestappointmentidname as string,\n\t\trts_dob as timestamp,\n\t\toverriddencreatedon as timestamp,\n\t\trts_testappointmentid as string,\n\t\trts_createdbyidyominame as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\trts_responsibleadult as string,\n\t\trts_totalguests as long,\n\t\trts_nameoftheresponsible as string,\n\t\ttimezoneruleversionnumber as long,\n\t\trts_name as string,\n\t\trts_postalcode as string,\n\t\trts_addressline2 as string,\n\t\trts_stateorprovince as string,\n\t\tcreatedonbehalfbyname as string,\n\t\trts_contactidname as string,\n\t\tutcconversiontimezonecode as long,\n\t\trts_testlocationidname as string,\n\t\tmodifiedon as timestamp,\n\t\timportsequencenumber as long,\n\t\trts_lastname as string,\n\t\trts_createdbyidname as string,\n\t\tcreatedbyname as string,\n\t\trts_testdatetime as timestamp,\n\t\tmodifiedonbehalfbyname as string,\n\t\trts_testtimeidname as string,\n\t\trts_city as string,\n\t\trts_addressline1 as string,\n\t\trts_studentcode as string,\n\t\tcreatedbyyominame as string,\n\t\trts_dob_year as string,\n\t\trts_guestlist as string,\n\t\trts_contactidyominame as string,\n\t\trts_primaryphonenumber as string,\n\t\tmodifiedbyname as string,\n\t\torganizationidname as string,\n\t\trts_middlename as string,\n\t\tIsDelete as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tentity: 'rts_testappointment',\n\tformat: 'cdm',\n\tmanifestType: 'model',\n\tfolderPath: '',\n\tfileSystem: 'dataverse-lausdrtsprod-org8533b280',\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','MM/dd/yyyy HH:mm']) ~> oneAppointment\nsource(output(\n\t\tId as string,\n\t\tSinkCreatedOn as timestamp,\n\t\tSinkModifiedOn as timestamp,\n\t\tstatecode as long,\n\t\tstatuscode as long,\n\t\trts_areyoufullyvaccinated as long,\n\t\trts_doyouagreetothestatementsbelowaround as long,\n\t\trts_traveledoutsideofcaliforniainthepast10day as long,\n\t\trts_contactwithanyonewithaconfirmedorsuspect as long,\n\t\trts_doyouagreetocommittothesafestbehaviors as long,\n\t\trts_areyoufeelinganycovid19symptoms as long,\n\t\trts_passissued as long,\n\t\trts_applanguage as long,\n\t\trts_checkedin as boolean,\n\t\tmsft_attested as boolean,\n\t\tcreatedby as string,\n\t\tcreatedby_entitytype as string,\n\t\towningteam as string,\n\t\towningteam_entitytype as string,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfby_entitytype as string,\n\t\tmsft_guestregistrationid as string,\n\t\tmsft_guestregistrationid_entitytype as string,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfby_entitytype as string,\n\t\tmsft_hostid as string,\n\t\tmsft_hostid_entitytype as string,\n\t\trts_checkedinlocation as string,\n\t\trts_checkedinlocation_entitytype as string,\n\t\tmsft_facilityid as string,\n\t\tmsft_facilityid_entitytype as string,\n\t\tmsft_guestid as string,\n\t\tmsft_guestid_entitytype as string,\n\t\towningbusinessunit as string,\n\t\towningbusinessunit_entitytype as string,\n\t\tmodifiedby as string,\n\t\tmodifiedby_entitytype as string,\n\t\towninguser as string,\n\t\towninguser_entitytype as string,\n\t\townerid as string,\n\t\townerid_entitytype as string,\n\t\tcreatedonbehalfbyname as string,\n\t\ttimezoneruleversionnumber as long,\n\t\towneridtype as string,\n\t\tversionnumber as long,\n\t\tmodifiedonbehalfbyname as string,\n\t\tmsft_name as string,\n\t\tmsft_hostname as string,\n\t\tmodifiedbyyominame as string,\n\t\tmsft_guestregistrationidname as string,\n\t\tmsft_facilityidname as string,\n\t\tmsft_attestationdate as timestamp,\n\t\tmsft_hostidyominame as string,\n\t\timportsequencenumber as long,\n\t\tcreatedon as timestamp,\n\t\tmsft_guestidname as string,\n\t\tcreatedbyyominame as string,\n\t\tmsft_guestattestationid as string,\n\t\toverriddencreatedon as timestamp,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\trts_checkedinlocationname as string,\n\t\towneridyominame as string,\n\t\tmsft_guestidyominame as string,\n\t\tcreatedbyname as string,\n\t\tutcconversiontimezonecode as long,\n\t\tmodifiedbyname as string,\n\t\trts_checkedindate as timestamp,\n\t\tmodifiedon as timestamp,\n\t\towningbusinessunitname as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\tmsft_hostidname as string,\n\t\towneridname as string,\n\t\tIsDelete as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tentity: 'msft_guestattestation',\n\tformat: 'cdm',\n\tmanifestType: 'model',\n\tfolderPath: '',\n\tfileSystem: 'dataverse-lausdrtsprod-org8533b280',\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','MM/dd/yyyy HH:mm']) ~> getGuestSurvey\nsource(output(\n\t\tId as string,\n\t\tSinkCreatedOn as timestamp,\n\t\tSinkModifiedOn as timestamp,\n\t\tstatecode as long,\n\t\tstatuscode as long,\n\t\trts_dose2covidvaccinemanufacturer as long,\n\t\trts_portalpersontype as long,\n\t\trts_vaccinationreviewstatus as long,\n\t\trts_dose2covidmanufacturer as long,\n\t\trts_dose2sourcesystem as long,\n\t\trts_dose1sourcesystem as long,\n\t\trts_day as long,\n\t\trts_dose1covidmanufacturer as long,\n\t\trts_month as long,\n\t\trts_externaltolausdvras as boolean,\n\t\towninguser as string,\n\t\towninguser_entitytype as string,\n\t\towningteam as string,\n\t\towningteam_entitytype as string,\n\t\trts_approvedbyid as string,\n\t\trts_approvedbyid_entitytype as string,\n\t\tmodifiedby as string,\n\t\tmodifiedby_entitytype as string,\n\t\trts_person as string,\n\t\trts_person_entitytype as string,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfby_entitytype as string,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfby_entitytype as string,\n\t\towningbusinessunit as string,\n\t\towningbusinessunit_entitytype as string,\n\t\tcreatedby as string,\n\t\tcreatedby_entitytype as string,\n\t\townerid as string,\n\t\townerid_entitytype as string,\n\t\trts_dose2appointmenttime as timestamp,\n\t\trts_dose1vis as string,\n\t\trts_dose2location as string,\n\t\trts_dose2serialnumber as string,\n\t\trts_dose1vaccinetime as timestamp,\n\t\trts_dose1manufacturer as string,\n\t\tcreatedbyname as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\trts_dose2route as string,\n\t\towneridtype as string,\n\t\tmodifiedon as timestamp,\n\t\trts_covidvaccineid as string,\n\t\trts_name as string,\n\t\tmodifiedbyname as string,\n\t\trts_extvaccinerecord as string,\n\t\trts_downloadreport as string,\n\t\trts_dose2administrator as string,\n\t\trts_dose1location as string,\n\t\trts_studentid as string,\n\t\trts_dose2manufacturer as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\towneridyominame as string,\n\t\trts_extvaccinerecord_name as string,\n\t\trts_dose2expirationdate as timestamp,\n\t\towneridname as string,\n\t\timportsequencenumber as long,\n\t\tmodifiedbyyominame as string,\n\t\trts_dose1clinic as string,\n\t\trts_dose2batch as string,\n\t\trts_approvedbyidname as string,\n\t\trts_approvedon as timestamp,\n\t\trts_dose2vaccinetime as timestamp,\n\t\trts_dose2vis as string,\n\t\trts_dose1amount as double,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\trts_dose2gtin as string,\n\t\trts_dose1batch as string,\n\t\trts_dose1route as string,\n\t\trts_dose1appointmenttime as timestamp,\n\t\trts_dose1lotnumber as string,\n\t\ttimezoneruleversionnumber as long,\n\t\trts_studentfisrstname as string,\n\t\trts_dose1expirationdate as timestamp,\n\t\trts_personname as string,\n\t\trts_dose2amount as double,\n\t\toverriddencreatedon as timestamp,\n\t\trts_dose2clinic as string,\n\t\tutcconversiontimezonecode as long,\n\t\towningbusinessunitname as string,\n\t\tcreatedbyyominame as string,\n\t\tcreatedon as timestamp,\n\t\tversionnumber as long,\n\t\trts_dose1gtin as string,\n\t\trts_personyominame as string,\n\t\trts_approvedbyidyominame as string,\n\t\trts_year as string,\n\t\trts_dose2lotnumber as string,\n\t\trts_dose1administrator as string,\n\t\trts_dose1logistician as string,\n\t\trts_dose1serialnumber as string,\n\t\tcreatedonbehalfbyname as string,\n\t\trts_dose2logistician as string,\n\t\tIsDelete as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tentity: 'rts_covidvaccine',\n\tformat: 'cdm',\n\tmanifestType: 'model',\n\tfolderPath: '',\n\tfileSystem: 'dataverse-lausdrtsprod-org8533b280',\n\tdateFormats: ['MM/dd/yyyy','dd/MM/yyyy','yyyy/MM/dd'],\n\ttimestampFormats: ['MM/dd/yyyy HH:mm:ss','MM/dd/yyyy hh:mm:ss a','yyyy-MM-dd','MM-dd-yyyy HH:mm:ss','MM-dd-yyyy hh:mm:ss a','yyyy.MM.dd HH:mm:ss','yyyy.MM.dd hh:mm:ss a','yyyy-MM-dd\\'T\\'HH:mm:ss','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'']) ~> VaccineSource2\nsource(output(\n\t\tId as string,\n\t\tSinkCreatedOn as timestamp,\n\t\tSinkModifiedOn as timestamp,\n\t\tstatecode as long,\n\t\tstatuscode as long,\n\t\trts_assignedlocation as boolean,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfby_entitytype as string,\n\t\towningteam as string,\n\t\towningteam_entitytype as string,\n\t\tmsft_employeecaseid as string,\n\t\tmsft_employeecaseid_entitytype as string,\n\t\towninguser as string,\n\t\towninguser_entitytype as string,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfby_entitytype as string,\n\t\tmsft_facilityid as string,\n\t\tmsft_facilityid_entitytype as string,\n\t\towningbusinessunit as string,\n\t\towningbusinessunit_entitytype as string,\n\t\tmodifiedby as string,\n\t\tmodifiedby_entitytype as string,\n\t\tcreatedby as string,\n\t\tcreatedby_entitytype as string,\n\t\townerid as string,\n\t\townerid_entitytype as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\towneridname as string,\n\t\tmsft_comment as string,\n\t\timportsequencenumber as long,\n\t\tmsft_facilityidname as string,\n\t\tmsft_casefacilityid as string,\n\t\tmsft_employeecaseidname as string,\n\t\tcreatedbyyominame as string,\n\t\tmodifiedbyname as string,\n\t\tversionnumber as long,\n\t\tmodifiedbyyominame as string,\n\t\ttimezoneruleversionnumber as long,\n\t\towneridtype as string,\n\t\towneridyominame as string,\n\t\tmodifiedon as timestamp,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\tcreatedbyname as string,\n\t\tcreatedon as timestamp,\n\t\towningbusinessunitname as string,\n\t\tcreatedonbehalfbyname as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\tmsft_dateto as timestamp,\n\t\tmsft_fatefrom as timestamp,\n\t\tmsft_name as string,\n\t\toverriddencreatedon as timestamp,\n\t\tutcconversiontimezonecode as long,\n\t\tIsDelete as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tentity: 'msft_casefacility',\n\tformat: 'cdm',\n\tmanifestType: 'model',\n\tfolderPath: '',\n\tfileSystem: 'dataverse-lausdrtsprod-org8533b280') ~> OneCaseFacility\nsource(output(\n\t\t{Campus LC} as string,\n\t\t{Campus Name} as string,\n\t\t{Cohort Type} as string,\n\t\t{District ID} as string,\n\t\tFirstName as string,\n\t\tGrade as string,\n\t\t{Group Category} as string,\n\t\t{Group Subcategory} as string,\n\t\tGroupEndDate as string,\n\t\tGroupLeader as string,\n\t\tGroupLeader_ID as string,\n\t\tGroupName as string,\n\t\tGroupStartDate as string,\n\t\t{Instructional Program} as string,\n\t\t{Instructional Program End Date} as string,\n\t\t{Instructional Program Start Date} as string,\n\t\tIsStudentSpecialEd as string,\n\t\tLastName as string,\n\t\tLC as string,\n\t\tLD as string,\n\t\tPrincipalEmail as string,\n\t\tPrincipalName as string,\n\t\t{School Name} as string,\n\t\t{Student Group End Date} as string,\n\t\t{Student Group Start Date} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CohortElementarySchoolData\nsource(output(\n\t\tLOCAL_DISTRICT as string,\n\t\tCOS_NAME as string,\n\t\tCOST_CENTER_CODE as string,\n\t\tLOCATION_CODE as string,\n\t\tLOCATION_NAME as string,\n\t\tSTUDENT_DISTRICT_ID as string,\n\t\tSTD_FIRST_NAME as string,\n\t\tSTD_LAST_NAME as string,\n\t\tGRADE_CODE as string,\n\t\tBIRTHDATE as string,\n\t\tCOURSE_TITLE as string,\n\t\tCOURSE_CATALOG_NUMBER as string,\n\t\tSECTION_NUMBER_CODE as string,\n\t\tCOHORT_SECTION_NUMBER_CODE as string,\n\t\tCLASS_PERIOD_CODE as string,\n\t\tTEACHER_ID as string,\n\t\tTCH_LAST_NAME as string,\n\t\tTCH_FIRST_NAME as string,\n\t\tCLASS_ROOM_CODE as string,\n\t\tMISIS_CLASS_BEGIN_DATE as string,\n\t\tMISIS_CLASS_END_DATE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CohortSecondarySchoolData\nsource(output(\n\t\tDISTRICT_STUDENT_ID as string,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tMIDDLE_NAME as string,\n\t\tADDRESS_LINE_TXT as string,\n\t\tHOME_PHONE_NUMBER as long,\n\t\tBIRTHDATE as string,\n\t\tETHNICITY_DESCR as string,\n\t\tRACE_DESCR as string,\n\t\tGENDER_CODE as string,\n\t\tZIP_CODE as string,\n\t\tCITY_NAME as string,\n\t\tMODIFIED_DATE as string,\n\t\tEMAILID as string,\n\t\tCOST_CENTER_CODE as integer,\n\t\tSEXUAL_ORIENT as string,\n\t\tEMERGENCY_PHONE as long,\n\t\tGRADE_CODE as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Grades\nFilter3 select(mapColumn(\n\t\t{Facility Dynamics ID} = msft_facilityid,\n\t\t{Facility State Code} = statecode,\n\t\t{Facility Number} = msft_facilitynumber,\n\t\t{Facility Latitude} = msft_addresslatitude,\n\t\t{Facility Longitude} = msft_addresslongitude,\n\t\t{Facility Number} = msft_facilitynumber,\n\t\t{Facility Name} = msft_name,\n\t\t{Facility Campus Name} = rts_campusname,\n\t\t{Facility Campus Code} = rts_campuscode,\n\t\trts_ld,\n\t\trts_physicalcos\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> twoFacility\ntwoFacility derive({Facility Location Number} = substring({Facility Number}, 2, 4)) ~> threeFacility\nFilter6 select(mapColumn(\n\t\t{Test Number} = rts_name,\n\t\t{Test Result} = rts_result,\n\t\t{Test Created On} = createdon,\n\t\t{Test Person Dynamics ID} = rts_contactid,\n\t\t{Test Type} = rts_testtype,\n\t\t{Testing Provided By LAUSD} = rts_testingprovidedbylausd,\n\t\tExternalTestReportReviewStatus = rts_externaltestreportreviewstatus,\n\t\t{External Test Date} = rts_testdate,\n\t\tstatuscode,\n\t\t{Test Result Date} = rts_resultdate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> twoTests\nFilter2 select(mapColumn(\n\t\t{Survey Person ID} = msft_employeeid,\n\t\t{Survey Pass Issued} = rts_passissued,\n\t\t{Survey Created On} = createdon,\n\t\t{Survey Checked In} = rts_checkedin,\n\t\t{Survey Checked In Date} = rts_checkedindate,\n\t\t{Survey Location} = msft_facilityid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> twoSurvey\nFilterNulls select(mapColumn(\n\t\t{Appointment Person ID} = rts_contactid,\n\t\t{Appointment Number} = rts_name,\n\t\t{Appointment Datetime} = rts_testdatetime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> twoAppointment\nTestDateToPST derive({Test Created On External} = case(    !isNull({External Test Date}), toDate({External Test Date}), toDate({Test Created On}))) ~> TestCreatedOn\nFilter1MonthsDataOneSurve derive({Survey Pass Issued} = toBoolean(case(    {Survey Pass Issued}==180360000, \"yes\",    {Survey Pass Issued}==180360001, \"no\"    )),\n\t\t{Survey Created On} = fromUTC({Survey Created On},'PST')) ~> threeSurvey\ntwoAppointment derive({Appointment Date} = toDate(fromUTC({Appointment Datetime},'PST')),\n\t\t{Appointment Time} = toTimestamp(split(toString({Appointment Datetime}), ' ')[2], 'HH\"mm a', 'PST'),\n\t\tCurrent_Date = toDate(fromUTC(currentTimestamp(),'PST'))) ~> threeAppointment\nFilterInactivePersonAndNullCostCenterMapping derive({Person Type} = case(\n    {Person Type} == 180360000, \"Employee\",\n    {Person Type} == 180360001, \"Book Online - Dependent\",\n    {Person Type} == 180360002, \"Daily Pass - Guest\",\n    {Person Type} == 180360003, \"Test Reg\",\n    {Person Type} == 180360004, \"Test Reg - Minor\",\n    {Person Type} == 180360005, \"Book Online - Guest\",\n    {Person Type} == 180360006, \"Book Online - Guest Dependent\",\n    {Person Type} == 180360007, \"Student\",\n    {Person Type} == 180360008, \"Parent Portal\"\n),\n\t\t{Person Employee ID} = case(isNull({Person Employee ID}), {Person Student ID}, {Person Employee ID}),\n\t\t{Person Cost Center Code} = iifNull({Person Cost Center Code}, \"Invalid\",{Person Cost Center Code}),\n\t\t{Covid Testing for In Person Learning} = case(toString({Covid Test Without Parent}) == \"180360000\",     \"Yes\",toString({Covid Test Without Parent}) == \"180360001\",     \"No\",\"Missing\"),\n\t\tConsent = case(    Consent == 180360000,    \"Yes\",    Consent == 180360001,    \"No\"),\n\t\tAuthorize = case(   Authorize == 180360000,    \"Yes\",    Authorize == 180360001,    \"No\"),\n\t\t{Daily Pass For Dependents Under 13} = case(    {Daily Pass For Dependents Under 13} == 180360000,    \"Yes\",    {Daily Pass For Dependents Under 13} == 180360001,    \"No\",    {Daily Pass For Dependents Under 13} == 180360002,    \"N/A\"),\n\t\t{Unaccompanied Minor} = case(    {Unaccompanied Minor} == 180360000,    \"Yes\",    {Unaccompanied Minor} == 180360001,    \"No\",    {Unaccompanied Minor} == 180360002,    \"N/A\")) ~> DecodeValues\nFilte1MonthsDataGuestSurvey select(mapColumn(\n\t\t{Survey Checked In} = rts_checkedin,\n\t\t{Survey Person ID} = msft_guestid,\n\t\t{Survey Pass Issued} = msft_attested,\n\t\t{Survey Location} = msft_facilityid,\n\t\t{Survey Created On} = createdon\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> twoGuestSurvey\nDailyPass derive({Survey Pass Issued} = case({Survey Pass Issued},\"Yes\",\"No\"),\n\t\t{Survey Checked In} = case({Survey Checked In},\"Yes\",\"No\"),\n\t\tdatediff = minus(currentDate(),toDate(toString({Survey Created On},'yyyy-MM-dd'),'yyyy-MM-dd'))) ~> DerivedColumn2\nUnion3 derive({Case Status} = case(   {Case Status Code}==1, \"Open\",     \r\n        {Case Status Code}==2, \"Case Closed\",      /* Cleared to Return */\r\n        {Case Status Code}==180360001, \"Case Closed\", /* Do Not Use NMC */\r\n        {Case Status Code}==180360002, \"Case Closed\", /* Cleared to Return NN */\r\n        {Case Status Code}==180360003, \"Obsolete\", /* Case Closed - False Positive. Decided to be considered same as Obsolete for now */\r\n        {Case Status Code}==180360000, \"Obsolete\",    \r\n        isNull({Case Status Code}), \"Closed\"    ),\n\t\t{Case Type} = case(    {Case Type}==180360000, \"Positive Test\",     {Case Type}==180360001, \"Close Contact\",     {Case Type}==180360002, \"Daily Pass\" ,   {Case Type}==180360003, \"Suspected\" ),\n\t\t{Case Age} = minus(currentDate(),toDate(toString({Case Created On},'yyyy-MM-dd'),'yyyy-MM-dd'))) ~> threeCase\nTestCreatedOn derive(NoOfDaysSinceLastTest = minus(currentDate(),toDate(toString({Test Created On External},'yyyy-MM-dd'),'yyyy-MM-dd'))) ~> NoOfDaysSinceLastTest\nLast111DaysOfData derive({Test Result} = case(    {Test Result}==180360000, \"Positive\",     {Test Result}==180360001, \"Negative\",     {Test Result}==180360002, \"Inconclusive\",     {Test Result}==180360003, \"Invalid\",    isNull({Test Result}), \"Pending\"    ),\n\t\tExternalTestReportReviewStatus = case( ExternalTestReportReviewStatus==180360000, \"New\",     ExternalTestReportReviewStatus==180360001, \"Approved\", ExternalTestReportReviewStatus==180360002, \"Declined\")) ~> threetest\nthreetest select(mapColumn(\n\t\t{Test Number},\n\t\t{Test Result},\n\t\t{Test Created On},\n\t\t{Test Person Dynamics ID},\n\t\t{Test Type},\n\t\tNoOfDaysSinceLastTest,\n\t\tExternalTestReportReviewStatus,\n\t\t{Testing Provided By LAUSD},\n\t\tstatuscode,\n\t\t{Test Result Date}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\ntwoTests derive({Test Created On} = fromUTC({Test Created On},'PST'),\n\t\t{Test Result Date} = fromUTC({Test Result Date},'PST')) ~> TestDateToPST\nFilter10 select(mapColumn(\n\t\trts_dose1covidmanufacturer,\n\t\trts_dose1vaccinetime,\n\t\trts_dose2vaccinetime,\n\t\trts_person,\n\t\trts_vaccinationreviewstatus,\n\t\tStatus = statecode,\n\t\trts_externaltolausdvras,\n\t\tcreatedon\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectVaccineColumns\nFilter5 select(mapColumn(\n\t\t{Case Number} = msft_casenumber,\n\t\t{Case Created On} = createdon,\n\t\t{Case Status Code} = statuscode,\n\t\t{Case Type} = rts_casetype,\n\t\t{Case Quarantine Start Date} = rts_quarantinestartdate,\n\t\t{Case Isolation Start Date} = rts_isolationstartdate,\n\t\t{Case Anticipated End Date} = msft_checkinavailabledate,\n\t\t{Case Person Dynamics ID} = msft_employeeid,\n\t\t{Case Check In Available} = msft_ischeckinavailable,\n\t\tEmployeecaseID = Id,\n\t\t{Case State Code} = statecode,\n\t\tmsft_employeecaseid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> twoCases\ntwoCases derive({Case Created On} = fromUTC({Case Created On},'PST')) ~> DateToPST\nFilter11 select(mapColumn(\n\t\tEmployeeCaseID = msft_employeecaseid,\n\t\tFacilityID = msft_facilityid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nCohortElementarySchoolData select(mapColumn(\n\t\t{Campus Name},\n\t\t{Student District ID} = {District ID},\n\t\t{First Name} = FirstName,\n\t\t{Last Name} = LastName,\n\t\tGrade,\n\t\t{Group Category},\n\t\t{Group Subcategory},\n\t\t{Student Group Start Date},\n\t\t{Student Group End Date}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ElementaryColumns\nCohortSecondarySchoolData select(mapColumn(\n\t\t{Campus Name} = LOCATION_NAME,\n\t\t{Student District ID} = STUDENT_DISTRICT_ID,\n\t\t{First Name} = STD_FIRST_NAME,\n\t\t{Last Name} = STD_LAST_NAME,\n\t\tGrade = GRADE_CODE,\n\t\t{Group Category} = COURSE_TITLE,\n\t\t{Group Subcategory} = CLASS_PERIOD_CODE,\n\t\t{Student Group Start Date} = MISIS_CLASS_BEGIN_DATE,\n\t\t{Student Group End Date} = MISIS_CLASS_END_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SecondaryColumns\nElementaryColumns, SecondaryColumns union(byName: true)~> CohortUnion\nCohortUnion derive({Instructional Model } = iif(instr({Group Subcategory},\"In-Person\")!=0, \n     \"hybrid\", \n     iif(or({Group Subcategory}==\"D\",{Group Subcategory}==\"G\"),\n      \"hybrid\",\n      \"online\"\n        )\n    )) ~> InstructionalModel\nInstructionalModel derive({On-Site Childcare} = iif(instr({Group Subcategory},\"Childcare\")!=0, \n     \"Yes\", \n     \"No\"\n    )) ~> OnSiteChildcare\nOnSiteChildcare derive(Transportation = iif(instr({Group Subcategory},\"Transportation\")!=0, \n     \"Yes\", \n     \"No\"\n    )) ~> Transportation\nTransportation derive({Athletics/Auxiliary} = iif(or(instr({Group Category},\"Athletics\")!=0,instr({Group Category},\"Auxiliary\")!=0), \n     \"Yes\",    \n     \"No\"     \n    )) ~> Athletics\nAthletics select(mapColumn(\n\t\t{Student District ID},\n\t\tGrade,\n\t\t{Instructional Model },\n\t\t{On-Site Childcare},\n\t\tTransportation,\n\t\t{Athletics/Auxiliary}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCohortColumns\nAccessDuration select(mapColumn(\n\t\t{Case Number},\n\t\t{Case Created On},\n\t\t{Case Status Code},\n\t\t{Case Type},\n\t\t{Case Quarantine Start Date},\n\t\t{Case Isolation Start Date},\n\t\t{Case Anticipated End Date},\n\t\t{Case Person Dynamics ID},\n\t\t{Case Check In Available},\n\t\tEmployeecaseID,\n\t\t{Case State Code},\n\t\tmsft_employeecaseid,\n\t\t{Case Status},\n\t\t{Case Age},\n\t\tAccessDuration\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select7\nAgeForOnlyStudent select(mapColumn(\n\t\t{Person Dynamics ID},\n\t\t{Person Employee ID},\n\t\t{Person Position},\n\t\t{Person Student ID},\n\t\t{Person Full Name},\n\t\t{Person First Name},\n\t\t{Person Last Name},\n\t\t{Person Type},\n\t\t{Person Cost Center Code},\n\t\t{Covid Test Without Parent},\n\t\t{Person Status},\n\t\t{Daily Pass For Dependents Under 13},\n\t\tConsent,\n\t\tAuthorize,\n\t\t{Unaccompanied Minor},\n\t\t{Covid Testing for In Person Learning},\n\t\tAccess,\n\t\t{DACE Cost Center Code},\n\t\trts_race,\n\t\trts_ethnicity,\n\t\tmsft_contacttype,\n\t\tVaccine_Status,\n\t\t{Conditionally Approved},\n\t\tAge,\n\t\t{DOB MMYYYY},\n\t\tmodifiedon\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select8\nDateToPST derive({Case Created On} = toDate({Case Created On}),\n\t\tCurrent_Date = toDate(fromUTC(currentTimestamp(),'PST'))) ~> DerivedColumn6\nthreeFacility filter(not(isNull({Facility Location Number}))) ~> filterOutBlankLocationNumbers\nAgrCreatedOn derive(Vaccine_Status = iif\n\t(\n\t\tand(and(isNull(rts_dose1vaccinetime)==false(),rts_dose1covidmanufacturer==180360002),rts_vaccinationreviewstatus==180360002) || and(and(isNull(rts_dose1vaccinetime)==false(),isNull(rts_dose2vaccinetime)==false()),rts_vaccinationreviewstatus==180360002)\n\t\t,\"Fully Vaccinated\"\n\t\t,iif\n\t\t\t(\n\t\t\tand(and(isNull(rts_dose1vaccinetime)==false(),rts_dose1covidmanufacturer==180360002),rts_vaccinationreviewstatus==180360001) || and(and(isNull(rts_dose1vaccinetime)==false(),isNull(rts_dose2vaccinetime)==false()),rts_vaccinationreviewstatus==180360001)\n\t\t\t,\"Pending Review\"\n\t\t\t,iif(\n\t\t\t\t\tand(and(isNull(rts_dose1vaccinetime)==false(),rts_dose1covidmanufacturer==180360002),or(rts_vaccinationreviewstatus==180360000,rts_vaccinationreviewstatus==180360003)) || and(and(isNull(rts_dose1vaccinetime)==false(),isNull(rts_dose2vaccinetime)==false()),or(rts_vaccinationreviewstatus==180360000,rts_vaccinationreviewstatus==180360003))\n\t\t\t\t\t,\"Under Review\"\n\t\t\t\t\t,iif(\n\t\t\t\t\t\t\tand(isNull(rts_dose1vaccinetime)==false(),isNull(rts_dose2vaccinetime)==true())\n\t\t\t\t\t\t\t,\"Partially Vaccinated\"\n\t\t\t\t\t\t\t,iif\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tand(isNull(rts_dose1vaccinetime)==true(),isNull(rts_dose2vaccinetime)==true())\n\t\t\t\t\t\t\t\t,\"Not Vaccinated\"\n\t\t\t\t\t\t\t\t,\"Not Reported\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t)) ~> DerivedColumn8\nthreeSurvey, GuestPassIssuedCheckExceptions union(byName: true)~> DailyPass\ntwoContact filter({Person Status} == 1 && !isNull({Person Cost Center Code})) ~> FilterInactivePersonAndNullCostCenterMapping\nthreetest filter(statuscode==1) ~> ActiveTests\nActiveTests filter(ExternalTestReportReviewStatus!=\"New\" || isNull(ExternalTestReportReviewStatus)) ~> FilterNewExternalTestReviewStatus\nFilterNewExternalTestReviewStatus filter(or(ExternalTestReportReviewStatus!=\"Declined\",isNull(ExternalTestReportReviewStatus))) ~> FilterDeclinedExternalReviewStatus\nFilterDeclinedExternalReviewStatus filter({Test Result} != \"Pending\") ~> FilterPendingResultsaAndCaseClosed\nDerivedColumn10, FilterPendingResultsaAndCaseClosed join({Person Dynamics ID} == {Test Person Dynamics ID},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> oneAccess\noneAccess sort(desc({Test Created On External}, false)) ~> twoAccess\ntwoAccess aggregate(groupBy({Person Dynamics ID}),\n\teach(match(name!=\"Person Dynamics ID\"), $$ = first($$))) ~> threeAccess\nthreeAccess, AggDailyPassRecord join({Person Dynamics ID} == {Survey Person ID},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDailyPass\nJoinDailyPass sort(desc({Test Created On}, false)) ~> fiveAccess\nfiveAccess aggregate(groupBy({Person Dynamics ID}),\n\teach(match(name!=\"Person Dynamics ID\"), $$ = first($$))) ~> sixAccess\nsixAccess, Select14 join({Person Dynamics ID} == {Case Person Dynamics ID},\n\tjoinType:'left',\n\tbroadcast: 'auto')~> AccessJoinCase\nAccessJoinCase derive(Access = iif({Survey Pass Issued}==toBoolean('no') && toDate({Survey Created On}) == currentDate('PST') ,\r\n\"Disallowed\",\r\n\tiif({Case Type}=='Positive Test' && {Case Status}=='Open',\r\n\t\"Disallowed\",\r\n\t\tiif(and(Vaccine_Status != 'Fully Vaccinated', Vaccine_Status != 'Pending Review') && {Person Type} == 'Employee', /* Nov 15 fix to not allow any employeed who is not Full Vaccinated/Vax Submitted(Pendng Review). Here Vaccination consolidated status is not used, rather Vaccine_Status is used */\r\n\t\t\"Disallowed\",\r\n\t\t\tiif(Vaccine_Status_Con != 'Vaccinated' && {Person Type} != 'Employee' && {Case Status}=='Open',\r\n\t\t\t\"Disallowed\",\r\n\t\t\t\tiif(Vaccine_Status_Con == 'Vaccinated' && {Case Type}!='Positive Test' && {Case Status}=='Open',\r\n    \t\t\t\"Allowed\",\r\n\t\t\t\t\tiif(({Case Age} <=104) &&  ({Case Type}=='Positive Test') &&(isNull(AccessDuration)==toBoolean('false')) && ({Case Status}!='Open'),\r\n\t\t\t\t\t\"Allowed\",\r\n\t\t\t\t\t\tiif((NoOfDaysSinceLastTest > 26 && or({Testing Provided By LAUSD} == toBoolean('yes'), ExternalTestReportReviewStatus == 'Approved')),\r\n\t\t\t\t\t\t\"Disallowed\",\r\n\t\t\t\t\t\t\tiif(and(NoOfDaysSinceLastTest <= 26,or({Test Result}=='Inconclusive',or({Test Result}=='Negative',{Test Result}=='Invalid'))) && or({Testing Provided By LAUSD} == toBoolean('yes'), ExternalTestReportReviewStatus == 'Approved'),\r\n\t\t\t\t\t\t\t\"Allowed\",\r\n\t\t\t\t\t\t\t\"Disallowed\"\r\n\t\t\t\t\t\t\t)\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t    )\r\n        )   \r\n    )\r\n),\n\t\t{Person Cost Center Code} = iifNull({Person Cost Center Code}, \"Invalid\",{Person Cost Center Code})) ~> sevenAccess\nsevenAccess sort(desc({Test Created On}, false)) ~> OrderByLatest\nOrderByLatest aggregate(groupBy({Person Dynamics ID}),\n\teach(match(name!=\"Person Dynamics ID\"), $$ = first($$))) ~> AggById\nsortbycasecreated derive(AccessDuration = iif(   \n     {Case Age}<=104 && {Case Type} =='Positive Test',\n         (add(({Case Created On}),104)),\n             toDate('00-00-0000', 'dd-mm-yyyy')\n             )) ~> AccessDuration\nFilter8 filter(not(isNull(rts_contactid))) ~> FilterNulls\nSelect7 derive({Case Anticipated End Date} = toDate(fromUTC({Case Anticipated End Date},'PST')) + 1) ~> DerivedColumn9\nDervieConsolidatedVaccineStatus derive({Covid Testing for In Person Learning} = iif(({Person Type} =='Employee' && {Covid Testing for In Person Learning}=='Missing'),'N/A',{Covid Testing for In Person Learning})) ~> DerivedColumn10\nFilter9 filter(statecode==0) ~> Filter1\nFilter7 filter(statecode==0) ~> Filter2\nDerivedColumn8 derive(Last_Vaccination_Date = iif\n\t(\n\t\tor(Vaccine_Status=='Partially Vaccinated',rts_dose1covidmanufacturer ==180360002)\n\t\t,rts_dose1vaccinetime\n\t\t,iif(\n\t\t\t\tor(or(Vaccine_Status=='Fully Vaccinated',Vaccine_Status=='Pending Review'),Vaccine_Status=='Under Review')\n\t\t\t\t,rts_dose2vaccinetime\n\t\t\t\t,toTimestamp('0000-00-00 00:00:00', 'yyyy-MM-dd HH:mm:ss', 'UTC')\n\t\t\t)\t\n\t)) ~> DeriveVaccinationDate\nSelectVaccineColumns filter(and(Status==0,isNull(rts_dose1vaccinetime)==false())) ~> FilteroutInactive\nDerivedColumn6 filter(({Case Created On}>=toDate('2021-07-19'))) ~> filternewschool\nDerivedColumn6 filter(and(between(Current_Date, toDate('2021-07-19'), toDate('2021-10-17')),minus(Current_Date, {Case Created On})<=111)) ~> NinetyDaysFromToday\nthreeAppointment filter(({Appointment Date}>=toDate('2021-07-19'))) ~> filternewschoolyear\nthreeAppointment filter(and(between(Current_Date, toDate('2021-07-19'), toDate('2021-10-17')),minus(Current_Date, {Appointment Date})<=90)) ~> NinetyDaysfromTodayDate\nNinetyDaysfromTodayDate, filternewschoolyear union(byName: true)~> Union2\nfilternewschool, NinetyDaysFromToday union(byName: true)~> Union3\nGrades select(mapColumn(\n\t\tDISTRICT_STUDENT_ID,\n\t\tGRADE_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectGrades\nfilterObsoleteCaseType sort(asc({Case Person Dynamics ID}, false),\n\tdesc({Case Created On}, false)) ~> sortbycasecreated\nthreeCase filter(!isNull({Case Type})) ~> flternullcases\nflternullcases filter({Case Status}!='Obsolete') ~> filterObsoleteCaseType\nDeriveVaccinationDate select(mapColumn(\n\t\trts_person,\n\t\tVaccine_Status,\n\t\tLast_Vaccination_Date\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select13\nSort1 aggregate(groupBy(rts_person),\n\teach(match(name!='rts_person'), $$ = first($$))) ~> AgrCreatedOn\nFilteroutInactive sort(asc(rts_person, true),\n\tdesc(createdon, true)) ~> Sort1\nSelectCohortColumns sort(asc({Student District ID}, true),\n\tdesc({Athletics/Auxiliary}, true)) ~> SortForRemoveDuplicates\nSortForRemoveDuplicates aggregate(groupBy({Student District ID}),\n\teach(match(name!='Student District ID'), $$ = first($$))) ~> RemoveDuplicates\nAccessDuration filter(!isNull(AccessDuration)) ~> FilterNotNullAccessDuration\nsortbycasecreated filter({Case Status}=='Open') ~> filteropencases\nfilteropencases aggregate(groupBy({Case Person Dynamics ID}),\n\teach(match(name!=\"Case Person Dynamics ID\"), $$ = first($$))) ~> GroupLatestOpenCases\nGroupLatestOpenCases derive(AccessDuration = toDate('01-01-1111', 'dd-mm-yyyy')) ~> AddAccessDuration\nOrderingColumns, FilterNotNullAccessDuration union(byName: true)~> UnionOpenCasesAndAccessDuration\nAddAccessDuration select(mapColumn(\n\t\t{Case Number},\n\t\t{Case Created On},\n\t\t{Case Status Code},\n\t\t{Case Type},\n\t\t{Case Quarantine Start Date},\n\t\t{Case Isolation Start Date},\n\t\t{Case Anticipated End Date},\n\t\t{Case Person Dynamics ID},\n\t\t{Case Check In Available},\n\t\tEmployeecaseID,\n\t\t{Case State Code},\n\t\tmsft_employeecaseid,\n\t\tCurrent_Date,\n\t\t{Case Status},\n\t\t{Case Age},\n\t\tAccessDuration\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OrderingColumns\nUnionOpenCasesAndAccessDuration select(mapColumn(\n\t\t{Case Number},\n\t\t{Case Created On},\n\t\t{Case Status Code},\n\t\t{Case Type},\n\t\t{Case Quarantine Start Date},\n\t\t{Case Isolation Start Date},\n\t\t{Case Anticipated End Date},\n\t\t{Case Person Dynamics ID},\n\t\t{Case Check In Available},\n\t\tEmployeecaseID,\n\t\t{Case State Code},\n\t\tmsft_employeecaseid,\n\t\t{Case Status},\n\t\t{Case Age},\n\t\tAccessDuration\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select14\nDailyPass sort(asc({Survey Person ID}, false),\n\tdesc({Survey Created On}, false)) ~> DailyPassSorted\nDailyPassSorted aggregate(groupBy({Survey Person ID}),\n\teach(match(name!='Survey Person ID'), $$ = first($$))) ~> AggDailyPassRecord\nDecodeValues derive(Vaccine_Status = case(\r\n    isNull({Vaccine Status}), \"Unvaccinated\", /*If RTS has NULL value, setting it as Not Reported. It is same as Unvaccinated*/\r\n    {Vaccine Status} == 180360003, \"Unvaccinated\",/*Coming as Unvaccinated from RTS*/\r\n    {Vaccine Status} == 180360002, \"Fully Vaccinated\", /*Coming as Vaccinated from RTS*/\r\n    {Vaccine Status} == 180360000, \"Under Review\", /*Coming as Vax Under Review from RTS*/\r\n    {Vaccine Status} == 180360001, \"Pending Review\", /*Coming as Vax Submitted from RTS*/\r\n    {Vaccine Status} == 180360004, \"Partially Vaccinated\",\r\n    {Vaccine Status} == 180360005, \"Exempt\",\r\n    {Vaccine Status} == 180360006, \"Exemption Submitted\",\r\n    {Vaccine Status} == 180360007, \"Exemption Under Review\",\r\n    {Vaccine Status} == 180360008, \"Unvaccinated\", /*Coming as Unvaccinated-Exemption Expired from RTS*/  \r\n    {Vaccine Status} == 180360009, \"Unvaccinated\" /*Coming as Unvaccinated-Exemption Declined from RTS*/  \r\n)) ~> DeriveVaccineStatus\nFilter4 select(mapColumn(\n\t\t{Person Employee ID} = employeeid,\n\t\t{Person Position} = jobtitle,\n\t\t{Person Student ID} = rts_studentcode,\n\t\t{Person Full Name} = fullname,\n\t\t{Person First Name} = firstname,\n\t\t{Person Last Name} = lastname,\n\t\t{Person Type} = rts_persontype,\n\t\t{Person Cost Center Code} = rts_costcentercode,\n\t\t{Person Dynamics ID} = contactid,\n\t\t{Covid Test Without Parent} = rts_covidtestwithoutparent,\n\t\t{Person Status} = statuscode,\n\t\t{Daily Pass For Dependents Under 13} = rts_dailypassfordependentsunder13yearsold,\n\t\tConsent = rts_consent,\n\t\tAuthorize = rts_authorize,\n\t\t{Unaccompanied Minor} = rts_unaccompaniedminor,\n\t\t{DACE Cost Center Code} = rts_dacecostcenter,\n\t\trts_race,\n\t\trts_ethnicity,\n\t\tmsft_contacttype,\n\t\t{Vaccine Status} = rts_vaccinationstatus,\n\t\t{Conditionally Approved} = rts_conditionallyapproved,\n\t\t{Birth Date} = birthdate,\n\t\tmodifiedon\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> twoContact\nDeriveVaccineStatus derive(Vaccine_Status_Con = iif((Vaccine_Status=='Fully Vaccinated' || Vaccine_Status=='Under Review' || Vaccine_Status=='Pending Review' || Vaccine_Status=='Partially Vaccinated' ||\r\nVaccine_Status=='Exempt' || Vaccine_Status=='Exemption Submitted' || Vaccine_Status=='Exemption Under Review'), 'Vaccinated','Unvaccinated')) ~> DervieConsolidatedVaccineStatus\ntwoSurvey derive(datediff = minus(currentDate(),toDate(toString(fromUTC({Survey Created On},'PST'),'yyyy-MM-dd'),'yyyy-MM-dd'))) ~> DeriveDateDiffAdd\nDeriveDateDiffAdd filter(datediff <=30) ~> Filter1MonthsDataOneSurve\nFilter1 derive(datediff = minus(currentDate(),toDate(toString(fromUTC(createdon,'PST'),'yyyy-MM-dd'),'yyyy-MM-dd'))) ~> DerivedDateDiffNew\nDerivedDateDiffNew filter(datediff <=30) ~> Filte1MonthsDataGuestSurvey\nNoOfDaysSinceLastTest filter(NoOfDaysSinceLastTest<=111) ~> Last111DaysOfData\ntwoGuestSurvey derive({Survey Pass Issued} = iif({Survey Pass Issued}==toBoolean('no') && {Survey Checked In}==toBoolean('yes') , {Survey Checked In}, {Survey Pass Issued}),\n\t\t{Survey Created On} = fromUTC({Survey Created On},'PST')) ~> GuestPassIssuedCheckExceptions\nAggById derive({Conditionally Approved} = iif({Person Type}=='Employee', \"N/A\",\r\n    iif({Conditionally Approved}==toBoolean('yes'),\"Yes\", \"No\"\r\n    )\r\n)) ~> ConditionallyApprovedUpdate\nDateOfBirth derive(Age = toString(toInteger(divide(minus(currentDate(),toDate(toString({Birth Date},'yyyy-MM-dd'),'yyyy-MM-dd')),365)))) ~> AgeCalculate\nConditionallyApprovedUpdate derive({DOB MMYYYY} = toString(month({Birth Date})) + \"/\" + toString(year({Birth Date})),\n\t\t{DOB Month} = month({Birth Date})) ~> DateOfBirth\nAgeCalculate derive(Age = iif((Age=='11' && {DOB Month} == 1) , concat(Age,\" (Jan)\"),\r\n    iif((Age=='11' && {DOB Month} == 2) , concat(Age,\" (Feb)\"), \r\n        iif((Age=='11' && {DOB Month} == 3) , concat(Age,\" (Mar)\"),\r\n            iif((Age=='11' && {DOB Month} == 4) , concat(Age,\" (Apr)\"),\r\n                iif((Age=='11' && {DOB Month} == 5) , concat(Age,\" (May)\"),\r\n                    iif((Age=='11' && {DOB Month} == 6) , concat(Age,\" (Jun)\"),Age\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n        )\r\n    )) ~> AgeTurning12\nAgeTurning12 derive(Age = iif({Person Type} == \"Student\", Age, \"\"),\n\t\t{DOB MMYYYY} = iif({Person Type} == \"Student\", {DOB MMYYYY}, \"\")) ~> AgeForOnlyStudent\noneFacility window(over(Id),\n\tdesc(modifiedon, false),\n\trownumber = rowNumber()) ~> Window1\nWindow1 filter(rownumber==1 && isNull(IsDelete)) ~> Filter3\noneContact window(over(Id),\n\tdesc(modifiedon, false),\n\trownumber = rowNumber()) ~> Window2\nWindow2 filter(rownumber==1 && isNull(IsDelete)) ~> Filter4\noneCases window(over(Id),\n\tdesc(modifiedon, false),\n\trownumber = rowNumber()) ~> Window3\nWindow3 filter(rownumber==1 && isNull(IsDelete)) ~> Filter5\noneTests window(over(Id),\n\tdesc(modifiedon, false),\n\trownumber = rowNumber()) ~> Window4\nWindow4 filter(rownumber==1 && isNull(IsDelete)) ~> Filter6\noneSurvey window(over(Id),\n\tdesc(modifiedon, false),\n\trownumber = rowNumber()) ~> Window5\nWindow5 filter(rownumber==1 && isNull(IsDelete)) ~> Filter7\noneAppointment window(over(Id),\n\tdesc(modifiedon, false),\n\trownumber = rowNumber()) ~> Window6\nWindow6 filter(rownumber==1 && isNull(IsDelete)) ~> Filter8\ngetGuestSurvey window(over(Id),\n\tdesc(modifiedon, false),\n\trownumber = rowNumber()) ~> Window7\nWindow7 filter(rownumber==1 && isNull(IsDelete)) ~> Filter9\nVaccineSource2 window(over(Id),\n\tdesc(modifiedon, false),\n\trownumber = rowNumber()) ~> Window8\nWindow8 filter(rownumber==1 && isNull(IsDelete)) ~> Filter10\nOneCaseFacility window(over(Id),\n\tdesc(modifiedon, false),\n\trownumber = rowNumber()) ~> Window9\nWindow9 filter(rownumber==1 && isNull(IsDelete)) ~> Filter11\nSelectColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\t{Test Number},\n\t\t{Test Result},\n\t\t{Test Created On},\n\t\t{Test Person Dynamics ID},\n\t\t{Test Type},\n\t\tstatuscode,\n\t\tExternalTestReportReviewStatus,\n\t\t{Testing Provided By LAUSD},\n\t\tNoOfDaysSinceLastTest,\n\t\t{Test Result Date}\n\t)) ~> sinkTests\nDerivedColumn2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\t{Survey Person ID},\n\t\t{Survey Pass Issued},\n\t\t{Survey Created On},\n\t\t{Survey Checked In},\n\t\t{Survey Checked In Date},\n\t\t{Survey Location}\n\t)) ~> sinkSurvey\nfilterOutBlankLocationNumbers sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\t{Facility Dynamics ID},\n\t\t{Facility State Code},\n\t\t{Facility Number},\n\t\t{Facility Latitude},\n\t\t{Facility Longitude},\n\t\t{Facility Name},\n\t\t{Facility Campus Name},\n\t\t{Facility Campus Code},\n\t\trts_ld,\n\t\trts_physicalcos,\n\t\t{Facility Location Number}\n\t)) ~> sinkFacility\nSelect6 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEmployeeCaseID,\n\t\tFacilityID\n\t)) ~> OneCaseFacilitySink\nRemoveDuplicates sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCohort_ID as long,\n\t\t{Student District ID} as string,\n\t\tGrade as string,\n\t\t{Instructional Model} as string,\n\t\t{On-Site Childcare} as string,\n\t\tTransportation as string,\n\t\t{Athletics/Auxiliary} as string,\n\t\t{Row Number} as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\t{Student District ID},\n\t\tGrade,\n\t\t{Instructional Model} = {Instructional Model },\n\t\tTransportation,\n\t\t{On-Site Childcare},\n\t\t{Athletics/Auxiliary}\n\t)) ~> sinkCohort\nSelect13 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\trts_person as string,\n\t\tVaccine_Status as string,\n\t\tLast_Vaccination_Date as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\trts_person,\n\t\tVaccine_Status,\n\t\tLast_Vaccination_Date\n\t)) ~> sinkVaccineStatus\nUnion2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tTest_Appointment_ID as long,\n\t\t{Appointment Person ID} as string,\n\t\t{Appointment Number} as string,\n\t\t{Appointment Datetime} as timestamp,\n\t\t{Appointment Date} as date,\n\t\t{Appointment Time} as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\t{Appointment Person ID},\n\t\t{Appointment Number},\n\t\t{Appointment Datetime},\n\t\t{Appointment Date},\n\t\t{Appointment Time}\n\t)) ~> sinkAppointment\nDerivedColumn9 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\t{Case Number},\n\t\t{Case Created On},\n\t\t{Case Status Code},\n\t\t{Case Type},\n\t\t{Case Quarantine Start Date},\n\t\t{Case Isolation Start Date},\n\t\t{Case Anticipated End Date},\n\t\t{Case Person Dynamics ID},\n\t\t{Case Check In Available},\n\t\tEmployeecaseID,\n\t\t{Case State Code},\n\t\tmsft_employeecaseid,\n\t\t{Case Status},\n\t\t{Case Age},\n\t\tAccessDuration\n\t)) ~> sinkCase\nSelect8 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\t{Person Dynamics ID},\n\t\t{Conditionally Approved},\n\t\t{Person Employee ID},\n\t\t{Person Position},\n\t\t{Person Student ID},\n\t\t{Person Full Name},\n\t\t{Person First Name},\n\t\t{Person Last Name},\n\t\t{Person Type},\n\t\t{Person Cost Center Code},\n\t\t{Covid Test Without Parent},\n\t\t{Person Status},\n\t\t{Daily Pass For Dependents Under 13},\n\t\tConsent,\n\t\tAuthorize,\n\t\t{Unaccompanied Minor},\n\t\t{Covid Testing for In Person Learning},\n\t\tAccess,\n\t\t{DACE Cost Center Code},\n\t\trts_race,\n\t\trts_ethnicity,\n\t\tmsft_contacttype,\n\t\t{Vaccine Status} = Vaccine_Status,\n\t\tAge,\n\t\tDobMmYyyy = {DOB MMYYYY},\n\t\tmodifiedon\n\t)) ~> sinkContact\nSelectGrades sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tDISTRICT_STUDENT_ID,\n\t\tGRADE_CODE\n\t)) ~> sinkGrades\nsevenAccess sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\t{Person Dynamics ID} as string,\n\t\t{Person Employee ID} as string,\n\t\t{Person Student ID} as string,\n\t\t{Person Full Name} as string,\n\t\t{Person Cost Center Code} as string,\n\t\t{Vaccine Status} as string,\n\t\t{Case Type} as string,\n\t\t{Case Status} as string,\n\t\t{Case Age} as integer,\n\t\t{Case Number} as string,\n\t\tAccess as string,\n\t\t{Survey Pass Issued} as boolean,\n\t\t{Survey Created On} as timestamp,\n\t\tAccessDuration as date,\n\t\tNoOfDaysSinceLastTest as integer,\n\t\t{Conditionally Approved} as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\t{Person Dynamics ID},\n\t\t{Person Employee ID},\n\t\t{Conditionally Approved},\n\t\t{Person Student ID},\n\t\t{Person Full Name},\n\t\t{Person Cost Center Code},\n\t\t{Vaccine Status} = Vaccine_Status,\n\t\t{Case Type},\n\t\t{Case Status},\n\t\t{Case Age},\n\t\t{Case Number},\n\t\tAccess,\n\t\t{Survey Pass Issued},\n\t\t{Survey Created On},\n\t\tAccessDuration,\n\t\tNoOfDaysSinceLastTest\n\t)) ~> sinkAllowedDisallowed"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalake_004')]",
				"[concat(variables('factoryId'), '/datasets/ElementarySchoolCohortData')]",
				"[concat(variables('factoryId'), '/datasets/CohortSecondarySchoolData')]",
				"[concat(variables('factoryId'), '/datasets/001_adls_Grades')]",
				"[concat(variables('factoryId'), '/datasets/001_SQL_Test_Staged')]",
				"[concat(variables('factoryId'), '/datasets/001_SQL_Health_Survey_Staged')]",
				"[concat(variables('factoryId'), '/datasets/001_SQL_Facility_Staged')]",
				"[concat(variables('factoryId'), '/datasets/001_SQL_OneCaseFacility_Staged')]",
				"[concat(variables('factoryId'), '/datasets/CohortData')]",
				"[concat(variables('factoryId'), '/datasets/001_SQL_VaccineStatus_Staged')]",
				"[concat(variables('factoryId'), '/datasets/001_SQL_Appointment_Staged')]",
				"[concat(variables('factoryId'), '/datasets/001_SQL_Case_Staged')]",
				"[concat(variables('factoryId'), '/datasets/001_SQL_Contact_Staged2')]",
				"[concat(variables('factoryId'), '/datasets/001_SQL_Grades')]",
				"[concat(variables('factoryId'), '/datasets/stg_001_adf_Contact_Staged')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Aggregationdf')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText13",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText16",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tEmpid as string,\n\t\tName as string,\n\t\tCountry as string,\n\t\tDepartment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 aggregate(groupBy(Department),\n\tEmployeecount = count(Empid)) ~> Aggregate1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\t{30} as string,\n\t\tRahul as string,\n\t\tIndia as string,\n\t\t{33} as string\n\t),\n\tpartitionFileNames:['aggregatefile.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText13')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText16')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Anikettesting')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText10",
								"type": "DatasetReference"
							},
							"name": "source22"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText8",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText7",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Aggregate1"
						},
						{
							"name": "Union1"
						}
					],
					"script": "source(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as integer '000',\n\t\tColumn_4 as string,\n\t\tColumn_5 as integer '000'\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source22\nsource(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source2\nsource22 aggregate(Column_3 = sum(Column_3),\n\t\tColumn_5 = count(Column_5)) ~> Aggregate1\nsource22, Aggregate1 union(byName: true,\n\tpartitionBy('roundRobin', 2))~> Union1\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText10')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText8')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText7')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ECOLABDATALAKE_AZONE_EXPL_BILLING_SOLDTO_LOOKUP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "MasterSetSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "SourceToString"
						},
						{
							"name": "MasterSetFilter"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "parameters{\n\tpath_2LIS_13_VDITM as string ('Exploration/EnterpriseBackbone/EBS/2LIS_13_VDITM/'),\n\tfile_2LIS_13_VDITM as string ('2LIS_13_VDITM'),\n\tfile_extension_tsv as string ('.tsv'),\n\tfile_extension_parquet as string ('.parquet'),\n\tpath_BillingSoldTolookup as string ('Exploration/EnterpriseBackbone/O2C_Lookup/'),\n\tfile_BillingSoldTolookup as string ('BillingSoldTolookup')\n}\nsource(output(\n\t\tDISequenceNum as string,\n\t\tDIOperationTypeCd as string,\n\t\tCancelDataRecInd as string,\n\t\tSalesDistDocumentNum as string,\n\t\tBillingDocumentPostingStatusCd as string,\n\t\tIntercompanyBillingTotalStatusCd as string,\n\t\tOrderBillingStatusCd as string,\n\t\tBillingStatusCd as string,\n\t\tOverallBillingBlockStatusCd as string,\n\t\tOverallProcessingStatusCd as string,\n\t\tOverallBlockedStatusCd as string,\n\t\tSDDocumentItemNum as string,\n\t\tChangesOnDt as string,\n\t\tCompanyCd as string,\n\t\tSalesDistrictCd as string,\n\t\tBillingTypeCd as string,\n\t\tBillingDt as string,\n\t\tBillingCatCd as string,\n\t\tLocalCurCd as string,\n\t\tCustGrpCd as string,\n\t\tSoldToPartyCd as string,\n\t\tPayerCd as string,\n\t\tFIPostingsExchangeRate as string,\n\t\tExchangeRateTypeCd as string,\n\t\tStatisticsCurCd as string,\n\t\tSDDocumentCatg1Cd as string,\n\t\tSalesOrgCd as string,\n\t\tDistChannelCd as string,\n\t\tSDDocumentCurCd as string,\n\t\tFiscalYear as string,\n\t\tPostingPeriodTm as string,\n\t\tTransferToAccountingStatusCd as string,\n\t\tAssignNumCd as string,\n\t\tPromotionCd as string,\n\t\tSalesDocumentNum as string,\n\t\tSalesDocumentItemNum as string,\n\t\tRebateBasis1Val as string,\n\t\tVolumeRebateGrpCd as string,\n\t\tGrossWeightQty as string,\n\t\tBillingItemDocumentCurGrossVal as string,\n\t\tApplicationComponentCd as string,\n\t\tSAPBWTransactionKeyCd as string,\n\t\tBatchNum as string,\n\t\tIntArticleNum as string,\n\t\tRecordCreatedDt as string,\n\t\tBillingPlanRuleCd as string,\n\t\tServicesRenderedDt as string,\n\t\tActualInvoicedQty as string,\n\t\tStockkeepingUnitBillingQty as string,\n\t\tWeightUnitMeas as string,\n\t\tSalesDealCd as string,\n\t\tControllingAreaCd as string,\n\t\tCostCenterCd as string,\n\t\tPriceDeterminationExchangeRate as string,\n\t\tTranslationDt as string,\n\t\tCustGrp1Cd as string,\n\t\tCustGrp2Cd as string,\n\t\tCustGrp3Cd as string,\n\t\tCustGrp4Cd as string,\n\t\tCustGrp5Cd as string,\n\t\tPricingProcedureConditionSubtotal1Amt as string,\n\t\tPricingProcedureConditionSubtotal2Amt as string,\n\t\tPricingProcedureConditionSubtotal3Amt as string,\n\t\tPricingProcedureConditionSubtotal4Amt as string,\n\t\tPricingProcedureConditionSubtotal5Amt as string,\n\t\tPricingProcedureConditionSubtotal6Amt as string,\n\t\tStorageLocationCd as string,\n\t\tMatMgmtRequiredQty as string,\n\t\tMatGrpCd as string,\n\t\tMatNum as string,\n\t\tMatEnteredNum as string,\n\t\tBaseUoMMeas as string,\n\t\tMatGrp1Cd as string,\n\t\tMatGrp2Cd as string,\n\t\tMatGrp3Cd as string,\n\t\tMatGrp4Cd as string,\n\t\tMatGrp5Cd as string,\n\t\tDocumentCurTaxAmt as string,\n\t\tBillingItemNetVal as string,\n\t\tNetWeightQty as string,\n\t\tBillToPartyCd as string,\n\t\tShipToPartyCd as string,\n\t\tItemTypeCd as string,\n\t\tProductHierarchyCd as string,\n\t\tCommisionGrpCd as string,\n\t\tPricingExchangeRateDt as string,\n\t\tSalesDocumentItemCatgCd as string,\n\t\tSalesEmpCd as string,\n\t\tCashDiscountEligibleAmt as string,\n\t\tBaseUoMScaleQty as string,\n\t\tOrderHeaderDivisionCd as string,\n\t\tDivisionCd as string,\n\t\tStatisticsDt as string,\n\t\tStatisticsExchangeRate as string,\n\t\tSalesQtyToSKUConversionDenominatorQty as string,\n\t\tSalesQtyToSKUConversionNumeratorQty as string,\n\t\tStatisticsUpdateDt as string,\n\t\tReferenceDocumentNum as string,\n\t\tReferenceItemNum as string,\n\t\tSalesOfficeCd as string,\n\t\tSalesGrpCd as string,\n\t\tVolumeUnitMeas as string,\n\t\tVolumeQty as string,\n\t\tSalesUnitCd as string,\n\t\tShippingPointCd as string,\n\t\tDocumentCurCostAmt as string,\n\t\tPlantCd as string,\n\t\tDocumentCurGrossVal as string,\n\t\tSalesTypeCd as string,\n\t\tTotalQty1 as string,\n\t\tStatisticsUOMTotalQty as string,\n\t\tTotalQty2 as string,\n\t\tStatisticsUoMBillingQty as string,\n\t\tDepartureCountryCd as string,\n\t\tOrderNum as string,\n\t\tOrderReasonTxt as string,\n\t\tSalesDocumentReferenceCd as string,\n\t\tSDDocumentCatgCd as string,\n\t\tAccountingInd as string,\n\t\tPlantCatgCd as string,\n\t\tItemCreditPriceVal as string,\n\t\tAgreedDeliveryTm as string,\n\t\tPurchasingGrpCd as string,\n\t\tPurchasingOrgCd as string,\n\t\tPurchasingAreaCd as string,\n\t\tObjectCreatedByName as string,\n\t\tEntryTm as string,\n\t\tFunctionalAreaCd as string,\n\t\tBillingPlanItemCd as string,\n\t\tEntryTm1 as string,\n\t\tVendorMatNum as string,\n\t\tAccountAssignmentGrpCd as string,\n\t\tSalesOrderDestinationCountryCd as string,\n\t\tMatTypeCd as string,\n\t\tOpenBillingDocumentCreditVal as string,\n\t\tTotalOpenBillingDocumentCreditVal as string,\n\t\tOpenBillingDocumentQty as string,\n\t\tOpenDeliveryCreditVal as string,\n\t\tTotalOpenDeliveryCreditVal as string,\n\t\tSoldToParty1Cd as string,\n\t\tProfitCenterCd as string,\n\t\tItemReturnedInd as string,\n\t\tBaseUoMSalesQty as string,\n\t\tGenerallyIncompleteInd as string,\n\t\tEBSAgreeNum as string,\n\t\tEBSAgreeTypCd as string,\n\t\tWorkBreakdownStructureElementCd as string,\n\t\tNumOfBillingItemNum as string,\n\t\tFiscalYearVariantCd as string,\n\t\tReferredSalesOrderItemCampaignCd as string,\n\t\tCustCd as string,\n\t\tPrecedingSalesDistDocumentCd as string,\n\t\tCust1Cd as string,\n\t\tPayer1Cd as string,\n\t\tSoldToParty2Num as string,\n\t\tBillToParty1Num as string,\n\t\tShipToParty1Num as string,\n\t\tODQChangeModeCd as string,\n\t\tODQEntityCntrCd as string,\n\t\tFileCreatedDtTm as string,\n\t\tFileName as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tIsReversedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_2LIS_13_VDITM+$file_2LIS_13_VDITM+$file_extension_tsv)]) ~> MasterSetSource\nMasterSetSource derive(each(match(true()), $$ = toString($$))) ~> SourceToString\nSourceToString filter(like(CompanyCd,'US%') || like(CompanyCd,'CA%') || like(CompanyCd,'GB%') || like(CompanyCd,'IE%')) ~> MasterSetFilter\nMasterSetFilter aggregate(groupBy(SalesDistDocumentNum,\n\t\tSoldToParty2Num),\n\tcount = count(1)) ~> Aggregate1\nAggregate1 select(mapColumn(\n\t\tBillingDocNum = SalesDistDocumentNum,\n\t\tSoldTo = SoldToParty2Num\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($path_BillingSoldTolookup+$file_BillingSoldTolookup+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($path_BillingSoldTolookup+$file_BillingSoldTolookup+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ECOLABDATALAKE_AZONE_EXPL_SOLD_TO_PAYER_LOOKUP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "BPRELATIONSEXPL"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "CUSTOMEREXPL"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "BPDEFADDRESSEXPL"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "BpPartnerTSV"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "BpPartnerParquet"
						}
					],
					"transformations": [
						{
							"name": "BPRELATIONSEXPLString"
						},
						{
							"name": "CUSTOMEREXPLString"
						},
						{
							"name": "BPDEFADDRESSEXPLString"
						},
						{
							"name": "bppartnerFilter"
						},
						{
							"name": "bppartnerSelect"
						},
						{
							"name": "customerFilter"
						},
						{
							"name": "customerSelect"
						},
						{
							"name": "AddressFilter"
						},
						{
							"name": "AddressSelect"
						},
						{
							"name": "forRemoving"
						},
						{
							"name": "BppartnerAfterRemovingJoin"
						},
						{
							"name": "BppartnerAfterRemoving"
						},
						{
							"name": "BppartnerAfterRemovingDistinct"
						},
						{
							"name": "BppartnerAfterRemovingSelect"
						},
						{
							"name": "BppartnerCount"
						},
						{
							"name": "BpPartnerFinalJoin"
						},
						{
							"name": "BpPartnerFinalSelect"
						},
						{
							"name": "DistinctforRemoving"
						},
						{
							"name": "CustNumRemoveDist"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "PayerRename"
						}
					],
					"script": "parameters{\n\tpath_0BP_RELATIONS as string ('Exploration/EnterpriseBackbone/EBS/0BP_RELATIONS/'),\n\tpath_0CUSTOMER as string ('Exploration/EnterpriseBackbone/EBS/0CUSTOMER/'),\n\tpath_0BP_DEF_ADDRESS as string ('Exploration/EnterpriseBackbone/EBS/0BP_DEF_ADDRESS/'),\n\tfile_0BP_RELATIONS as string ('0BP_RELATIONS'),\n\tfile_0CUSTOMER as string ('0CUSTOMER'),\n\tfile_0BP_DEF_ADDRESS as string ('0BP_DEF_ADDRESS'),\n\tfile_extension_tsv as string ('.tsv'),\n\tpath_soldtopayerlookup as string ('/Exploration/EnterpriseBackbone/O2C_Lookup/'),\n\tfile_soldtopayerlookup as string ('soldtopayerlookup'),\n\tfile_extension_parquet as string ('.parquet')\n}\nsource(output(\n\t\tBPRelationshipNum as string,\n\t\tBusPartner1Num as string,\n\t\tBusPartner2Num as string,\n\t\tBusPartner1GUID as string,\n\t\tBusPartner2GUID as string,\n\t\tBusPartnerRelationshipCatgDirectionCd as string,\n\t\tBusPartnerRelationshipCatgCd as string,\n\t\tValidToDt as string,\n\t\tValidFromDt as string,\n\t\tPartnerFunctionCd as string,\n\t\tDeptCd as string,\n\t\tPartnerAuthCd as string,\n\t\tVIPPartnerCd as string,\n\t\tCountryCd as string,\n\t\tCityPostalCd as string,\n\t\tCityName as string,\n\t\tStreetName as string,\n\t\tHouseNum as string,\n\t\tFirstTelNum as string,\n\t\tFirstFaxNum as string,\n\t\tEmailAddrTxt as string,\n\t\tCapitalInterestPct as string,\n\t\tCapitalInterestAmt as string,\n\t\tCurCd as string,\n\t\tIfShareholderControlsCompanyInd as string,\n\t\tOneLineAddrDesc as string,\n\t\tOneLineAddrDesc2 as string,\n\t\tBPAddrLine0Desc as string,\n\t\tBPAddrLine1Desc as string,\n\t\tBPAddrLine2Desc as string,\n\t\tBPAddrLine3Desc as string,\n\t\tBPAddrLine4Desc as string,\n\t\tBPAddrLine5Desc as string,\n\t\tBPAddrLine6Desc as string,\n\t\tBPAddrLine7Desc as string,\n\t\tBPAddrLine8Desc as string,\n\t\tBPAddrLine9Desc as string,\n\t\tCheckboxInd as string,\n\t\tStandardRelationshipInd as string,\n\t\tLanguageCd as string,\n\t\tBusPartnerRelationshipCatgDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_0BP_RELATIONS+'tsv/'+$file_0BP_RELATIONS+'*'+$file_extension_tsv)]) ~> BPRELATIONSEXPL\nsource(output(\n\t\tCustomerNum as string,\n\t\tAddrNum as string,\n\t\tTitleTxt as string,\n\t\tCustCentralOrderBlockCd as string,\n\t\tExpressTrainStationCd as string,\n\t\tTrainStationCd as string,\n\t\tInternationalLocation1Num as string,\n\t\tInternationalLocation2Num as string,\n\t\tAuthGrpCd as string,\n\t\tIndustryCd as string,\n\t\tInternationalLocationNumCheckDigitCd as string,\n\t\tLineNumDataCommunicationTxt as string,\n\t\tRecordCreatedDt as string,\n\t\tRecordCreatedByName as string,\n\t\tUnloadingPointInd as string,\n\t\tCustCentralBillingBlockCd as string,\n\t\tMasterRecordWithFiscalAddrAccountNum as string,\n\t\tWorkingTmCalendarCd as string,\n\t\tAlternativePayerAccountNum as string,\n\t\tGrpCd as string,\n\t\tCustAccountGrpCd as string,\n\t\tCustClassificationCd as string,\n\t\tCountryKeyCd as string,\n\t\tVendorAccountNum as string,\n\t\tCustCntralDeliveryBlockCd as string,\n\t\tCityCoordinatesVal as string,\n\t\tMasterRecordDeletionInd as string,\n\t\tName1Desc as string,\n\t\tName2Desc as string,\n\t\tName3Desc as string,\n\t\tName4Desc as string,\n\t\tNielsenIDCd as string,\n\t\tCityName as string,\n\t\tDistrictName as string,\n\t\tPOBoxNum as string,\n\t\tPOBoxPostalCd as string,\n\t\tPostalCd as string,\n\t\tRegionCd as string,\n\t\tCountryCd as string,\n\t\tCityCd as string,\n\t\tRegionalMarketCd as string,\n\t\tSortFieldDesc as string,\n\t\tCentralPostingBlockInd as string,\n\t\tLanguageCd as string,\n\t\tTax1Num as string,\n\t\tTax2Num as string,\n\t\tBusPartnerEqualizationTaxInd as string,\n\t\tLiableForVATInd as string,\n\t\tHouseNumAndStreetDesc as string,\n\t\tTeleboxNumTxt as string,\n\t\tFirstTelNum as string,\n\t\tSecondTelNum as string,\n\t\tFaxNum as string,\n\t\tTeletaxNum as string,\n\t\tTelexNum as string,\n\t\tTransportationZoneCd as string,\n\t\tIsOneTimeAccountInd as string,\n\t\tIfAlternativePayeeAllowedInd as string,\n\t\tTradingPartnerCompanyCd as string,\n\t\tVATRegistrationNum as string,\n\t\tIsCompetitorInd as string,\n\t\tIsSalesPartnerInd as string,\n\t\tIsSalesProspectInd as string,\n\t\tCustType4Ind as string,\n\t\tSoldToPartyCd as string,\n\t\tIsConsumerInd as string,\n\t\tLegalStatusCd as string,\n\t\tIndustry1Cd as string,\n\t\tIndustry2Cd as string,\n\t\tIndustry3Cd as string,\n\t\tIndustry4Cd as string,\n\t\tIndustry5Cd as string,\n\t\tInitialContactCd as string,\n\t\tAnnualSalesNum as string,\n\t\tAnnualSalesYearTxt as string,\n\t\tSalesFigCurCd as string,\n\t\tYearlyCountOfEmpNum as string,\n\t\tYearForNumOfEmpTxt as string,\n\t\tAttr1Cd as string,\n\t\tAttr2Cd as string,\n\t\tAttr3Cd as string,\n\t\tAttr4Cd as string,\n\t\tCustLeadDivisionCd as string,\n\t\tAttr6Cd as string,\n\t\tAttr7Cd as string,\n\t\tAttr8Cd as string,\n\t\tAttr9Cd as string,\n\t\tAttr10Cd as string,\n\t\tNaturalPersonName as string,\n\t\tAnnualSalesNum2 as string,\n\t\tTaxJurisdictionCd as string,\n\t\tMatchCdSearchTerm1Desc as string,\n\t\tMatchCdSearchTerm2Desc as string,\n\t\tMatchCdSearchTerm3Desc as string,\n\t\tFiscalYearVariantCd as string,\n\t\tUsageInd as string,\n\t\tCustInspectionInd as string,\n\t\tOutboundDeliveryNoteInspectionInd as string,\n\t\tReferenceAccountGrpCd as string,\n\t\tPOBoxCityName as string,\n\t\tPlantCd as string,\n\t\tMediumOfDataExchangeInd as string,\n\t\tMediumOfDataExchangeInstructionCd as string,\n\t\tDataTransferStatusInd as string,\n\t\tAssignmentToHierarchyCd as string,\n\t\tPaymentBlockCd as string,\n\t\tCustPlantGrpISRLabelCd as string,\n\t\tNonMilitaryUseInd as string,\n\t\tMilitaryUseInd as string,\n\t\tCustConditionGrp1Cd as string,\n\t\tCustConditionGrp2Cd as string,\n\t\tCustConditionGrp3Cd as string,\n\t\tCustConditionGrp4Cd as string,\n\t\tCustConditionGrp5Cd as string,\n\t\tAlternativePayerUsingAccountNumInd as string,\n\t\tTaxTypeCd as string,\n\t\tTaxNumTypeCd as string,\n\t\tTaxNbr3Cd as string,\n\t\tTaxNbr4Cd as string,\n\t\tICMSExemptCustInd as string,\n\t\tIPIExemptCustInd as string,\n\t\tCustGrpCd as string,\n\t\tCustCFOPCatCd as string,\n\t\tICMSTaxLawCd as string,\n\t\tIPITaxLawCd as string,\n\t\tBiochemicalWarfareForLegalControlInd as string,\n\t\tNuclearProliferationForLegalControlInd as string,\n\t\tNationalSecurityForLegalControlInd as string,\n\t\tMissileTechnologyForLegalControlInd as string,\n\t\tCustCentralSalesBlockInd as string,\n\t\tUniformResourceLocatorTxt as string,\n\t\tNameDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_0CUSTOMER+'tsv/'+$file_0CUSTOMER+'*'+$file_extension_tsv)]) ~> CUSTOMEREXPL\nsource(output(\n\t\tBusPartnerNum as string,\n\t\tBusPartnerGUID as string,\n\t\tAddrNum as string,\n\t\tValidFromDt as string,\n\t\tInternationalAddrVersionCd as string,\n\t\tValidToDt as string,\n\t\tFormOfAddrCd as string,\n\t\tName1Desc as string,\n\t\tName2Desc as string,\n\t\tName3Desc as string,\n\t\tName4Desc as string,\n\t\tCareOfDesc as string,\n\t\tCityName as string,\n\t\tDistrictName as string,\n\t\tCityCd as string,\n\t\tDistrictCd as string,\n\t\tNonPostalCityName as string,\n\t\tDifferentCityCd as string,\n\t\tRegionalStructureGroupingCd as string,\n\t\tCityPostalCd as string,\n\t\tPOBoxPostalCd as string,\n\t\tCompanyPostalCd as string,\n\t\tPOBoxNum as string,\n\t\tPOBoxWithoutNumInd as string,\n\t\tPOBoxCityName as string,\n\t\tPOBoxCityCd as string,\n\t\tPOBoxRegionCd as string,\n\t\tPOBoxCountry as string,\n\t\tTransportationZoneCd as string,\n\t\tStreetName as string,\n\t\tStreetNumDesc as string,\n\t\tHouseNum as string,\n\t\tSupplementHouseNum as string,\n\t\tStreet2Name as string,\n\t\tStreet3Name as string,\n\t\tStreet4Name as string,\n\t\tStreet5Name as string,\n\t\tBuildingCd as string,\n\t\tFloorCd as string,\n\t\tRoomAptNum as string,\n\t\tCountryCd as string,\n\t\tLanguageCd as string,\n\t\tRegionCd as string,\n\t\tPersonalAddrFlagCd as string,\n\t\tSearchTerm1Txt as string,\n\t\tSearchTerm2Txt as string,\n\t\tFirstTelNum as string,\n\t\tFirstTelExtnCd as string,\n\t\tFirstFaxNum as string,\n\t\tFirstFaxExtnCd as string,\n\t\tExtenstion1Cd as string,\n\t\tExtenstion2Cd as string,\n\t\tAddrTmZoneCd as string,\n\t\tTaxJurisdictionCd as string,\n\t\tEmailAddrTxt as string,\n\t\tURIFieldForTransferToBWTxt as string,\n\t\tDisplayFrmtTelNum as string,\n\t\tDisplayFrmtFaxNum as string,\n\t\tGeoLocationLongitudeVal as string,\n\t\tGeoLocationLatitudeVal as string,\n\t\tGeoLocationHeightVal as string,\n\t\tGeoLocationDataSourceCd as string,\n\t\tGeoLocationPrecisionCd as string,\n\t\tAddrNum2 as string,\n\t\tOneLineAddrDesc as string,\n\t\tOneLineAddrDesc2 as string,\n\t\tBPAddrLin0Desc as string,\n\t\tBPAddrLin1Desc as string,\n\t\tBPAddrLin2Desc as string,\n\t\tBPAddrLin3Desc as string,\n\t\tBPAddrLin4Desc as string,\n\t\tBPAddrLin5Desc as string,\n\t\tBPAddrLin6Desc as string,\n\t\tBPAddrLin7Desc as string,\n\t\tBPAddrLin8Desc as string,\n\t\tBPAddrLin9Desc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_0BP_DEF_ADDRESS+'tsv/'+$file_0BP_DEF_ADDRESS+'*'+$file_extension_tsv)]) ~> BPDEFADDRESSEXPL\nDerivedColumn2 derive(each(match(true()), $$ = toString($$))) ~> BPRELATIONSEXPLString\nCUSTOMEREXPL derive(each(match(true()), $$ = toString($$))) ~> CUSTOMEREXPLString\nBPDEFADDRESSEXPL derive(each(match(true()), $$ = toString($$))) ~> BPDEFADDRESSEXPLString\nBPRELATIONSEXPLString filter(BusPartnerRelationshipCatgCd=='CRMH03' && BusPartnerRelationshipCatgDirectionCd =='1') ~> bppartnerFilter\nbppartnerFilter derive(Payer = BusPartner2Num,\n\t\tSoldTo = BusPartner1Num) ~> bppartnerSelect\nCUSTOMEREXPLString filter(IsDeletedInd=='Y') ~> customerFilter\ncustomerFilter select(mapColumn(\n\t\tCustomerNum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> customerSelect\nBPDEFADDRESSEXPLString filter(like(StreetName, '#%')) ~> AddressFilter\nAddressFilter select(mapColumn(\n\t\tCustomerNum = BusPartnerNum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> AddressSelect\ncustomerSelect, AddressSelect union(byName: true)~> forRemoving\nbppartnerSelect, CustNumRemoveDist join(SoldTo == CustomerNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> BppartnerAfterRemovingJoin\nBppartnerAfterRemovingJoin filter(isNull(CustomerNum)) ~> BppartnerAfterRemoving\nBppartnerAfterRemoving aggregate(groupBy(Payer,\n\t\tSoldTo),\n\tcount = count(1)) ~> BppartnerAfterRemovingDistinct\nBppartnerAfterRemovingDistinct select(mapColumn(\n\t\tL_Payer = Payer,\n\t\tSoldTo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> BppartnerAfterRemovingSelect\nBppartnerAfterRemovingSelect aggregate(groupBy(L_Payer),\n\tcountofsoldto = count(1)) ~> BppartnerCount\nBppartnerAfterRemovingSelect, PayerRename join(L_Payer == R_Payer,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> BpPartnerFinalJoin\nDerivedColumn1 select(mapColumn(\n\t\tPayer = L_Payer,\n\t\tSoldTo,\n\t\tcountofsoldto\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> BpPartnerFinalSelect\nforRemoving aggregate(groupBy(CustomerNum),\n\tcount = count(1)) ~> DistinctforRemoving\nDistinctforRemoving select(mapColumn(\n\t\tCustomerNum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CustNumRemoveDist\nBpPartnerFinalJoin derive(countofsoldto = toString(countofsoldto)) ~> DerivedColumn1\nBPRELATIONSEXPL derive(each(match(true()), $$ = coalesce($$))) ~> DerivedColumn2\nBppartnerCount select(mapColumn(\n\t\tR_Payer = L_Payer,\n\t\tcountofsoldto\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PayerRename\nBpPartnerFinalSelect sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($path_soldtopayerlookup+$file_soldtopayerlookup+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> BpPartnerTSV\nBpPartnerFinalSelect sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($path_soldtopayerlookup+$file_soldtopayerlookup+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> BpPartnerParquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ECOLABDATALAKE_O2C_AGING_FACT_DAILY')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "OToCAgingCntlDaily"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "SoldToPayerLookup"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "BillingSoldTolookup"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "DimBaseCustomerHierarchy"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "SalesLkpCustomerXref"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "LIS13VDITM"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "FIAR4"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "cnt1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "maxdate"
						},
						{
							"name": "Window1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "SoldToPayerLookup1"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "BillingSoldTolookup1"
						},
						{
							"name": "Window3"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Customer"
						},
						{
							"name": "Window4"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Customerhier"
						},
						{
							"name": "Window5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "Customerxref"
						},
						{
							"name": "Window6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "BillingDocumentItemData"
						},
						{
							"name": "CrossJoinMaxDate"
						},
						{
							"name": "Filter8"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AgingExplExtract1"
						},
						{
							"name": "LeftJoinbillingsoldto"
						},
						{
							"name": "LeftJoinsoldtopayer"
						},
						{
							"name": "LeftJoinBillingDocumentItemDataU1"
						},
						{
							"name": "LeftJoinBillingDocumentItemDataNonU1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "LogicPopulation"
						},
						{
							"name": "LeftJoinsoldtocust"
						},
						{
							"name": "LeftJoinpayercust"
						},
						{
							"name": "LeftJoinsoldtocusthier"
						},
						{
							"name": "LeftJoinpayercusthier"
						},
						{
							"name": "LeftJoinCustomerxref"
						},
						{
							"name": "LeftJoinBillTo"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "FinalDailySet"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "FinalDailySetWithoutColumn"
						},
						{
							"name": "FinalDailySetWithoutColumn1"
						},
						{
							"name": "FinalDailySetWithoutColumn2"
						},
						{
							"name": "getoldcntlvalue"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "getnewcntlvalue"
						},
						{
							"name": "Union1"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Select5"
						},
						{
							"name": "soldtocust"
						},
						{
							"name": "payercust"
						},
						{
							"name": "BillTo"
						},
						{
							"name": "BillingDocumentItemDataU1"
						},
						{
							"name": "BillingDocumentItemDataNonU1"
						},
						{
							"name": "soldtocusthier"
						},
						{
							"name": "payercusthier"
						},
						{
							"name": "finaldailysetwithoutcolumn2select"
						},
						{
							"name": "Filter10"
						},
						{
							"name": "Filter11"
						}
					],
					"script": "parameters{\n\tpath_OToC_Aging_Cntl_Daily as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/'),\n\tfile_OToC_Aging_Cntl_Daily as string ('OToC_Aging_Cntl_DailyEU'),\n\tfile_extension_tsv as string ('.tsv'),\n\tfile_extension_parquet as string ('.parquet'),\n\tpath_soldtopayerlookup as string ('Exploration/EnterpriseBackbone/O2C_Lookup/'),\n\tfile_soldtopayerlookup as string ('soldtopayerlookup'),\n\tfile_BillingSoldTolookup as string ('BillingSoldTolookup'),\n\tpath_dim_customer as string ('Analytics/EnterpriseCertified/EnterpriseDims/CUSTOMER_NA/'),\n\tfile_dim_customer as string ('dim_customer'),\n\tpath_dim_base_customer_hierarchy as string ('Analytics/EnterpriseCertified/EnterpriseDims/MDM_CUSTOMER_NA/'),\n\tfile_dim_base_customer_hierarchy as string ('dim_base_customer_hierarchy'),\n\tpath_SALES_LKP_CUSTOMER_XREF as string ('Exploration/EnterpriseBackbone/Lookups/USHistoricalSalesData/'),\n\tfile_SALES_LKP_CUSTOMER_XREF as string ('SALES_LKP_CUSTOMER_XREF'),\n\tpath_2LIS_13_VDITM as string ('Exploration/EnterpriseBackbone/EBS/2LIS_13_VDITM/CurrentDelta/EU/'),\n\tfile_2LIS_13_VDITM as string ('2LIS_13_VDITM*'),\n\tpath_0FI_AR_4 as string ('Exploration/EnterpriseBackbone/EBS/0FI_AR_4/CurrentDelta/EU/*/*/*/'),\n\tfile_0FI_AR_4 as string ('0FI_AR_4*'),\n\tpath_BillingSoldTolookup as string ('Exploration/EnterpriseBackbone/O2C_Lookup/'),\n\tfile_AR_Transactions as string ('AR_Transactions'),\n\tpath_AR_Transactions as string ('Analytics/EnterpriseCertified/EnterpriseFacts/Accounts_Receivable/AR_Transactions/EU/'),\n\tdelta_folder_path as string,\n\tJobId as string ('1'),\n\tParquet_folder as string,\n\ttsv_folder as string,\n\tSubjectAreacntl as string ('Aging_DailyEU')\n}\nsource(output(\n\t\tLastRunDate as string,\n\t\tStatus as string,\n\t\tSubjectArea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_OToC_Aging_Cntl_Daily+$file_OToC_Aging_Cntl_Daily+$file_extension_tsv)]) ~> OToCAgingCntlDaily\nsource(output(\n\t\tPayer as string,\n\t\tSoldTo as string,\n\t\tcountofsoldto as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_soldtopayerlookup+$file_soldtopayerlookup+$file_extension_tsv)]) ~> SoldToPayerLookup\nsource(output(\n\t\tBillingDocNum as string,\n\t\tSoldTo as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_BillingSoldTolookup+$file_BillingSoldTolookup+$file_extension_tsv)]) ~> BillingSoldTolookup\nsource(output(\n\t\tCustomerKey as long,\n\t\tCustomerNum as string,\n\t\tAddrNum as string,\n\t\tTitleTxt as string,\n\t\tCustCentralOrderBlockCd as string,\n\t\tExpressTrainStationCd as string,\n\t\tTrainStationCd as string,\n\t\tInternationalLocation1Num as string,\n\t\tInternationalLocation2Num as string,\n\t\tAuthGrpCd as string,\n\t\tIndustryCd as string,\n\t\tInternationalLocationNumCheckDigitCd as string,\n\t\tLineNumDataCommunicationTxt as string,\n\t\tRecordCreatedDt as string,\n\t\tRecordCreatedByName as string,\n\t\tUnloadingPointInd as string,\n\t\tCustCentralBillingBlockCd as string,\n\t\tMasterRecordWithFiscalAddrAccountNum as string,\n\t\tWorkingTmCalendarCd as string,\n\t\tAlternativePayerAccountNum as string,\n\t\tGrpCd as string,\n\t\tCustAccountGrpCd as string,\n\t\tCustClassificationCd as string,\n\t\tCountryKeyCd as string,\n\t\tVendorAccountNum as string,\n\t\tCustCntralDeliveryBlockCd as string,\n\t\tCityCoordinatesVal as string,\n\t\tMasterRecordDeletionInd as string,\n\t\tName1Desc as string,\n\t\tName2Desc as string,\n\t\tName3Desc as string,\n\t\tName4Desc as string,\n\t\tNielsenIDCd as string,\n\t\tCityName as string,\n\t\tDistrictName as string,\n\t\tPOBoxNum as string,\n\t\tPOBoxPostalCd as string,\n\t\tPostalCd as string,\n\t\tRegionCd as string,\n\t\tCountryCd as string,\n\t\tCityCd as string,\n\t\tRegionalMarketCd as string,\n\t\tSortFieldDesc as string,\n\t\tCentralPostingBlockInd as string,\n\t\tLanguageCd as string,\n\t\tTax1Num as string,\n\t\tTax2Num as string,\n\t\tBusPartnerEqualizationTaxInd as string,\n\t\tLiableForVATInd as string,\n\t\tHouseNumAndStreetDesc as string,\n\t\tTeleboxNumTxt as string,\n\t\tFirstTelNum as string,\n\t\tSecondTelNum as string,\n\t\tFaxNum as string,\n\t\tTeletaxNum as string,\n\t\tTelexNum as string,\n\t\tTransportationZoneCd as string,\n\t\tIsOneTimeAccountInd as string,\n\t\tIfAlternativePayeeAllowedInd as string,\n\t\tTradingPartnerCompanyCd as string,\n\t\tVATRegistrationNum as string,\n\t\tIsCompetitorInd as string,\n\t\tIsSalesPartnerInd as string,\n\t\tIsSalesProspectInd as string,\n\t\tCustType4Ind as string,\n\t\tSoldToPartyCd as string,\n\t\tIsConsumerInd as string,\n\t\tLegalStatusCd as string,\n\t\tIndustry1Cd as string,\n\t\tIndustry2Cd as string,\n\t\tIndustry3Cd as string,\n\t\tIndustry4Cd as string,\n\t\tIndustry5Cd as string,\n\t\tInitialContactCd as string,\n\t\tAnnualSalesNum as string,\n\t\tAnnualSalesYearTxt as string,\n\t\tSalesFigCurCd as string,\n\t\tYearlyCountOfEmpNum as string,\n\t\tYearForNumOfEmpTxt as string,\n\t\tAttr1Cd as string,\n\t\tAttr2Cd as string,\n\t\tAttr3Cd as string,\n\t\tAttr4Cd as string,\n\t\tCustLeadDivisionCd as string,\n\t\tAttr6Cd as string,\n\t\tAttr7Cd as string,\n\t\tAttr8Cd as string,\n\t\tAttr9Cd as string,\n\t\tAttr10Cd as string,\n\t\tNaturalPersonName as string,\n\t\tAnnualSalesNum2 as string,\n\t\tTaxJurisdictionCd as string,\n\t\tMatchCdSearchTerm1Desc as string,\n\t\tMatchCdSearchTerm2Desc as string,\n\t\tMatchCdSearchTerm3Desc as string,\n\t\tFiscalYearVariantCd as string,\n\t\tUsageInd as string,\n\t\tCustInspectionInd as string,\n\t\tOutboundDeliveryNoteInspectionInd as string,\n\t\tReferenceAccountGrpCd as string,\n\t\tPOBoxCityName as string,\n\t\tPlantCd as string,\n\t\tMediumOfDataExchangeInd as string,\n\t\tMediumOfDataExchangeInstructionCd as string,\n\t\tDataTransferStatusInd as string,\n\t\tAssignmentToHierarchyCd as string,\n\t\tPaymentBlockCd as string,\n\t\tCustPlantGrpISRLabelCd as string,\n\t\tNonMilitaryUseInd as string,\n\t\tMilitaryUseInd as string,\n\t\tCustConditionGrp1Cd as string,\n\t\tCustConditionGrp2Cd as string,\n\t\tCustConditionGrp3Cd as string,\n\t\tCustConditionGrp4Cd as string,\n\t\tCustConditionGrp5Cd as string,\n\t\tAlternativePayerUsingAccountNumInd as string,\n\t\tTaxTypeCd as string,\n\t\tTaxNumTypeCd as string,\n\t\tTaxNbr3Cd as string,\n\t\tTaxNbr4Cd as string,\n\t\tICMSExemptCustInd as string,\n\t\tIPIExemptCustInd as string,\n\t\tCustGrpCd as string,\n\t\tCustCFOPCatCd as string,\n\t\tICMSTaxLawCd as string,\n\t\tIPITaxLawCd as string,\n\t\tBiochemicalWarfareForLegalControlInd as string,\n\t\tNuclearProliferationForLegalControlInd as string,\n\t\tNationalSecurityForLegalControlInd as string,\n\t\tMissileTechnologyForLegalControlInd as string,\n\t\tCustCentralSalesBlockInd as string,\n\t\tUniformResourceLocatorTxt as string,\n\t\tNameDesc as string,\n\t\tEBSBilWDlvry as string,\n\t\tBusPartnerCatgCd as string,\n\t\tBusPartnerTypeCd as string,\n\t\tBusPartnerGroupingCd as string,\n\t\tExternalSysBusPartnerNum as string,\n\t\tBusPartnerSearchTerm1Txt as string,\n\t\tBusPartnerSearchTerm2Txt as string,\n\t\tDataOriginTypeCd as string,\n\t\tAddressKeyFormCd as string,\n\t\tCentralArchiveInd as string,\n\t\tBusPartnerCentralBlockCd as string,\n\t\tSalutationTxt as string,\n\t\tBusPartnerContactPermissionCd as string,\n\t\tBusPartnerPrntFrmtCd as string,\n\t\tEBSMSDSLanguage1Cd as string,\n\t\tEBSMSDSLanguage2Cd as string,\n\t\tEBSMSDSLanguage3Cd as string,\n\t\tEBSMSDSLanguage4Cd as string,\n\t\tEBSCPrPoisonClsfCd as string,\n\t\tEBSWEENumCd as string,\n\t\tEBSInvOutputCd as string,\n\t\tEBSCustConditionGrp1Cd as string,\n\t\tEBSCustConditionGrp2Cd as string,\n\t\tEBSCustConditionGrp3Cd as string,\n\t\tEBSCustConditionGrp4Cd as string,\n\t\tEBSCustConditionGrp5Cd as string,\n\t\tEBSBrandOwnerName as string,\n\t\tEBSBrandName as string,\n\t\tEBSCustOutletCd as string,\n\t\tEBSCommercialCd as string,\n\t\tEBSCommercialName as string,\n\t\tEBSSiteNum as string,\n\t\tEBSSiteDesc as string,\n\t\tEBSGenID as string,\n\t\tEBSPersonalHRNum as string,\n\t\tEBSActiveDirectoryAcctName as string,\n\t\tEBSBlanketPONum as string,\n\t\tEBSIntOutletNum as string,\n\t\tEBSBillingWDeliveryCd as string,\n\t\tEBSBillBackClassificationCd as string,\n\t\tEBSPOUOnHeaderCd as string,\n\t\tEBSOrderConfirmCd as string,\n\t\tEBSGTAddrDesc as string,\n\t\tEBSSalesAllocRuleCd as string,\n\t\tEBSTerritoryCd as string,\n\t\tEBSAgreedPriceRequiredCd as string,\n\t\tEBSOwnershipCd as string,\n\t\tEBSCatgCd as string,\n\t\tEBSBusPartnerId as string,\n\t\tEBSSalesSkillCd as string,\n\t\tEBSBCMTypeCd as string,\n\t\tEBSDirectIndirectCustInd as string,\n\t\tEBSBusUnitCd as string,\n\t\tEBSSubBUCd as string,\n\t\tEBSDeliverOnOnlyDesc as string,\n\t\tEBSPalletJackReqdDesc as string,\n\t\tEBSLiftGateReqdDt as string,\n\t\tEBSDeliveryApptReqdCd as string,\n\t\tEBSDeliveryContactPersonName as string,\n\t\tEBSDeliveryContactInfoDesc as string,\n\t\tEBSDeliveryInstruction7Desc as string,\n\t\tEBSDeliveryInstructiont8Desc as string,\n\t\tEBSDeliveryInstructiont9Desc as string,\n\t\tEBSDeliveryInstructiont10Desc as string,\n\t\tEBSDeliveryInstruction11Desc as string,\n\t\tEBSCAMTerritoryCd as string,\n\t\tEBSReportDistributionCd as string,\n\t\tEBSMPPRLinkCd as string,\n\t\tEBSTerritoryCd1 as string,\n\t\tOrgName1 as string,\n\t\tOrgName2 as string,\n\t\tOrgName3 as string,\n\t\tOrgName4 as string,\n\t\tLegalFormOrgName as string,\n\t\tIndustrySectorCd as string,\n\t\tLegalEntityOrgName as string,\n\t\tOrgFoundedDt as string,\n\t\tLiduidationOrgDt as string,\n\t\tIntLocationNum1 as string,\n\t\tIntLocationNum2 as string,\n\t\tCheckDigitForIntLocationNum as string,\n\t\tBusPartnerLastName as string,\n\t\tBusPartnerFirstName as string,\n\t\tOtherLastName as string,\n\t\tBusPartnerBirthName as string,\n\t\tBusPartnerMiddleName as string,\n\t\tAcademicTitleCd as string,\n\t\tNamePrefixCd as string,\n\t\tBusPartnerNickname as string,\n\t\tMiddleInitialTxt as string,\n\t\tNameFormatRuleCountryCd as string,\n\t\tCorrespondenceLanguageCd as string,\n\t\tIfBusPartnerIsMaleInd as string,\n\t\tIfBusPartnerIsFemaleInd as string,\n\t\tBusPartnerBirthplaceName as string,\n\t\tBusPartnerMaritalStatusCd as string,\n\t\tNaturalPersonEmployerName as string,\n\t\tNationalityCd as string,\n\t\tPersonNum as string,\n\t\tIfBusPartnerSexIsNotKnownInd as string,\n\t\tObsoleteField2 as string,\n\t\tBusPartnerLanguageCd as string,\n\t\tBusPartnerBirthDt as string,\n\t\tBusPartnerDeathDt as string,\n\t\tPersonnelNum as string,\n\t\tObsoleteField3 as string,\n\t\tObsoleteField4 as string,\n\t\tGrpName1 as string,\n\t\tGrpName2 as string,\n\t\tSearchHelpField1Name as string,\n\t\tSearchHelpField2Name as string,\n\t\tObjectCreatedByName as string,\n\t\tObjectCreatedDt as string,\n\t\tObjectCreatedTm as string,\n\t\tObjChangedByName as string,\n\t\tObjectLastChangedDt as string,\n\t\tObjectLastChangedTm as string,\n\t\tBusPartnerGUID as string,\n\t\tIfPlannedChangedDocConvertedInd as string,\n\t\tBUT000BPDataValidityStartDt as string,\n\t\tBUT000BPDataValidityEndDt as string,\n\t\tIfBusPartnerIsNaturalPersonInd as string,\n\t\tBPTemplateID as string,\n\t\tBusPartnerCatgTextCd as string,\n\t\tShortDesc as string,\n\t\tMediumDesc as string,\n\t\tLongDesc as string,\n\t\tBusPartnerTextGUID as string,\n\t\tAddrValidFromDt as string,\n\t\tAddrValidToDt as string,\n\t\tFormOfAddrCd as string,\n\t\tCareOfDesc as string,\n\t\tNonPostalCityName as string,\n\t\tDifferentCityCd as string,\n\t\tRegionalStructureGroupingCd as string,\n\t\tCityPostalCd as string,\n\t\tCompanyPostalCd as string,\n\t\tPOBoxWithoutNumInd as string,\n\t\tPOBoxRegionCd as string,\n\t\tPOBoxCountry as string,\n\t\tStreetName as string,\n\t\tStreetNumDesc as string,\n\t\tHouseNum as string,\n\t\tSupplementHouseNum as string,\n\t\tStreet2Name as string,\n\t\tStreet3Name as string,\n\t\tStreet4Name as string,\n\t\tStreet5Name as string,\n\t\tBuildingCd as string,\n\t\tFloorCd as string,\n\t\tRoomAptNum as string,\n\t\tPersonalAddrFlagCd as string,\n\t\tSearchTerm1Txt as string,\n\t\tSearchTerm2Txt as string,\n\t\tFirstTelExtnCd as string,\n\t\tFirstFaxExtnCd as string,\n\t\tExtenstion1Cd as string,\n\t\tExtenstion2Cd as string,\n\t\tAddrTmZoneCd as string,\n\t\tEmailAddrTxt as string,\n\t\tURIFieldForTransferToBWTxt as string,\n\t\tDisplayFrmtTelNum as string,\n\t\tDisplayFrmtFaxNum as string,\n\t\tGeoLocationLongitudeVal as string,\n\t\tGeoLocationLatitudeVal as string,\n\t\tGeoLocationHeightVal as string,\n\t\tGeoLocationDataSourceCd as string,\n\t\tGeoLocationPrecisionCd as string,\n\t\tAddrNum2 as string,\n\t\tOneLineAddrDesc as string,\n\t\tOneLineAddrDesc2 as string,\n\t\tBPAddrLin0Desc as string,\n\t\tBPAddrLin1Desc as string,\n\t\tBPAddrLin2Desc as string,\n\t\tBPAddrLin3Desc as string,\n\t\tBPAddrLin4Desc as string,\n\t\tBPAddrLin5Desc as string,\n\t\tBPAddrLin6Desc as string,\n\t\tBPAddrLin7Desc as string,\n\t\tBPAddrLin8Desc as string,\n\t\tBPAddrLin9Desc as string,\n\t\tPricingHierarchyLevel1 as string,\n\t\tPricingHierarchyLevel1Desc as string,\n\t\tPricingHierarchyLevel2 as string,\n\t\tPricingHierarchyLevel2Desc as string,\n\t\tPricingHierarchyLevel3 as string,\n\t\tPricingHierarchyLevel3Desc as string,\n\t\tPricingHierarchyLevel4 as string,\n\t\tPricingHierarchyLevel4Desc as string,\n\t\tPricingHierarchyLevel5 as string,\n\t\tPricingHierarchyLevel5Desc as string,\n\t\tPricingHierarchyLevel6 as string,\n\t\tPricingHierarchyLevel6Desc as string,\n\t\tPricingHierarchyLevel7 as string,\n\t\tPricingHierarchyLevel7Desc as string,\n\t\tPricingHierLvl1Desc as string,\n\t\tPricingHierLvl2Desc as string,\n\t\tPricingHierLvl3Desc as string,\n\t\tPricingHierLvl4Desc as string,\n\t\tPricingHierLvl5Desc as string,\n\t\tPricingHierLvl6Desc as string,\n\t\tPricingHierLvl7Desc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tIsDeletedInd as string,\n\t\tMarketSegment1Desc as string,\n\t\tMarketSegment2Desc as string,\n\t\tEBSInsideDeliveryCd as string,\n\t\tEmailID as string,\n\t\tContactPersonCd as string,\n\t\tTelephoneCd as string,\n\t\tNightTimeDeliveryCd as string,\n\t\tIDNum as string,\n\t\tInstitutionCd as string,\n\t\tIDNumValidStartDt as string,\n\t\tIDNumValidEndDt as string,\n\t\tSalesOrgCd as string,\n\t\tAddress as string,\n\t\tCustNameCityNumber as string,\n\t\tCustNameNumber as string,\n\t\tEBSSiteNumName as string,\n\t\tDunningProcedureCd as string,\n\t\tInstMarketSegment1Desc as string,\n\t\tInstMarketSegment2Desc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_dim_customer+$file_dim_customer+$file_extension_tsv)]) ~> DimCustomer\nsource(output(\n\t\tBaseCustomerHierKey as long,\n\t\tCustomerNum as string,\n\t\tSiteZipClassCd as string,\n\t\tSiteGCityClassCd as string,\n\t\tSiteGCountryClassCd as string,\n\t\tSiteGAddress1ClassCd as string,\n\t\tSiteGAddress2ClassCd as string,\n\t\tSiteGStateCd as string,\n\t\tSiteGClassName as string,\n\t\tSiteGClass1Name as string,\n\t\tSite_Id as string,\n\t\tBaseCustHierarchyLevel1 as string,\n\t\tBaseCustHierarchyLevel1Desc as string,\n\t\tBaseCustHierarchyLevel2 as string,\n\t\tBaseCustHierarchyLevel2Desc as string,\n\t\tBaseCustHierarchyLevel3 as string,\n\t\tBaseCustHierarchyLevel3Desc as string,\n\t\tBaseCustHierarchyLevel4 as string,\n\t\tBaseCustHierarchyLevel4Desc as string,\n\t\tBaseCustHierarchyLevel5 as string,\n\t\tBaseCustHierarchyLevel5Desc as string,\n\t\tPublishDt as string,\n\t\tBaseHierType as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tSalesOrgCd as string,\n\t\tSiteIDName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_dim_base_customer_hierarchy+$file_dim_base_customer_hierarchy+$file_extension_tsv)]) ~> DimBaseCustomerHierarchy\nsource(output(\n\t\tCustomerCd as string,\n\t\tEBSCustNum as string,\n\t\tBillbackCd as string,\n\t\tDistChannelCd as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_SALES_LKP_CUSTOMER_XREF+$file_SALES_LKP_CUSTOMER_XREF+$file_extension_tsv)]) ~> SalesLkpCustomerXref\nsource(output(\n\t\tDISequenceNum as string,\n\t\tDIOperationTypeCd as string,\n\t\tCancelDataRecInd as string,\n\t\tSalesDistDocumentNum as string,\n\t\tBillingDocumentPostingStatusCd as string,\n\t\tIntercompanyBillingTotalStatusCd as string,\n\t\tOrderBillingStatusCd as string,\n\t\tBillingStatusCd as string,\n\t\tOverallBillingBlockStatusCd as string,\n\t\tOverallProcessingStatusCd as string,\n\t\tOverallBlockedStatusCd as string,\n\t\tSDDocumentItemNum as string,\n\t\tChangesOnDt as string,\n\t\tCompanyCd as string,\n\t\tSalesDistrictCd as string,\n\t\tBillingTypeCd as string,\n\t\tBillingDt as string,\n\t\tBillingCatCd as string,\n\t\tLocalCurCd as string,\n\t\tCustGrpCd as string,\n\t\tSoldToPartyCd as string,\n\t\tPayerCd as string,\n\t\tFIPostingsExchangeRate as string,\n\t\tExchangeRateTypeCd as string,\n\t\tStatisticsCurCd as string,\n\t\tSDDocumentCatg1Cd as string,\n\t\tSalesOrgCd as string,\n\t\tDistChannelCd as string,\n\t\tSDDocumentCurCd as string,\n\t\tFiscalYear as string,\n\t\tPostingPeriodTm as string,\n\t\tTransferToAccountingStatusCd as string,\n\t\tAssignNumCd as string,\n\t\tPromotionCd as string,\n\t\tSalesDocumentNum as string,\n\t\tSalesDocumentItemNum as string,\n\t\tRebateBasis1Val as string,\n\t\tVolumeRebateGrpCd as string,\n\t\tGrossWeightQty as string,\n\t\tBillingItemDocumentCurGrossVal as string,\n\t\tApplicationComponentCd as string,\n\t\tSAPBWTransactionKeyCd as string,\n\t\tBatchNum as string,\n\t\tIntArticleNum as string,\n\t\tRecordCreatedDt as string,\n\t\tBillingPlanRuleCd as string,\n\t\tServicesRenderedDt as string,\n\t\tActualInvoicedQty as string,\n\t\tStockkeepingUnitBillingQty as string,\n\t\tWeightUnitMeas as string,\n\t\tSalesDealCd as string,\n\t\tControllingAreaCd as string,\n\t\tCostCenterCd as string,\n\t\tPriceDeterminationExchangeRate as string,\n\t\tTranslationDt as string,\n\t\tCustGrp1Cd as string,\n\t\tCustGrp2Cd as string,\n\t\tCustGrp3Cd as string,\n\t\tCustGrp4Cd as string,\n\t\tCustGrp5Cd as string,\n\t\tPricingProcedureConditionSubtotal1Amt as string,\n\t\tPricingProcedureConditionSubtotal2Amt as string,\n\t\tPricingProcedureConditionSubtotal3Amt as string,\n\t\tPricingProcedureConditionSubtotal4Amt as string,\n\t\tPricingProcedureConditionSubtotal5Amt as string,\n\t\tPricingProcedureConditionSubtotal6Amt as string,\n\t\tStorageLocationCd as string,\n\t\tMatMgmtRequiredQty as string,\n\t\tMatGrpCd as string,\n\t\tMatNum as string,\n\t\tMatEnteredNum as string,\n\t\tBaseUoMMeas as string,\n\t\tMatGrp1Cd as string,\n\t\tMatGrp2Cd as string,\n\t\tMatGrp3Cd as string,\n\t\tMatGrp4Cd as string,\n\t\tMatGrp5Cd as string,\n\t\tDocumentCurTaxAmt as string,\n\t\tBillingItemNetVal as string,\n\t\tNetWeightQty as string,\n\t\tBillToPartyCd as string,\n\t\tShipToPartyCd as string,\n\t\tItemTypeCd as string,\n\t\tProductHierarchyCd as string,\n\t\tCommisionGrpCd as string,\n\t\tPricingExchangeRateDt as string,\n\t\tSalesDocumentItemCatgCd as string,\n\t\tSalesEmpCd as string,\n\t\tCashDiscountEligibleAmt as string,\n\t\tBaseUoMScaleQty as string,\n\t\tOrderHeaderDivisionCd as string,\n\t\tDivisionCd as string,\n\t\tStatisticsDt as string,\n\t\tStatisticsExchangeRate as string,\n\t\tSalesQtyToSKUConversionDenominatorQty as string,\n\t\tSalesQtyToSKUConversionNumeratorQty as string,\n\t\tStatisticsUpdateDt as string,\n\t\tReferenceDocumentNum as string,\n\t\tReferenceItemNum as string,\n\t\tSalesOfficeCd as string,\n\t\tSalesGrpCd as string,\n\t\tVolumeUnitMeas as string,\n\t\tVolumeQty as string,\n\t\tSalesUnitCd as string,\n\t\tShippingPointCd as string,\n\t\tDocumentCurCostAmt as string,\n\t\tPlantCd as string,\n\t\tDocumentCurGrossVal as string,\n\t\tSalesTypeCd as string,\n\t\tTotalQty1 as string,\n\t\tStatisticsUOMTotalQty as string,\n\t\tTotalQty2 as string,\n\t\tStatisticsUoMBillingQty as string,\n\t\tDepartureCountryCd as string,\n\t\tOrderNum as string,\n\t\tOrderReasonTxt as string,\n\t\tSalesDocumentReferenceCd as string,\n\t\tSDDocumentCatgCd as string,\n\t\tAccountingInd as string,\n\t\tPlantCatgCd as string,\n\t\tItemCreditPriceVal as string,\n\t\tAgreedDeliveryTm as string,\n\t\tPurchasingGrpCd as string,\n\t\tPurchasingOrgCd as string,\n\t\tPurchasingAreaCd as string,\n\t\tObjectCreatedByName as string,\n\t\tEntryTm as string,\n\t\tFunctionalAreaCd as string,\n\t\tBillingPlanItemCd as string,\n\t\tEntryTm1 as string,\n\t\tVendorMatNum as string,\n\t\tAccountAssignmentGrpCd as string,\n\t\tSalesOrderDestinationCountryCd as string,\n\t\tMatTypeCd as string,\n\t\tOpenBillingDocumentCreditVal as string,\n\t\tTotalOpenBillingDocumentCreditVal as string,\n\t\tOpenBillingDocumentQty as string,\n\t\tOpenDeliveryCreditVal as string,\n\t\tTotalOpenDeliveryCreditVal as string,\n\t\tSoldToParty1Cd as string,\n\t\tProfitCenterCd as string,\n\t\tItemReturnedInd as string,\n\t\tBaseUoMSalesQty as string,\n\t\tGenerallyIncompleteInd as string,\n\t\tEBSAgreeNum as string,\n\t\tEBSAgreeTypCd as string,\n\t\tWorkBreakdownStructureElementCd as string,\n\t\tNumOfBillingItemNum as string,\n\t\tFiscalYearVariantCd as string,\n\t\tReferredSalesOrderItemCampaignCd as string,\n\t\tCustCd as string,\n\t\tPrecedingSalesDistDocumentCd as string,\n\t\tCust1Cd as string,\n\t\tPayer1Cd as string,\n\t\tSoldToParty2Num as string,\n\t\tBillToParty1Num as string,\n\t\tShipToParty1Num as string,\n\t\tODQChangeModeCd as string,\n\t\tODQEntityCntrCd as string,\n\t\tFileCreatedDtTm as string,\n\t\tFileName as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tIsReversedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_2LIS_13_VDITM+$file_2LIS_13_VDITM+$file_extension_tsv)]) ~> LIS13VDITM\nsource(output(\n\t\tDISequenceNum as string,\n\t\tDIOperationTypeCd as string,\n\t\tCompanyCd as string,\n\t\tFiscalYearDt as string,\n\t\tAccountingDocNum as string,\n\t\tLineItemNum as string,\n\t\tSubItemnum as string,\n\t\tFIItemStatusCd as string,\n\t\tCustomerNum as string,\n\t\tCreditControlAreaCd as string,\n\t\tDunninAreaMeas as string,\n\t\tAccountTypeCd as string,\n\t\tGLInd as string,\n\t\tAccountingDocTypeCd as string,\n\t\tPostingKeyCd as string,\n\t\tFiscalYearVariantCd as string,\n\t\tDocDt as string,\n\t\tDocPostingDt as string,\n\t\tAccDocEnterDt as string,\n\t\tClearDt as string,\n\t\tLastDunnDt as string,\n\t\tPaymentDueDt as string,\n\t\tTerms1CashDiscountDueDt as string,\n\t\tTerms2CashDiscountDueDt as string,\n\t\tBaselineDueDtForDueDtCalc as string,\n\t\tFirstCashDiscDaysTm as string,\n\t\tSecondCashDiscDaysTm as string,\n\t\tNetPayTermsTm as string,\n\t\tCashDisc1Pct as string,\n\t\tCashDisc2Pct as string,\n\t\tCountrCd as string,\n\t\tPaymentMethodCd as string,\n\t\tPaymentKeyTermsCd as string,\n\t\tPayBlockKeyCd as string,\n\t\tPaymentReasonCd as string,\n\t\tDunningBlockCd as string,\n\t\tDunningCd as string,\n\t\tDunningLevCd as string,\n\t\tLocalCurrCd as string,\n\t\tLocalCurrDebitAmt as string,\n\t\tLocalCurrCreditAmt as string,\n\t\tLocalCurrSignedAmt as string,\n\t\tLocalCurrCashDiscountAmt as string,\n\t\tCurrencyCd as string,\n\t\tDocCurrDebitAmt as string,\n\t\tDocCurrCreditAmt as string,\n\t\tSignedForeignAmt as string,\n\t\tEligibleDocDiscountAmt as string,\n\t\tDocDiscountAmt as string,\n\t\tChartOfAccountsCd as string,\n\t\tGLAccountCd as string,\n\t\tGLAccountNum as string,\n\t\tBranchAccountnum as string,\n\t\tClearingDocnum as string,\n\t\tReferDocNum as string,\n\t\tTxnInvoicenum as string,\n\t\tInvoiceFiscalyearNum as string,\n\t\tInvoicelineItemCd as string,\n\t\tSalesDistrDocNum as string,\n\t\tBusinessPartnerRefKey1Cd as string,\n\t\tBusinessPartnerRefKey2Cd as string,\n\t\tLineItemRefKeyCd as string,\n\t\tItemTxt as string,\n\t\tNegativePostingInd as string,\n\t\tDocArchiveInd as string,\n\t\tSplGLTransactiontypeCd as string,\n\t\tRecordModeCd as string,\n\t\tAssignmentNum as string,\n\t\tReferenceTxnAmt as string,\n\t\tReferenceKeyCd as string,\n\t\tDocstatusCd as string,\n\t\tLocalCurrAmt as string,\n\t\tLocalCurr2Amt as string,\n\t\tLocalCurr3Amt as string,\n\t\tFiscalYearNum as string,\n\t\tSecondCurrencyKeyCd as string,\n\t\tThirdCurrencyKeyCd as string,\n\t\tFiscalPeriodDt as string,\n\t\tWBSElementCd as string,\n\t\tDebitCreditInd as string,\n\t\tDocCurrencyAmt as string,\n\t\tProfitCenterCd as string,\n\t\tInternalDocHeaderKey as string,\n\t\tODQChangeModeCd as string,\n\t\tODQEntityCntrCd as string,\n\t\tFileCreatedDtTm as string,\n\t\tFileName as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tIsReversedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_0FI_AR_4+$file_0FI_AR_4+$file_extension_tsv)]) ~> FIAR4\nOToCAgingCntlDaily select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> cnt1\ncnt1 filter($SubjectAreacntl == $SubjectAreacntl && Status == 'S') ~> Filter1\nFilter1 aggregate(LastRunDate = max(toTimestamp(LastRunDate, 'MM/dd/yyyy HH:mm:ss'))) ~> maxdate\nFilter10 window(over(Payer),\n\tdesc(SoldTo, false),\n\tr = rowNumber()) ~> Window1\nWindow1 filter(r == 1) ~> Filter2\nFilter2 select(mapColumn(\n\t\tPayer,\n\t\tSoldTo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SoldToPayerLookup1\nBillingSoldTolookup window(over(BillingDocNum),\n\tdesc(SoldTo, false),\n\tr = rowNumber()) ~> Window2\nWindow2 filter(r == 1) ~> Filter3\nFilter3 select(mapColumn(\n\t\tBillingDocNum,\n\t\tSoldTo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> BillingSoldTolookup1\nDimCustomer window(over(CustomerNum),\n\tdesc(CustomerKey, false),\n\tr = rowNumber()) ~> Window3\nWindow3 filter(r == 1) ~> Filter4\nFilter4 select(mapColumn(\n\t\tCustomerKey,\n\t\tCustomerNum,\n\t\tDunningProcedureCd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Customer\nDimBaseCustomerHierarchy window(over(CustomerNum),\n\tdesc(BaseCustomerHierKey, false),\n\tr = rowNumber()) ~> Window4\nWindow4 filter(r == 1) ~> Filter5\nFilter5 select(mapColumn(\n\t\tBaseCustomerHierKey,\n\t\tCustomerNum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Customerhier\nSalesLkpCustomerXref window(over(EBSCustNum),\n\tdesc(toTimestamp(LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss'), false),\n\tr = rowNumber()) ~> Window5\nWindow5 filter(r == 1) ~> Filter6\nFilter6 select(mapColumn(\n\t\tLegacyCustomerCd = CustomerCd,\n\t\tEBSCustNum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Customerxref\nLIS13VDITM window(over(SalesDistDocumentNum),\n\tdesc(toTimestamp(LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss'), false),\n\tr = rowNumber()) ~> Window6\nWindow6 filter(r == 1) ~> Filter7\nFilter7 select(mapColumn(\n\t\tSalesDistDocumentNum,\n\t\tBillToParty1Num\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> BillingDocumentItemData\nFIAR4, maxdate join(1 == 1 || DISequenceNum == 'Dummy' || LastRunDate == toTimestamp('01/01/9999 01:01:01'),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> CrossJoinMaxDate\nCrossJoinMaxDate filter(toTimestamp(LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss') > LastRunDate) ~> Filter8\nFilter8 derive(CompanyCd = trim(CompanyCd),\n\t\tPayerCustomerNum = trim(CustomerNum),\n\t\tDocPostingDt = case(\n    isNull(DocPostingDt), '19000101', DocPostingDt\n),\n\t\tPaymentDueDt = case(\n    isNull(PaymentDueDt), '19000101', PaymentDueDt\n),\n\t\tLocalCurrSignedAmt = toDouble(case(\n    isNull(LocalCurrSignedAmt), '0', LocalCurrSignedAmt\n)),\n\t\tBranchAccountnum = toString(\n    case(\n        isNull(trim(BranchAccountnum)), '', trim(BranchAccountnum)\n    )\n),\n\t\tBillingDoc = case(\n    toLong(\n        case(\n            regexMatch(trim(AccountingDocNum), '^[0-9]+$') && trim(AccountingDocNum) != '',\n            trim(AccountingDocNum),\n            '0'\n        )) >= toLong('6000000000')\n        && \n     toLong(\n        case(\n            regexMatch(trim(AccountingDocNum), '^[0-9]+$') && trim(AccountingDocNum) != '',\n            trim(AccountingDocNum),\n            '0'\n        )) <= toLong('7999999999')\n        &&\nAccountingDocTypeCd != 'U1' && AccountingDocTypeCd != 'DZ',\ntrim(AccountingDocNum),\n\ncase(       \n    toLong(\n        case(\n            regexMatch(trim(AssignmentNum), '^[0-9]+$') && trim(AssignmentNum) != '',\n            trim(AssignmentNum),\n            '0'\n        )) >= toLong('6000000000') \n        && \n     toLong(\n        case(\n            regexMatch(trim(AssignmentNum), '^[0-9]+$') && trim(AssignmentNum) != '',\n            trim(AssignmentNum),\n            '0'\n        )) <= toLong('7999999999')\n        &&\nAccountingDocTypeCd != 'U1',\ntrim(AssignmentNum),\n\ncase(\n    AccountingDocTypeCd == 'U1', trim(SalesDistrDocNum),\n\n\ncase(\n    AccountingDocTypeCd != 'RV' && AccountingDocTypeCd != 'U1' && AccountingDocTypeCd != 'R1'\n    &&\n    toLong(\n        case(\n            regexMatch(trim(TxnInvoicenum), '^[0-9]+$') && trim(TxnInvoicenum) != '',\n            trim(TxnInvoicenum),\n            '0'\n        )) >=  toLong('6000000000') \n   &&\n    toLong(\n        case(\n            regexMatch(trim(TxnInvoicenum), '^[0-9]+$') && trim(TxnInvoicenum) != '',\n            trim(TxnInvoicenum),\n            '0'\n        )) <=  toLong('7999999999'), \n        trim(TxnInvoicenum),\n        trim(AccountingDocNum)\n))))) ~> DerivedColumn1\nFilter11 select(mapColumn(\n\t\tDISequenceNum,\n\t\tDIOperationTypeCd,\n\t\tBillingDoc,\n\t\tCompanyCd,\n\t\tFiscalYearDt,\n\t\tAccountingDocNum,\n\t\tLineItemNum,\n\t\tSubItemnum,\n\t\tFIItemStatusCd,\n\t\tPayerCustomerNum,\n\t\tCreditControlAreaCd,\n\t\tDunninAreaMeas,\n\t\tAccountTypeCd,\n\t\tGLInd,\n\t\tAccountingDocTypeCd,\n\t\tPostingKeyCd,\n\t\tFiscalYearVariantCd,\n\t\tDocDt,\n\t\tDocPostingDt,\n\t\tAccDocEnterDt,\n\t\tClearDt,\n\t\tLastDunnDt,\n\t\tPaymentDueDt,\n\t\tTerms1CashDiscountDueDt,\n\t\tTerms2CashDiscountDueDt,\n\t\tBaselineDueDtForDueDtCalc,\n\t\tFirstCashDiscDaysTm,\n\t\tSecondCashDiscDaysTm,\n\t\tNetPayTermsTm,\n\t\tCashDisc1Pct,\n\t\tCashDisc2Pct,\n\t\tCountrCd,\n\t\tPaymentMethodCd,\n\t\tPaymentKeyTermsCd,\n\t\tPayBlockKeyCd,\n\t\tPaymentReasonCd,\n\t\tDunningBlockCd,\n\t\tDunningCd,\n\t\tDunningLevCd,\n\t\tLocalCurrCd,\n\t\tLocalCurrDebitAmt,\n\t\tLocalCurrCreditAmt,\n\t\tLocalCurrSignedAmt,\n\t\tLocalCurrCashDiscountAmt,\n\t\tCurrencyCd,\n\t\tDocCurrDebitAmt,\n\t\tDocCurrCreditAmt,\n\t\tSignedForeignAmt,\n\t\tEligibleDocDiscountAmt,\n\t\tDocDiscountAmt,\n\t\tChartOfAccountsCd,\n\t\tGLAccountCd,\n\t\tGLAccountNum,\n\t\tBranchAccountnum,\n\t\tClearingDocnum,\n\t\tReferDocNum,\n\t\tTxnInvoicenum,\n\t\tInvoiceFiscalyearNum,\n\t\tInvoicelineItemCd,\n\t\tSalesDistrDocNum,\n\t\tBusinessPartnerRefKey1Cd,\n\t\tBusinessPartnerRefKey2Cd,\n\t\tLineItemRefKeyCd,\n\t\tItemTxt,\n\t\tNegativePostingInd,\n\t\tDocArchiveInd,\n\t\tSplGLTransactiontypeCd,\n\t\tRecordModeCd,\n\t\tAssignmentNum,\n\t\tReferenceTxnAmt,\n\t\tReferenceKeyCd,\n\t\tDocstatusCd,\n\t\tLocalCurrAmt,\n\t\tLocalCurr2Amt,\n\t\tLocalCurr3Amt,\n\t\tFiscalYearNum,\n\t\tSecondCurrencyKeyCd,\n\t\tThirdCurrencyKeyCd,\n\t\tFiscalPeriodDt,\n\t\tWBSElementCd,\n\t\tDebitCreditInd,\n\t\tDocCurrencyAmt,\n\t\tProfitCenterCd,\n\t\tInternalDocHeaderKey,\n\t\tODQChangeModeCd,\n\t\tODQEntityCntrCd,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tJobId,\n\t\tFileCreatedDtTm,\n\t\tFileName,\n\t\tIsReversedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> AgingExplExtract1\nAgingExplExtract1, BillingSoldTolookup1 join(BillingDoc === BillingDocNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinbillingsoldto\nSelect4, SoldToPayerLookup1 join(PayerCustomerNum === Payer,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinsoldtopayer\nSelect5, BillingDocumentItemDataU1 join(SalesDistrDocNum === SalesDistDocumentNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinBillingDocumentItemDataU1\nSelect1, BillingDocumentItemDataNonU1 join(BillingDoc === BillingDocumentItemDataNonU1@SalesDistDocumentNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinBillingDocumentItemDataNonU1\nLeftJoinBillingDocumentItemDataU1 select(mapColumn(\n\t\tDISequenceNum,\n\t\tDIOperationTypeCd,\n\t\tBillingDoc,\n\t\tCompanyCd,\n\t\tFiscalYearDt,\n\t\tAccountingDocNum,\n\t\tLineItemNum,\n\t\tSubItemnum,\n\t\tFIItemStatusCd,\n\t\tPayerCustomerNum,\n\t\tCreditControlAreaCd,\n\t\tDunninAreaMeas,\n\t\tAccountTypeCd,\n\t\tGLInd,\n\t\tAccountingDocTypeCd,\n\t\tPostingKeyCd,\n\t\tFiscalYearVariantCd,\n\t\tDocDt,\n\t\tDocPostingDt,\n\t\tAccDocEnterDt,\n\t\tClearDt,\n\t\tLastDunnDt,\n\t\tPaymentDueDt,\n\t\tTerms1CashDiscountDueDt,\n\t\tTerms2CashDiscountDueDt,\n\t\tBaselineDueDtForDueDtCalc,\n\t\tFirstCashDiscDaysTm,\n\t\tSecondCashDiscDaysTm,\n\t\tNetPayTermsTm,\n\t\tCashDisc1Pct,\n\t\tCashDisc2Pct,\n\t\tCountrCd,\n\t\tPaymentMethodCd,\n\t\tPaymentKeyTermsCd,\n\t\tPayBlockKeyCd,\n\t\tPaymentReasonCd,\n\t\tDunningBlockCd,\n\t\tDunningCd,\n\t\tDunningLevCd,\n\t\tLocalCurrCd,\n\t\tLocalCurrDebitAmt,\n\t\tLocalCurrCreditAmt,\n\t\tLocalCurrSignedAmt,\n\t\tLocalCurrCashDiscountAmt,\n\t\tCurrencyCd,\n\t\tDocCurrDebitAmt,\n\t\tDocCurrCreditAmt,\n\t\tSignedForeignAmt,\n\t\tEligibleDocDiscountAmt,\n\t\tDocDiscountAmt,\n\t\tChartOfAccountsCd,\n\t\tGLAccountCd,\n\t\tGLAccountNum,\n\t\tBranchAccountnum,\n\t\tClearingDocnum,\n\t\tReferDocNum,\n\t\tTxnInvoicenum,\n\t\tInvoiceFiscalyearNum,\n\t\tInvoicelineItemCd,\n\t\tSalesDistrDocNum,\n\t\tBusinessPartnerRefKey1Cd,\n\t\tBusinessPartnerRefKey2Cd,\n\t\tLineItemRefKeyCd,\n\t\tItemTxt,\n\t\tNegativePostingInd,\n\t\tDocArchiveInd,\n\t\tSplGLTransactiontypeCd,\n\t\tRecordModeCd,\n\t\tAssignmentNum,\n\t\tReferenceTxnAmt,\n\t\tReferenceKeyCd,\n\t\tDocstatusCd,\n\t\tLocalCurrAmt,\n\t\tLocalCurr2Amt,\n\t\tLocalCurr3Amt,\n\t\tFiscalYearNum,\n\t\tSecondCurrencyKeyCd,\n\t\tThirdCurrencyKeyCd,\n\t\tFiscalPeriodDt,\n\t\tWBSElementCd,\n\t\tDebitCreditInd,\n\t\tDocCurrencyAmt,\n\t\tProfitCenterCd,\n\t\tInternalDocHeaderKey,\n\t\tODQChangeModeCd,\n\t\tODQEntityCntrCd,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tJobId,\n\t\tFileCreatedDtTm,\n\t\tFileName,\n\t\tIsReversedInd,\n\t\tBillingDocNum,\n\t\tbilling_soldto_SoldTo,\n\t\tPayer,\n\t\tsoldto_payer_SoldTo,\n\t\tSalesDistDocumentNum,\n\t\tBillToParty1Num\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nLeftJoinBillingDocumentItemDataNonU1 derive(PastDue1To30DaysAmt = case(\n    toDate(PaymentDueDt,'yyyyMMdd') >=subDays(currentDate(),30) && toDate(PaymentDueDt,'yyyyMMdd') <=subDays(currentDate(),1),\n    LocalCurrSignedAmt, toDouble('0')\n),\n\t\tPastDue31To60DaysAmt = case(\n    toDate(PaymentDueDt,'yyyyMMdd') >=subDays(currentDate(),60) && toDate(PaymentDueDt,'yyyyMMdd') <=subDays(currentDate(),31),\n    LocalCurrSignedAmt, toDouble('0')\n),\n\t\tPastDue61To90DaysAmt = case(\n    toDate(PaymentDueDt,'yyyyMMdd') >=subDays(currentDate(),90) && toDate(PaymentDueDt,'yyyyMMdd') <=subDays(currentDate(),61),\n    LocalCurrSignedAmt, toDouble('0')\n),\n\t\tPastDue91PlusDaysAmt = case(\n toDate(PaymentDueDt,'yyyyMMdd') <=subDays(currentDate(),91),\n    LocalCurrSignedAmt, toDouble('0')\n),\n\t\tCurrentARAmt = case(\n    toDate(PaymentDueDt,'yyyyMMdd') >=currentDate(),\n    LocalCurrSignedAmt, toDouble('0')\n),\n\t\tAgingDate = case(\n    toTimestamp(toString(currentTimestamp(),'HH:mm:ss')) >= toTimestamp('00:00:00','HH:mm:ss')\n    &&\n    toTimestamp(toString(currentTimestamp(), 'HH:mm:ss')) <= toTimestamp('05:00:00','HH:mm:ss'),\n    toString(currentTimestamp(), 'MM/dd/yyyy'),\n    toString(subDays(currentTimestamp(),1),'MM/dd/yyyy') \n),\n\t\tURLTxt = '',\n\t\tOwner = '',\n\t\tBillToCustomer = case(\n    AccountingDocTypeCd == 'U1', Select1@BillToParty1Num,\ntoString(case(\n    AccountingDocTypeCd != 'U1' && !isNull(BillingDoc) && BillingDoc != '', BillingDocumentItemDataNonU1@BillToParty1Num,\n    toString(null())\n))\n),\n\t\tSoldToCustomer = case(\n    BranchAccountnum != '', BranchAccountnum,\ncase(\n    BranchAccountnum == '' && BillingDoc != '', billing_soldto_SoldTo,\ncase(BranchAccountnum == '' && BillingDoc == '', soldto_payer_SoldTo,\n    ''\n)\n)\n)) ~> DerivedColumn2\nDerivedColumn2 select(mapColumn(\n\t\tAccDocEnterDt,\n\t\tAccountingDocNum,\n\t\tAccountingDocTypeCd,\n\t\tAccountTypeCd,\n\t\tAgingDate,\n\t\tAssignmentNum,\n\t\tBaselineDueDtForDueDtCalc,\n\t\tBillingDoc,\n\t\tBillToCustomer,\n\t\tBranchAccountnum,\n\t\tBusinessPartnerRefKey1Cd,\n\t\tBusinessPartnerRefKey2Cd,\n\t\tCashDisc1Pct,\n\t\tCashDisc2Pct,\n\t\tChartOfAccountsCd,\n\t\tClearDt,\n\t\tClearingDocnum,\n\t\tCompanyCd,\n\t\tCountrCd,\n\t\tCreatedDtTm,\n\t\tCreditControlAreaCd,\n\t\tCurrencyCd,\n\t\tCurrentARAmt,\n\t\tDebitCreditInd,\n\t\tDIOperationTypeCd,\n\t\tDISequenceNum,\n\t\tDocArchiveInd,\n\t\tDocCurrCreditAmt,\n\t\tDocCurrDebitAmt,\n\t\tDocCurrencyAmt,\n\t\tDocDiscountAmt,\n\t\tDocDt,\n\t\tDocPostingDt,\n\t\tDocstatusCd,\n\t\tDunninAreaMeas,\n\t\tDunningBlockCd,\n\t\tDunningCd,\n\t\tDunningLevCd,\n\t\tEligibleDocDiscountAmt,\n\t\tFIItemStatusCd,\n\t\tFileCreatedDtTm,\n\t\tFileName,\n\t\tFirstCashDiscDaysTm,\n\t\tFiscalPeriodDt,\n\t\tFiscalYearDt,\n\t\tFiscalYearNum,\n\t\tFiscalYearVariantCd,\n\t\tGLAccountCd,\n\t\tGLAccountNum,\n\t\tGLInd,\n\t\tInternalDocHeaderKey,\n\t\tInvoiceFiscalyearNum,\n\t\tInvoicelineItemCd,\n\t\tIsReversedInd,\n\t\tItemTxt,\n\t\tJobId,\n\t\tLastDunnDt,\n\t\tLastUpdtDtTm,\n\t\tLineItemNum,\n\t\tLineItemRefKeyCd,\n\t\tLocalCurr2Amt,\n\t\tLocalCurr3Amt,\n\t\tLocalCurrAmt,\n\t\tLocalCurrCashDiscountAmt,\n\t\tLocalCurrCd,\n\t\tLocalCurrCreditAmt,\n\t\tLocalCurrDebitAmt,\n\t\tLocalCurrSignedAmt,\n\t\tNegativePostingInd,\n\t\tNetPayTermsTm,\n\t\tODQChangeModeCd,\n\t\tODQEntityCntrCd,\n\t\tOwner,\n\t\tPastDue1To30DaysAmt,\n\t\tPastDue31To60DaysAmt,\n\t\tPastDue61To90DaysAmt,\n\t\tPastDue91PlusDaysAmt,\n\t\tPayBlockKeyCd,\n\t\tPayerCustomerNum,\n\t\tPaymentDueDt,\n\t\tPaymentKeyTermsCd,\n\t\tPaymentMethodCd,\n\t\tPaymentReasonCd,\n\t\tPostingKeyCd,\n\t\tProfitCenterCd,\n\t\tRecordModeCd,\n\t\tReferDocNum,\n\t\tReferenceKeyCd,\n\t\tReferenceTxnAmt,\n\t\tSalesDistDocumentNum = Select1@SalesDistDocumentNum,\n\t\tSecondCashDiscDaysTm,\n\t\tSecondCurrencyKeyCd,\n\t\tSignedForeignAmt,\n\t\tSoldToCustomer,\n\t\tSplGLTransactiontypeCd,\n\t\tSubItemnum,\n\t\tTerms1CashDiscountDueDt,\n\t\tTerms2CashDiscountDueDt,\n\t\tThirdCurrencyKeyCd,\n\t\tTxnInvoicenum,\n\t\tURLTxt,\n\t\tWBSElementCd,\n\t\tSalesDistrDocNum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> LogicPopulation\nLogicPopulation, soldtocust join(SoldToCustomer === CustomerNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinsoldtocust\nLeftJoinsoldtocust, payercust join(PayerCustomerNum === payercust@CustomerNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinpayercust\nLeftJoinpayercust, soldtocusthier join(SoldToCustomer === soldtocusthier@CustomerNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinsoldtocusthier\nLeftJoinsoldtocusthier, payercusthier join(PayerCustomerNum === payercusthier@CustomerNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinpayercusthier\nLeftJoinpayercusthier, Customerxref join(SoldToCustomer === EBSCustNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinCustomerxref\nLeftJoinCustomerxref, BillTo join(BillToCustomer === BillTo@CustomerNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeftJoinBillTo\nLeftJoinBillTo derive(SoldToCustomerKey = case(\n    isNull(SoldToCustomer) || SoldToCustomer == '', toLong(-1),\ncase(\n    isNull(soldtocust@CustomerKey) || toString(soldtocust@CustomerKey) == '', toLong(-2),\n    soldtocust@CustomerKey\n)\n),\n\t\tPayerCustomerKey = case(\n    isNull(PayerCustomerNum) || PayerCustomerNum == '', toLong(-1),\ncase(\n    isNull(payercust@CustomerKey) || toString(payercust@CustomerKey) == '', toLong(-2),\n    payercust@CustomerKey\n)\n),\n\t\tBillToCustomerKey = case(\n    isNull(BillToCustomer) || BillToCustomer == '', toLong(-1),\ncase(\n    isNull(BillTo@CustomerKey) || toString(BillTo@CustomerKey) == '', toLong(-2),\n    BillTo@CustomerKey\n)\n),\n\t\tSoldToCustomerHierarchyKey = case(\n    isNull(SoldToCustomer) || SoldToCustomer == '', toLong(-1),\ncase(\n    isNull(soldtocusthier@BaseCustomerHierKey) || toString(soldtocusthier@BaseCustomerHierKey) == '', toLong(-2),\n    soldtocusthier@BaseCustomerHierKey\n)\n),\n\t\tPayerCustomerHierarchyKey = case(\n    isNull(PayerCustomerNum) || PayerCustomerNum == '',toLong(-1),\ncase(\n    isNull(payercusthier@BaseCustomerHierKey) || toString(payercusthier@BaseCustomerHierKey) == '', toLong(-2),\n    payercusthier@BaseCustomerHierKey\n)\n),\n\t\tCAMAlignmentKey = case(\n    isNull(SoldToCustomer) || SoldToCustomer == '', '-1',\n    SoldToCustomer\n),\n\t\tCurrentAlignmentKey = case(\n    isNull(SoldToCustomer) || SoldToCustomer == '', '-1',\n    SoldToCustomer\n),\n\t\tPreviousAlignmentKey = case(\n    isNull(SoldToCustomer) || SoldToCustomer == '', '-1',\n    SoldToCustomer\n),\n\t\tAgreementKey = case(\n    isNull(SoldToCustomer) || SoldToCustomer == '', '-1',\n    SoldToCustomer\n),\n\t\tTMvsCAMOwnership = case(\n    isNull(soldtocust@DunningProcedureCd) || soldtocust@DunningProcedureCd == '', 'CAM Ownership', 'TM Ownership'\n),\n\t\tLocalCurrSignedAmt = toString(LocalCurrSignedAmt),\n\t\tLegacySoldToCustomer = case(\n    AccountingDocTypeCd == 'U1', LegacyCustomerCd, ''\n),\n\t\tPastDue1To30DaysAmt = toString(PastDue1To30DaysAmt),\n\t\tPastDue31To60DaysAmt = toString(PastDue31To60DaysAmt),\n\t\tPastDue61To90DaysAmt = toString(PastDue61To90DaysAmt),\n\t\tPastDue91PlusDaysAmt = toString(PastDue91PlusDaysAmt),\n\t\tCurrentARAmt = toString(CurrentARAmt),\n\t\tPastDueARAmt = toString(PastDue1To30DaysAmt+PastDue31To60DaysAmt+PastDue61To90DaysAmt+PastDue91PlusDaysAmt),\n\t\tTotalARAmt = toString(PastDue1To30DaysAmt+PastDue31To60DaysAmt+PastDue61To90DaysAmt+PastDue91PlusDaysAmt+CurrentARAmt),\n\t\tCreatedDttm = toString(currentTimestamp(), 'MM/dd/yyyy HH:mm:ss'),\n\t\tLastUpdtDttm = toString(currentTimestamp(), 'MM/dd/yyyy HH:mm:ss'),\n\t\tJobId = $JobId) ~> DerivedColumn3\nDerivedColumn3 select(mapColumn(\n\t\tAccDocEnterDt,\n\t\tAccountingDocNum,\n\t\tAccountingDocTypeCd,\n\t\tAccountTypeCd,\n\t\tAgingDate,\n\t\tAgreementKey,\n\t\tAssignmentNum,\n\t\tBaselineDueDtForDueDtCalc,\n\t\tBillingDoc,\n\t\tBillToCustomer,\n\t\tBillToCustomerKey,\n\t\tBranchAccountnum,\n\t\tBusinessPartnerRefKey1Cd,\n\t\tBusinessPartnerRefKey2Cd,\n\t\tCAMAlignmentKey,\n\t\tCashDisc1Pct,\n\t\tCashDisc2Pct,\n\t\tChartOfAccountsCd,\n\t\tClearDt,\n\t\tClearingDocnum,\n\t\tCompanyCd,\n\t\tCountrCd,\n\t\tCreatedDttm = DerivedColumn3@CreatedDttm,\n\t\tCreditControlAreaCd,\n\t\tCurrencyCd,\n\t\tCurrentAlignmentKey,\n\t\tCurrentARAmt,\n\t\tDebitCreditInd,\n\t\tDIOperationTypeCd,\n\t\tDISequenceNum,\n\t\tDocArchiveInd,\n\t\tDocCurrCreditAmt,\n\t\tDocCurrDebitAmt,\n\t\tDocCurrencyAmt,\n\t\tDocDiscountAmt,\n\t\tDocDt,\n\t\tDocPostingDt,\n\t\tDocstatusCd,\n\t\tDunninAreaMeas,\n\t\tDunningBlockCd,\n\t\tDunningCd,\n\t\tDunningLevCd,\n\t\tDunningProcedureCd = payercust@DunningProcedureCd,\n\t\tEligibleDocDiscountAmt,\n\t\tFIItemStatusCd,\n\t\tFileCreatedDtTm,\n\t\tFileName,\n\t\tFirstCashDiscDaysTm,\n\t\tFiscalPeriodDt,\n\t\tFiscalYearDt,\n\t\tFiscalYearNum,\n\t\tFiscalYearVariantCd,\n\t\tGLAccountCd,\n\t\tGLAccountNum,\n\t\tGLInd,\n\t\tInternalDocHeaderKey,\n\t\tInvoiceFiscalyearNum,\n\t\tInvoicelineItemCd,\n\t\tIsReversedInd,\n\t\tItemTxt,\n\t\tJobId,\n\t\tLastDunnDt,\n\t\tLastUpdtDttm = DerivedColumn3@LastUpdtDttm,\n\t\tLegacySoldToCustomer,\n\t\tLineItemNum,\n\t\tLineItemRefKeyCd,\n\t\tLocalCurr2Amt,\n\t\tLocalCurr3Amt,\n\t\tLocalCurrAmt,\n\t\tLocalCurrCashDiscountAmt,\n\t\tLocalCurrCd,\n\t\tLocalCurrCreditAmt,\n\t\tLocalCurrDebitAmt,\n\t\tLocalCurrSignedAmt,\n\t\tNegativePostingInd,\n\t\tNetPayTermsTm,\n\t\tODQChangeModeCd,\n\t\tODQEntityCntrCd,\n\t\tOwner,\n\t\tPastDue1To30DaysAmt,\n\t\tPastDue31To60DaysAmt,\n\t\tPastDue61To90DaysAmt,\n\t\tPastDue91PlusDaysAmt,\n\t\tPastDueARAmt,\n\t\tPayBlockKeyCd,\n\t\tPayerCustomerHierarchyKey,\n\t\tPayerCustomerKey,\n\t\tPayerCustomerNum,\n\t\tPaymentDueDt,\n\t\tPaymentKeyTermsCd,\n\t\tPaymentMethodCd,\n\t\tPaymentReasonCd,\n\t\tPostingKeyCd,\n\t\tPreviousAlignmentKey,\n\t\tProfitCenterCd,\n\t\tRecordModeCd,\n\t\tReferDocNum,\n\t\tReferenceKeyCd,\n\t\tReferenceTxnAmt,\n\t\tSalesDistDocumentNum,\n\t\tSecondCashDiscDaysTm,\n\t\tSecondCurrencyKeyCd,\n\t\tSignedForeignAmt,\n\t\tSoldToCustomer,\n\t\tSoldToCustomerHierarchyKey,\n\t\tSoldToCustomerKey,\n\t\tSplGLTransactiontypeCd,\n\t\tSubItemnum,\n\t\tTerms1CashDiscountDueDt,\n\t\tTerms2CashDiscountDueDt,\n\t\tThirdCurrencyKeyCd,\n\t\tTMvsCAMOwnership,\n\t\tTotalARAmt,\n\t\tTxnInvoicenum,\n\t\tURLTxt,\n\t\tWBSElementCd,\n\t\tSalesDistrDocNum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FinalDailySet\nFinalDailySet derive(InvoiceNum = case(\n    AccountingDocTypeCd == 'U1', trim(ReferDocNum), trim(AccountingDocNum)\n)) ~> DerivedColumn4\nDerivedColumn4 select(mapColumn(\n\t\tSoldToCustomer,\n\t\tDunningProcedureCd,\n\t\tLegacySoldToCustomer,\n\t\tURLTxt,\n\t\tOwner,\n\t\tBillToCustomer,\n\t\tJobId,\n\t\tFileCreatedDtTm,\n\t\tFileName,\n\t\tCreatedDttm,\n\t\tLastUpdtDttm,\n\t\tDISequenceNum,\n\t\tDIOperationTypeCd,\n\t\tInvoiceNum,\n\t\tAgingDate,\n\t\tSoldToCustomerKey,\n\t\tPayerCustomerKey,\n\t\tBillToCustomerKey,\n\t\tSoldToCustomerHierarchyKey,\n\t\tPayerCustomerHierarchyKey,\n\t\tCAMAlignmentKey,\n\t\tCurrentAlignmentKey,\n\t\tPreviousAlignmentKey,\n\t\tAgreementKey,\n\t\tCompanyCd,\n\t\tFiscalYearDt,\n\t\tAccountingDocNum,\n\t\tLineItemNum,\n\t\tSubItemnum,\n\t\tFIItemStatusCd,\n\t\tPayer = PayerCustomerNum,\n\t\tTMvsCAMOwnership,\n\t\tCreditControlAreaCd,\n\t\tDunninAreaMeas,\n\t\tAccountTypeCd,\n\t\tGLInd,\n\t\tAccountingDocTypeCd,\n\t\tPostingKeyCd,\n\t\tFiscalVariantCd = FiscalYearVariantCd,\n\t\tDocDt,\n\t\tDocPostingDt,\n\t\tAccDocEnterDt,\n\t\tClearDt,\n\t\tLastDunnDt,\n\t\tNetDueDt = PaymentDueDt,\n\t\tPaymentDtToAvailDiscountI = Terms1CashDiscountDueDt,\n\t\tPaymentDtToAvailDiscountII = Terms2CashDiscountDueDt,\n\t\tBaselineDtForDueDtCalculation = BaselineDueDtForDueDtCalc,\n\t\tDaysToPayWithinToAvailDiscountI = FirstCashDiscDaysTm,\n\t\tDaysToPayWithinToAvailDiscountII = SecondCashDiscDaysTm,\n\t\tNetPayTermsTm,\n\t\tCashDiscountPctI = CashDisc1Pct,\n\t\tCashDiscountPctII = CashDisc2Pct,\n\t\tCountrCd,\n\t\tPaymentMethodCd,\n\t\tPaymentTermsCode = PaymentKeyTermsCd,\n\t\tPaymentBlockKey = PayBlockKeyCd,\n\t\tReasonCodes = PaymentReasonCd,\n\t\tDunningBlock = DunningBlockCd,\n\t\tDunningCd,\n\t\tDunningLevCd,\n\t\tLocalCurrCd,\n\t\tLocalCurrDebitAmt,\n\t\tLocalCurrCreditAmt,\n\t\tLocalCurrSignedAmt,\n\t\tDiscountTakenAndHonoured = LocalCurrCashDiscountAmt,\n\t\tCurrencyCd,\n\t\tDocCurrDebitAmt,\n\t\tDocCurrCreditAmt,\n\t\tSignedForeignAmt,\n\t\tEligibleDocDiscountAmt,\n\t\tDocDiscountAmt,\n\t\tChartOfAccountsCd,\n\t\tGLAccountCd,\n\t\tGLAccountNum,\n\t\tBranchAccountnum,\n\t\tClearingDocnum,\n\t\tReferDocNum,\n\t\tTxnInvoicenum,\n\t\tInvoiceFiscalyearNum,\n\t\tInvoicelineItemCd,\n\t\tSalesDistrDocNum,\n\t\tBusinessPartnerRefKey1Cd,\n\t\tBusinessPartnerRefKey2Cd,\n\t\tLineItemRefKeyCd,\n\t\tItemTxt,\n\t\tNegativePostingInd,\n\t\tDocArchiveInd,\n\t\tSplGLTransactiontypeCd,\n\t\tRecordModeCd,\n\t\tAssignmentNum,\n\t\tReferenceTxnAmt,\n\t\tReferenceKeyCd,\n\t\tDocstatusCd,\n\t\tLocalCurrAmt,\n\t\tAmountInSecondLocalCurrency = LocalCurr2Amt,\n\t\tAmountInThirdLocalCurrency = LocalCurr3Amt,\n\t\tFiscalYearNum,\n\t\tSecondCurrencyKeyCd,\n\t\tThirdCurrencyKeyCd,\n\t\tFiscalPeriodDt,\n\t\tWBSElementCd,\n\t\tDebitCreditInd,\n\t\tDocCurrencyAmt,\n\t\tProfitCenterCd,\n\t\tInternalDocHeaderKey,\n\t\tODQChangeModeCd,\n\t\tODQEntityCntrCd,\n\t\tIsReversedInd,\n\t\tBillingDoc\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FinalDailySetWithoutColumn\nFinalDailySetWithoutColumn derive(forencryption = case(\n    AccountingDocTypeCd == 'U1' && like(CompanyCd, 'US%'),\n    concat('custnbr=29a8dc05-dd09-4a14-975c-ff29f0d418f0&method=getMyBills&acctnumber=', iifNull(SoldToCustomer,''), '&invoice0=009',substring(DocDt,5,2),substring(DocDt,1,4),InvoiceNum),\ncase(\n    AccountingDocTypeCd != 'U1' && like(CompanyCd, 'US%'),\n    concat('custnbr=29a8dc05-dd09-4a14-975c-ff29f0d418f0&method=getMyBills&acctnumber=',iifNull(BillToCustomer,''), '&invoice0=', InvoiceNum), \n\ncase(\n    AccountingDocTypeCd != 'U1' && like(CompanyCd, 'CA%'),\n    concat('custnbr=29a8dc05-dd09-4a14-975c-ff29f0d418f0&method=getMyBills&acctnumber=',iifNull(Payer,''), '&invoice0=', InvoiceNum), ''\n)\n)\n)) ~> FinalDailySetWithoutColumn1\nFinalDailySetWithoutColumn1 derive(URLTxt = concat('https://secure.billtrust.com/xmlwebservices/webServiceDispatch.php?custnbr=29a8dc05-dd09-4a14-975c-ff29f0d418f0&p=','|~|', case(isNull(forencryption),'',forencryption)),\n\t\tAgingDate = toDate(AgingDate,'MM/dd/yyyy')) ~> FinalDailySetWithoutColumn2\ncnt1 select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getoldcntlvalue\ncnt1 derive(LastRunDate = toString(currentTimestamp(), 'MM/dd/yyyy HH:mm:ss'),\n\t\tStatus = 'S',\n\t\tSubjectArea = $SubjectAreacntl) ~> DerivedColumn5\nDerivedColumn5 aggregate(groupBy(LastRunDate,\n\t\tStatus,\n\t\tSubjectArea),\n\tDummy = max(1)) ~> Aggregate1\nAggregate1 select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getnewcntlvalue\ngetnewcntlvalue, getoldcntlvalue union(byName: true)~> Union1\nLeftJoinbillingsoldto select(mapColumn(\n\t\tDISequenceNum,\n\t\tDIOperationTypeCd,\n\t\tBillingDoc,\n\t\tCompanyCd,\n\t\tFiscalYearDt,\n\t\tAccountingDocNum,\n\t\tLineItemNum,\n\t\tSubItemnum,\n\t\tFIItemStatusCd,\n\t\tPayerCustomerNum,\n\t\tCreditControlAreaCd,\n\t\tDunninAreaMeas,\n\t\tAccountTypeCd,\n\t\tGLInd,\n\t\tAccountingDocTypeCd,\n\t\tPostingKeyCd,\n\t\tFiscalYearVariantCd,\n\t\tDocDt,\n\t\tDocPostingDt,\n\t\tAccDocEnterDt,\n\t\tClearDt,\n\t\tLastDunnDt,\n\t\tPaymentDueDt,\n\t\tTerms1CashDiscountDueDt,\n\t\tTerms2CashDiscountDueDt,\n\t\tBaselineDueDtForDueDtCalc,\n\t\tFirstCashDiscDaysTm,\n\t\tSecondCashDiscDaysTm,\n\t\tNetPayTermsTm,\n\t\tCashDisc1Pct,\n\t\tCashDisc2Pct,\n\t\tCountrCd,\n\t\tPaymentMethodCd,\n\t\tPaymentKeyTermsCd,\n\t\tPayBlockKeyCd,\n\t\tPaymentReasonCd,\n\t\tDunningBlockCd,\n\t\tDunningCd,\n\t\tDunningLevCd,\n\t\tLocalCurrCd,\n\t\tLocalCurrDebitAmt,\n\t\tLocalCurrCreditAmt,\n\t\tLocalCurrSignedAmt,\n\t\tLocalCurrCashDiscountAmt,\n\t\tCurrencyCd,\n\t\tDocCurrDebitAmt,\n\t\tDocCurrCreditAmt,\n\t\tSignedForeignAmt,\n\t\tEligibleDocDiscountAmt,\n\t\tDocDiscountAmt,\n\t\tChartOfAccountsCd,\n\t\tGLAccountCd,\n\t\tGLAccountNum,\n\t\tBranchAccountnum,\n\t\tClearingDocnum,\n\t\tReferDocNum,\n\t\tTxnInvoicenum,\n\t\tInvoiceFiscalyearNum,\n\t\tInvoicelineItemCd,\n\t\tSalesDistrDocNum,\n\t\tBusinessPartnerRefKey1Cd,\n\t\tBusinessPartnerRefKey2Cd,\n\t\tLineItemRefKeyCd,\n\t\tItemTxt,\n\t\tNegativePostingInd,\n\t\tDocArchiveInd,\n\t\tSplGLTransactiontypeCd,\n\t\tRecordModeCd,\n\t\tAssignmentNum,\n\t\tReferenceTxnAmt,\n\t\tReferenceKeyCd,\n\t\tDocstatusCd,\n\t\tLocalCurrAmt,\n\t\tLocalCurr2Amt,\n\t\tLocalCurr3Amt,\n\t\tFiscalYearNum,\n\t\tSecondCurrencyKeyCd,\n\t\tThirdCurrencyKeyCd,\n\t\tFiscalPeriodDt,\n\t\tWBSElementCd,\n\t\tDebitCreditInd,\n\t\tDocCurrencyAmt,\n\t\tProfitCenterCd,\n\t\tInternalDocHeaderKey,\n\t\tODQChangeModeCd,\n\t\tODQEntityCntrCd,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tJobId,\n\t\tFileCreatedDtTm,\n\t\tFileName,\n\t\tIsReversedInd,\n\t\tBillingDocNum,\n\t\tSoldTo\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select4\nLeftJoinsoldtopayer select(mapColumn(\n\t\tDISequenceNum,\n\t\tDIOperationTypeCd,\n\t\tBillingDoc,\n\t\tCompanyCd,\n\t\tFiscalYearDt,\n\t\tAccountingDocNum,\n\t\tLineItemNum,\n\t\tSubItemnum,\n\t\tFIItemStatusCd,\n\t\tPayerCustomerNum,\n\t\tCreditControlAreaCd,\n\t\tDunninAreaMeas,\n\t\tAccountTypeCd,\n\t\tGLInd,\n\t\tAccountingDocTypeCd,\n\t\tPostingKeyCd,\n\t\tFiscalYearVariantCd,\n\t\tDocDt,\n\t\tDocPostingDt,\n\t\tAccDocEnterDt,\n\t\tClearDt,\n\t\tLastDunnDt,\n\t\tPaymentDueDt,\n\t\tTerms1CashDiscountDueDt,\n\t\tTerms2CashDiscountDueDt,\n\t\tBaselineDueDtForDueDtCalc,\n\t\tFirstCashDiscDaysTm,\n\t\tSecondCashDiscDaysTm,\n\t\tNetPayTermsTm,\n\t\tCashDisc1Pct,\n\t\tCashDisc2Pct,\n\t\tCountrCd,\n\t\tPaymentMethodCd,\n\t\tPaymentKeyTermsCd,\n\t\tPayBlockKeyCd,\n\t\tPaymentReasonCd,\n\t\tDunningBlockCd,\n\t\tDunningCd,\n\t\tDunningLevCd,\n\t\tLocalCurrCd,\n\t\tLocalCurrDebitAmt,\n\t\tLocalCurrCreditAmt,\n\t\tLocalCurrSignedAmt,\n\t\tLocalCurrCashDiscountAmt,\n\t\tCurrencyCd,\n\t\tDocCurrDebitAmt,\n\t\tDocCurrCreditAmt,\n\t\tSignedForeignAmt,\n\t\tEligibleDocDiscountAmt,\n\t\tDocDiscountAmt,\n\t\tChartOfAccountsCd,\n\t\tGLAccountCd,\n\t\tGLAccountNum,\n\t\tBranchAccountnum,\n\t\tClearingDocnum,\n\t\tReferDocNum,\n\t\tTxnInvoicenum,\n\t\tInvoiceFiscalyearNum,\n\t\tInvoicelineItemCd,\n\t\tSalesDistrDocNum,\n\t\tBusinessPartnerRefKey1Cd,\n\t\tBusinessPartnerRefKey2Cd,\n\t\tLineItemRefKeyCd,\n\t\tItemTxt,\n\t\tNegativePostingInd,\n\t\tDocArchiveInd,\n\t\tSplGLTransactiontypeCd,\n\t\tRecordModeCd,\n\t\tAssignmentNum,\n\t\tReferenceTxnAmt,\n\t\tReferenceKeyCd,\n\t\tDocstatusCd,\n\t\tLocalCurrAmt,\n\t\tLocalCurr2Amt,\n\t\tLocalCurr3Amt,\n\t\tFiscalYearNum,\n\t\tSecondCurrencyKeyCd,\n\t\tThirdCurrencyKeyCd,\n\t\tFiscalPeriodDt,\n\t\tWBSElementCd,\n\t\tDebitCreditInd,\n\t\tDocCurrencyAmt,\n\t\tProfitCenterCd,\n\t\tInternalDocHeaderKey,\n\t\tODQChangeModeCd,\n\t\tODQEntityCntrCd,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tJobId,\n\t\tFileCreatedDtTm,\n\t\tFileName,\n\t\tIsReversedInd,\n\t\tBillingDocNum,\n\t\tbilling_soldto_SoldTo = Select4@SoldTo,\n\t\tPayer,\n\t\tsoldto_payer_SoldTo = SoldToPayerLookup1@SoldTo\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Select5\nCustomer select(mapColumn(\n\t\tCustomerKey,\n\t\tCustomerNum,\n\t\tDunningProcedureCd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> soldtocust\nCustomer select(mapColumn(\n\t\tCustomerKey,\n\t\tCustomerNum,\n\t\tDunningProcedureCd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> payercust\nCustomer select(mapColumn(\n\t\tCustomerKey,\n\t\tCustomerNum,\n\t\tDunningProcedureCd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> BillTo\nBillingDocumentItemData select(mapColumn(\n\t\tSalesDistDocumentNum,\n\t\tBillToParty1Num\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> BillingDocumentItemDataU1\nBillingDocumentItemData select(mapColumn(\n\t\tSalesDistDocumentNum,\n\t\tBillToParty1Num\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> BillingDocumentItemDataNonU1\nCustomerhier select(mapColumn(\n\t\tBaseCustomerHierKey,\n\t\tCustomerNum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> soldtocusthier\nCustomerhier select(mapColumn(\n\t\tBaseCustomerHierKey,\n\t\tCustomerNum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> payercusthier\nFinalDailySetWithoutColumn2 select(mapColumn(\n\t\tAgingDate,\n\t\tSoldToCustomerKey,\n\t\tPayerCustomerKey,\n\t\tBillToCustomerKey,\n\t\tSoldToCustomerHierarchyKey,\n\t\tPayerCustomerHierarchyKey,\n\t\tCAMAlignmentKey,\n\t\tCurrentAlignmentKey,\n\t\tPreviousAlignmentKey,\n\t\tAgreementKey,\n\t\tCompanyCd,\n\t\tFiscalYearDt,\n\t\tAccountingDocNum,\n\t\tLineItemNum,\n\t\tSubItemnum,\n\t\tFIItemStatusCd,\n\t\tPayer,\n\t\tTMvsCAMOwnership,\n\t\tCreditControlAreaCd,\n\t\tDunninAreaMeas,\n\t\tAccountTypeCd,\n\t\tGLInd,\n\t\tAccountingDocTypeCd,\n\t\tPostingKeyCd,\n\t\tFiscalVariantCd,\n\t\tDocDt,\n\t\tDocPostingDt,\n\t\tAccDocEnterDt,\n\t\tClearDt,\n\t\tLastDunnDt,\n\t\tNetDueDt,\n\t\tPaymentDtToAvailDiscountI,\n\t\tPaymentDtToAvailDiscountII,\n\t\tBaselineDtForDueDtCalculation,\n\t\tDaysToPayWithinToAvailDiscountI,\n\t\tDaysToPayWithinToAvailDiscountII,\n\t\tNetPayTermsTm,\n\t\tCashDiscountPctI,\n\t\tCashDiscountPctII,\n\t\tCountrCd,\n\t\tPaymentMethodCd,\n\t\tPaymentTermsCode,\n\t\tPaymentBlockKey,\n\t\tReasonCodes,\n\t\tDunningBlock,\n\t\tDunningCd,\n\t\tDunningLevCd,\n\t\tLocalCurrCd,\n\t\tLocalCurrDebitAmt,\n\t\tLocalCurrCreditAmt,\n\t\tLocalCurrSignedAmt,\n\t\tDiscountTakenAndHonoured,\n\t\tCurrencyCd,\n\t\tDocCurrDebitAmt,\n\t\tDocCurrCreditAmt,\n\t\tSignedForeignAmt,\n\t\tEligibleDocDiscountAmt,\n\t\tDocDiscountAmt,\n\t\tChartOfAccountsCd,\n\t\tGLAccountCd,\n\t\tGLAccountNum,\n\t\tBranchAccountnum,\n\t\tClearingDocnum,\n\t\tReferDocNum,\n\t\tTxnInvoicenum,\n\t\tInvoiceFiscalyearNum,\n\t\tInvoicelineItemCd,\n\t\tSalesDistrDocNum,\n\t\tBusinessPartnerRefKey1Cd,\n\t\tBusinessPartnerRefKey2Cd,\n\t\tLineItemRefKeyCd,\n\t\tItemTxt,\n\t\tNegativePostingInd,\n\t\tDocArchiveInd,\n\t\tSplGLTransactiontypeCd,\n\t\tRecordModeCd,\n\t\tAssignmentNum,\n\t\tReferenceTxnAmt,\n\t\tReferenceKeyCd,\n\t\tDocstatusCd,\n\t\tLocalCurrAmt,\n\t\tAmountInSecondLocalCurrency,\n\t\tAmountInThirdLocalCurrency,\n\t\tFiscalYearNum,\n\t\tSecondCurrencyKeyCd,\n\t\tThirdCurrencyKeyCd,\n\t\tFiscalPeriodDt,\n\t\tWBSElementCd,\n\t\tDebitCreditInd,\n\t\tDocCurrencyAmt,\n\t\tProfitCenterCd,\n\t\tInternalDocHeaderKey,\n\t\tODQChangeModeCd,\n\t\tODQEntityCntrCd,\n\t\tIsReversedInd,\n\t\tBillingDoc,\n\t\tInvoiceNum,\n\t\tSoldToCustomer,\n\t\tDunningProcedureCd,\n\t\tLegacySoldToCustomer,\n\t\tURLTxt,\n\t\tOwner,\n\t\tBillToCustomer,\n\t\tJobId,\n\t\tFileCreatedDtTm,\n\t\tFileName,\n\t\tCreatedDttm,\n\t\tLastUpdtDttm,\n\t\tDISequenceNum,\n\t\tDIOperationTypeCd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> finaldailysetwithoutcolumn2select\nSoldToPayerLookup filter(countofsoldto=='1') ~> Filter10\nDerivedColumn1 filter(like(CompanyCd, 'US%')||like(CompanyCd, 'CA%')||like(CompanyCd, 'GB%')||like(CompanyCd, 'IE%')) ~> Filter11\nfinaldailysetwithoutcolumn2select sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($path_AR_Transactions+$tsv_folder+$delta_folder_path+$file_AR_Transactions+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tpartitionBy('hash', 1)) ~> sink1\nfinaldailysetwithoutcolumn2select sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($path_AR_Transactions+$Parquet_folder+$delta_folder_path+$file_AR_Transactions+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tpartitionBy('hash', 1)) ~> sink2\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($path_OToC_Aging_Cntl_Daily+$file_OToC_Aging_Cntl_Daily+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\tpartitionBy('hash', 1)) ~> sink3"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ECOLABDATALAKE_O2C_AGING_FACT_SEVENDAYS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "ManualRun"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "SourceSoldToPayerLookup"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "SourceCustomer"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "SourceBillingSoldToLookup"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "SourceCustomerhier"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "SourceExtCustomerxref"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "SourceBillingDocumentItemData"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "AgingExplExtract"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "sourcecntl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "sinkCntl"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "sinkDefaultlvalue"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "OutputTSV"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "OutputParquet"
						}
					],
					"transformations": [
						{
							"name": "Window1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "SoldToPayerLookup"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "SoldtoCust"
						},
						{
							"name": "Window3"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "BillingSoldToLookup"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Window4"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "SoldtoCustHier"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Window5"
						},
						{
							"name": "customerxref"
						},
						{
							"name": "Select4"
						},
						{
							"name": "Window6"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "BillingDocumentItemData"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "DerivedColumn1needtochange"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "GetRunDt"
						},
						{
							"name": "Join1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "datefromfile"
						},
						{
							"name": "Window7"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window8"
						},
						{
							"name": "Filter8"
						},
						{
							"name": "AgingExplUniqueRecords"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "AgingExplExtract1"
						},
						{
							"name": "a1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Join3"
						},
						{
							"name": "Join4"
						},
						{
							"name": "Join5"
						},
						{
							"name": "DerivedColumn"
						},
						{
							"name": "Join6"
						},
						{
							"name": "BillingDocumentItemDataNon"
						},
						{
							"name": "LogicPopulation"
						},
						{
							"name": "BillTo"
						},
						{
							"name": "PayerCust"
						},
						{
							"name": "Join7"
						},
						{
							"name": "Join8"
						},
						{
							"name": "PayerCustHier"
						},
						{
							"name": "Join9"
						},
						{
							"name": "Join10"
						},
						{
							"name": "Join11"
						},
						{
							"name": "Join12"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "FinalDailySet"
						},
						{
							"name": "getoldcntlvalue"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "getnewcntlvalue"
						},
						{
							"name": "updatecntl"
						},
						{
							"name": "DerivedColumn7"
						},
						{
							"name": "Defaultlvalue"
						},
						{
							"name": "Join13"
						},
						{
							"name": "Filter10"
						},
						{
							"name": "DerivedColumn8"
						},
						{
							"name": "OpenSevendaysDataSet"
						},
						{
							"name": "DerivedColumn9"
						},
						{
							"name": "OpenSevendaysDataSet2"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn11"
						},
						{
							"name": "Filter11"
						},
						{
							"name": "DerivedColumn12"
						},
						{
							"name": "CoalesceManualRun"
						},
						{
							"name": "CoalesceSoldToPayerLookup"
						},
						{
							"name": "CoalesceBIllingSoldToLookup"
						},
						{
							"name": "CoalesceCustomerHier"
						},
						{
							"name": "CoalesceExtCustomerXREF"
						},
						{
							"name": "CoalesceBillingDocumentData"
						},
						{
							"name": "CoalesceAgingExplExtract"
						},
						{
							"name": "CoalesceCustomer"
						},
						{
							"name": "CoalesceSourceCntl"
						},
						{
							"name": "DerivedColumn13"
						},
						{
							"name": "Filter12"
						}
					],
					"script": "parameters{\n\tsrc_path_ManualRun as string ('Analytics/AnalyticsManualRun/'),\n\tfilename_ManualRun as string ('AgingFactManualRun'),\n\tfile_extension_tsv as string ('.tsv'),\n\tFolder_sold_player_lookup as string ('O2C_Lookup'),\n\tfilename_sold_player_lookup as string ('soldtopayerlookup'),\n\tFolder_customer as string ('CUSTOMER_NA'),\n\tfilename_customer as string ('dim_customer'),\n\tFolder_billing_sold_to_lookup as string ('O2C_Lookup'),\n\tfilename_billing_sold_to_lookup as string ('BillingSoldTolookup'),\n\tFolder_Customerhier as string ('MDM_CUSTOMER_NA'),\n\tfilename_Customerhier as string ('dim_base_customer_hierarchy'),\n\tpath_Exploration as string ('Exploration/EnterpriseBackbone/'),\n\tpath_Analytics as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tFolder_ext_customerxref as string ('Lookups/USHistoricalSalesData'),\n\tfilename_ext_customerxref as string ('SALES_LKP_CUSTOMER_XREF'),\n\tfilename_BillingDocumentItemData as string ('2LIS_13_VDITM*'),\n\tdelta_folder_structure as string ('2020/05/11'),\n\tfile_Aging_expl_extract as string ('0FI_AR_4*'),\n\tjobid as string (''),\n\tsrc_path_Aging as string ('Analytics/EnterpriseCertified/EnterpriseFacts/Accounts_Receivable/Aging/'),\n\tfilename_Aging as string ('Aging_Transactions'),\n\tpath_cntl as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/'),\n\tfilename_cntl as string ('OToC_Aging_Cntl'),\n\ttarget_path as string ('Analytics/EnterpriseCertified/EnterpriseFacts/Accounts_Receivable/Aging/'),\n\ttarget_filename as string ('Aging_Transactions'),\n\tfile_extension_parquet as string ('.parquet'),\n\tSubjectAreacntl as string,\n\tFolder_EBS as string ('EBS'),\n\tinputfile_2LIS_13_VDITM as string ('2LIS_13_VDITM/NA/*/*/*/*/*/'),\n\tinputfile_0FI_AR_4 as string ('0FI_AR_4/NA/*/*/*/*/*/'),\n\tparquet_folder as string,\n\ttsv_folder as string\n}\nsource(output(\n\t\tRunon as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_ManualRun+$filename_ManualRun+$file_extension_tsv)]) ~> ManualRun\nsource(output(\n\t\tPayer as string,\n\t\tSoldTo as string,\n\t\tcountofsoldto as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_Exploration+$Folder_sold_player_lookup+'/'+$filename_sold_player_lookup+$file_extension_tsv)]) ~> SourceSoldToPayerLookup\nsource(output(\n\t\tCustomerKey as string,\n\t\tCustomerNum as string,\n\t\tAddrNum as string,\n\t\tTitleTxt as string,\n\t\tCustCentralOrderBlockCd as string,\n\t\tExpressTrainStationCd as string,\n\t\tTrainStationCd as string,\n\t\tInternationalLocation1Num as string,\n\t\tInternationalLocation2Num as string,\n\t\tAuthGrpCd as string,\n\t\tIndustryCd as string,\n\t\tInternationalLocationNumCheckDigitCd as string,\n\t\tLineNumDataCommunicationTxt as string,\n\t\tRecordCreatedDt as string,\n\t\tRecordCreatedByName as string,\n\t\tUnloadingPointInd as string,\n\t\tCustCentralBillingBlockCd as string,\n\t\tMasterRecordWithFiscalAddrAccountNum as string,\n\t\tWorkingTmCalendarCd as string,\n\t\tAlternativePayerAccountNum as string,\n\t\tGrpCd as string,\n\t\tCustAccountGrpCd as string,\n\t\tCustClassificationCd as string,\n\t\tCountryKeyCd as string,\n\t\tVendorAccountNum as string,\n\t\tCustCntralDeliveryBlockCd as string,\n\t\tCityCoordinatesVal as string,\n\t\tMasterRecordDeletionInd as string,\n\t\tName1Desc as string,\n\t\tName2Desc as string,\n\t\tName3Desc as string,\n\t\tName4Desc as string,\n\t\tNielsenIDCd as string,\n\t\tCityName as string,\n\t\tDistrictName as string,\n\t\tPOBoxNum as string,\n\t\tPOBoxPostalCd as string,\n\t\tPostalCd as string,\n\t\tRegionCd as string,\n\t\tCountryCd as string,\n\t\tCityCd as string,\n\t\tRegionalMarketCd as string,\n\t\tSortFieldDesc as string,\n\t\tCentralPostingBlockInd as string,\n\t\tLanguageCd as string,\n\t\tTax1Num as string,\n\t\tTax2Num as string,\n\t\tBusPartnerEqualizationTaxInd as string,\n\t\tLiableForVATInd as string,\n\t\tHouseNumAndStreetDesc as string,\n\t\tTeleboxNumTxt as string,\n\t\tFirstTelNum as string,\n\t\tSecondTelNum as string,\n\t\tFaxNum as string,\n\t\tTeletaxNum as string,\n\t\tTelexNum as string,\n\t\tTransportationZoneCd as string,\n\t\tIsOneTimeAccountInd as string,\n\t\tIfAlternativePayeeAllowedInd as string,\n\t\tTradingPartnerCompanyCd as string,\n\t\tVATRegistrationNum as string,\n\t\tIsCompetitorInd as string,\n\t\tIsSalesPartnerInd as string,\n\t\tIsSalesProspectInd as string,\n\t\tCustType4Ind as string,\n\t\tSoldToPartyCd as string,\n\t\tIsConsumerInd as string,\n\t\tLegalStatusCd as string,\n\t\tIndustry1Cd as string,\n\t\tIndustry2Cd as string,\n\t\tIndustry3Cd as string,\n\t\tIndustry4Cd as string,\n\t\tIndustry5Cd as string,\n\t\tInitialContactCd as string,\n\t\tAnnualSalesNum as string,\n\t\tAnnualSalesYearTxt as string,\n\t\tSalesFigCurCd as string,\n\t\tYearlyCountOfEmpNum as string,\n\t\tYearForNumOfEmpTxt as string,\n\t\tAttr1Cd as string,\n\t\tAttr2Cd as string,\n\t\tAttr3Cd as string,\n\t\tAttr4Cd as string,\n\t\tCustLeadDivisionCd as string,\n\t\tAttr6Cd as string,\n\t\tAttr7Cd as string,\n\t\tAttr8Cd as string,\n\t\tAttr9Cd as string,\n\t\tAttr10Cd as string,\n\t\tNaturalPersonName as string,\n\t\tAnnualSalesNum2 as string,\n\t\tTaxJurisdictionCd as string,\n\t\tMatchCdSearchTerm1Desc as string,\n\t\tMatchCdSearchTerm2Desc as string,\n\t\tMatchCdSearchTerm3Desc as string,\n\t\tFiscalYearVariantCd as string,\n\t\tUsageInd as string,\n\t\tCustInspectionInd as string,\n\t\tOutboundDeliveryNoteInspectionInd as string,\n\t\tReferenceAccountGrpCd as string,\n\t\tPOBoxCityName as string,\n\t\tPlantCd as string,\n\t\tMediumOfDataExchangeInd as string,\n\t\tMediumOfDataExchangeInstructionCd as string,\n\t\tDataTransferStatusInd as string,\n\t\tAssignmentToHierarchyCd as string,\n\t\tPaymentBlockCd as string,\n\t\tCustPlantGrpISRLabelCd as string,\n\t\tNonMilitaryUseInd as string,\n\t\tMilitaryUseInd as string,\n\t\tCustConditionGrp1Cd as string,\n\t\tCustConditionGrp2Cd as string,\n\t\tCustConditionGrp3Cd as string,\n\t\tCustConditionGrp4Cd as string,\n\t\tCustConditionGrp5Cd as string,\n\t\tAlternativePayerUsingAccountNumInd as string,\n\t\tTaxTypeCd as string,\n\t\tTaxNumTypeCd as string,\n\t\tTaxNbr3Cd as string,\n\t\tTaxNbr4Cd as string,\n\t\tICMSExemptCustInd as string,\n\t\tIPIExemptCustInd as string,\n\t\tCustGrpCd as string,\n\t\tCustCFOPCatCd as string,\n\t\tICMSTaxLawCd as string,\n\t\tIPITaxLawCd as string,\n\t\tBiochemicalWarfareForLegalControlInd as string,\n\t\tNuclearProliferationForLegalControlInd as string,\n\t\tNationalSecurityForLegalControlInd as string,\n\t\tMissileTechnologyForLegalControlInd as string,\n\t\tCustCentralSalesBlockInd as string,\n\t\tUniformResourceLocatorTxt as string,\n\t\tNameDesc as string,\n\t\tEBSBilWDlvry as string,\n\t\tBusPartnerCatgCd as string,\n\t\tBusPartnerTypeCd as string,\n\t\tBusPartnerGroupingCd as string,\n\t\tExternalSysBusPartnerNum as string,\n\t\tBusPartnerSearchTerm1Txt as string,\n\t\tBusPartnerSearchTerm2Txt as string,\n\t\tDataOriginTypeCd as string,\n\t\tAddressKeyFormCd as string,\n\t\tCentralArchiveInd as string,\n\t\tBusPartnerCentralBlockCd as string,\n\t\tSalutationTxt as string,\n\t\tBusPartnerContactPermissionCd as string,\n\t\tBusPartnerPrntFrmtCd as string,\n\t\tEBSMSDSLanguage1Cd as string,\n\t\tEBSMSDSLanguage2Cd as string,\n\t\tEBSMSDSLanguage3Cd as string,\n\t\tEBSMSDSLanguage4Cd as string,\n\t\tEBSCPrPoisonClsfCd as string,\n\t\tEBSWEENumCd as string,\n\t\tEBSInvOutputCd as string,\n\t\tEBSCustConditionGrp1Cd as string,\n\t\tEBSCustConditionGrp2Cd as string,\n\t\tEBSCustConditionGrp3Cd as string,\n\t\tEBSCustConditionGrp4Cd as string,\n\t\tEBSCustConditionGrp5Cd as string,\n\t\tEBSBrandOwnerName as string,\n\t\tEBSBrandName as string,\n\t\tEBSCustOutletCd as string,\n\t\tEBSCommercialCd as string,\n\t\tEBSCommercialName as string,\n\t\tEBSSiteNum as string,\n\t\tEBSSiteDesc as string,\n\t\tEBSGenID as string,\n\t\tEBSPersonalHRNum as string,\n\t\tEBSActiveDirectoryAcctName as string,\n\t\tEBSBlanketPONum as string,\n\t\tEBSIntOutletNum as string,\n\t\tEBSBillingWDeliveryCd as string,\n\t\tEBSBillBackClassificationCd as string,\n\t\tEBSPOUOnHeaderCd as string,\n\t\tEBSOrderConfirmCd as string,\n\t\tEBSGTAddrDesc as string,\n\t\tEBSSalesAllocRuleCd as string,\n\t\tEBSTerritoryCd as string,\n\t\tEBSAgreedPriceRequiredCd as string,\n\t\tEBSOwnershipCd as string,\n\t\tEBSCatgCd as string,\n\t\tEBSBusPartnerId as string,\n\t\tEBSSalesSkillCd as string,\n\t\tEBSBCMTypeCd as string,\n\t\tEBSDirectIndirectCustInd as string,\n\t\tEBSBusUnitCd as string,\n\t\tEBSSubBUCd as string,\n\t\tEBSDeliverOnOnlyDesc as string,\n\t\tEBSPalletJackReqdDesc as string,\n\t\tEBSLiftGateReqdDt as string,\n\t\tEBSDeliveryApptReqdCd as string,\n\t\tEBSDeliveryContactPersonName as string,\n\t\tEBSDeliveryContactInfoDesc as string,\n\t\tEBSDeliveryInstruction7Desc as string,\n\t\tEBSDeliveryInstructiont8Desc as string,\n\t\tEBSDeliveryInstructiont9Desc as string,\n\t\tEBSDeliveryInstructiont10Desc as string,\n\t\tEBSDeliveryInstruction11Desc as string,\n\t\tEBSCAMTerritoryCd as string,\n\t\tEBSReportDistributionCd as string,\n\t\tEBSMPPRLinkCd as string,\n\t\tEBSTerritoryCd1 as string,\n\t\tOrgName1 as string,\n\t\tOrgName2 as string,\n\t\tOrgName3 as string,\n\t\tOrgName4 as string,\n\t\tLegalFormOrgName as string,\n\t\tIndustrySectorCd as string,\n\t\tLegalEntityOrgName as string,\n\t\tOrgFoundedDt as string,\n\t\tLiduidationOrgDt as string,\n\t\tIntLocationNum1 as string,\n\t\tIntLocationNum2 as string,\n\t\tCheckDigitForIntLocationNum as string,\n\t\tBusPartnerLastName as string,\n\t\tBusPartnerFirstName as string,\n\t\tOtherLastName as string,\n\t\tBusPartnerBirthName as string,\n\t\tBusPartnerMiddleName as string,\n\t\tAcademicTitleCd as string,\n\t\tNamePrefixCd as string,\n\t\tBusPartnerNickname as string,\n\t\tMiddleInitialTxt as string,\n\t\tNameFormatRuleCountryCd as string,\n\t\tCorrespondenceLanguageCd as string,\n\t\tIfBusPartnerIsMaleInd as string,\n\t\tIfBusPartnerIsFemaleInd as string,\n\t\tBusPartnerBirthplaceName as string,\n\t\tBusPartnerMaritalStatusCd as string,\n\t\tNaturalPersonEmployerName as string,\n\t\tNationalityCd as string,\n\t\tPersonNum as string,\n\t\tIfBusPartnerSexIsNotKnownInd as string,\n\t\tObsoleteField2 as string,\n\t\tBusPartnerLanguageCd as string,\n\t\tBusPartnerBirthDt as string,\n\t\tBusPartnerDeathDt as string,\n\t\tPersonnelNum as string,\n\t\tObsoleteField3 as string,\n\t\tObsoleteField4 as string,\n\t\tGrpName1 as string,\n\t\tGrpName2 as string,\n\t\tSearchHelpField1Name as string,\n\t\tSearchHelpField2Name as string,\n\t\tObjectCreatedByName as string,\n\t\tObjectCreatedDt as string,\n\t\tObjectCreatedTm as string,\n\t\tObjChangedByName as string,\n\t\tObjectLastChangedDt as string,\n\t\tObjectLastChangedTm as string,\n\t\tBusPartnerGUID as string,\n\t\tIfPlannedChangedDocConvertedInd as string,\n\t\tBUT000BPDataValidityStartDt as string,\n\t\tBUT000BPDataValidityEndDt as string,\n\t\tIfBusPartnerIsNaturalPersonInd as string,\n\t\tBPTemplateID as string,\n\t\tBusPartnerCatgTextCd as string,\n\t\tShortDesc as string,\n\t\tMediumDesc as string,\n\t\tLongDesc as string,\n\t\tBusPartnerTextGUID as string,\n\t\tAddrValidFromDt as string,\n\t\tAddrValidToDt as string,\n\t\tFormOfAddrCd as string,\n\t\tCareOfDesc as string,\n\t\tNonPostalCityName as string,\n\t\tDifferentCityCd as string,\n\t\tRegionalStructureGroupingCd as string,\n\t\tCityPostalCd as string,\n\t\tCompanyPostalCd as string,\n\t\tPOBoxWithoutNumInd as string,\n\t\tPOBoxRegionCd as string,\n\t\tPOBoxCountry as string,\n\t\tStreetName as string,\n\t\tStreetNumDesc as string,\n\t\tHouseNum as string,\n\t\tSupplementHouseNum as string,\n\t\tStreet2Name as string,\n\t\tStreet3Name as string,\n\t\tStreet4Name as string,\n\t\tStreet5Name as string,\n\t\tBuildingCd as string,\n\t\tFloorCd as string,\n\t\tRoomAptNum as string,\n\t\tPersonalAddrFlagCd as string,\n\t\tSearchTerm1Txt as string,\n\t\tSearchTerm2Txt as string,\n\t\tFirstTelExtnCd as string,\n\t\tFirstFaxExtnCd as string,\n\t\tExtenstion1Cd as string,\n\t\tExtenstion2Cd as string,\n\t\tAddrTmZoneCd as string,\n\t\tEmailAddrTxt as string,\n\t\tURIFieldForTransferToBWTxt as string,\n\t\tDisplayFrmtTelNum as string,\n\t\tDisplayFrmtFaxNum as string,\n\t\tGeoLocationLongitudeVal as string,\n\t\tGeoLocationLatitudeVal as string,\n\t\tGeoLocationHeightVal as string,\n\t\tGeoLocationDataSourceCd as string,\n\t\tGeoLocationPrecisionCd as string,\n\t\tAddrNum2 as string,\n\t\tOneLineAddrDesc as string,\n\t\tOneLineAddrDesc2 as string,\n\t\tBPAddrLin0Desc as string,\n\t\tBPAddrLin1Desc as string,\n\t\tBPAddrLin2Desc as string,\n\t\tBPAddrLin3Desc as string,\n\t\tBPAddrLin4Desc as string,\n\t\tBPAddrLin5Desc as string,\n\t\tBPAddrLin6Desc as string,\n\t\tBPAddrLin7Desc as string,\n\t\tBPAddrLin8Desc as string,\n\t\tBPAddrLin9Desc as string,\n\t\tPricingHierarchyLevel1 as string,\n\t\tPricingHierarchyLevel1Desc as string,\n\t\tPricingHierarchyLevel2 as string,\n\t\tPricingHierarchyLevel2Desc as string,\n\t\tPricingHierarchyLevel3 as string,\n\t\tPricingHierarchyLevel3Desc as string,\n\t\tPricingHierarchyLevel4 as string,\n\t\tPricingHierarchyLevel4Desc as string,\n\t\tPricingHierarchyLevel5 as string,\n\t\tPricingHierarchyLevel5Desc as string,\n\t\tPricingHierarchyLevel6 as string,\n\t\tPricingHierarchyLevel6Desc as string,\n\t\tPricingHierarchyLevel7 as string,\n\t\tPricingHierarchyLevel7Desc as string,\n\t\tPricingHierLvl1Desc as string,\n\t\tPricingHierLvl2Desc as string,\n\t\tPricingHierLvl3Desc as string,\n\t\tPricingHierLvl4Desc as string,\n\t\tPricingHierLvl5Desc as string,\n\t\tPricingHierLvl6Desc as string,\n\t\tPricingHierLvl7Desc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tIsDeletedInd as string,\n\t\tMarketSegment1Desc as string,\n\t\tMarketSegment2Desc as string,\n\t\tEBSInsideDeliveryCd as string,\n\t\tEmailID as string,\n\t\tContactPersonCd as string,\n\t\tTelephoneCd as string,\n\t\tNightTimeDeliveryCd as string,\n\t\tIDNum as string,\n\t\tInstitutionCd as string,\n\t\tIDNumValidStartDt as string,\n\t\tIDNumValidEndDt as string,\n\t\tSalesOrgCd as string,\n\t\tAddress as string,\n\t\tCustNameCityNumber as string,\n\t\tCustNameNumber as string,\n\t\tEBSSiteNumName as string,\n\t\tDunningProcedureCd as string,\n\t\tPaymentKeyTermsCd as string,\n\t\tInstMarketSegment1Desc as string,\n\t\tInstMarketSegment2Desc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_Analytics+$Folder_customer+'/'+$filename_customer+$file_extension_tsv)]) ~> SourceCustomer\nsource(output(\n\t\tBillingDocNum as string,\n\t\tSoldTo as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_Exploration+$Folder_billing_sold_to_lookup+'/'+$filename_billing_sold_to_lookup+$file_extension_tsv)]) ~> SourceBillingSoldToLookup\nsource(output(\n\t\tBaseCustomerHierKey as string,\n\t\tCustomerNum as string,\n\t\tSiteZipClassCd as string,\n\t\tSiteGCityClassCd as string,\n\t\tSiteGCountryClassCd as string,\n\t\tSiteGAddress1ClassCd as string,\n\t\tSiteGAddress2ClassCd as string,\n\t\tSiteGStateCd as string,\n\t\tSiteGClassName as string,\n\t\tSiteGClass1Name as string,\n\t\tSite_Id as string,\n\t\tBaseCustHierarchyLevel1 as string,\n\t\tBaseCustHierarchyLevel1Desc as string,\n\t\tBaseCustHierarchyLevel2 as string,\n\t\tBaseCustHierarchyLevel2Desc as string,\n\t\tBaseCustHierarchyLevel3 as string,\n\t\tBaseCustHierarchyLevel3Desc as string,\n\t\tBaseCustHierarchyLevel4 as string,\n\t\tBaseCustHierarchyLevel4Desc as string,\n\t\tBaseCustHierarchyLevel5 as string,\n\t\tBaseCustHierarchyLevel5Desc as string,\n\t\tPublishDt as string,\n\t\tBaseHierType as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tSalesOrgCd as string,\n\t\tSiteIDName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_Analytics+$Folder_Customerhier+'/'+$filename_Customerhier+$file_extension_tsv)]) ~> SourceCustomerhier\nsource(output(\n\t\tCustomerCd as string,\n\t\tEBSCustNum as string,\n\t\tBillbackCd as string,\n\t\tDistChannelCd as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_Exploration+$Folder_ext_customerxref+'/'+$filename_ext_customerxref+$file_extension_tsv)]) ~> SourceExtCustomerxref\nsource(output(\n\t\tDISequenceNum as string,\n\t\tDIOperationTypeCd as string,\n\t\tCancelDataRecInd as string,\n\t\tSalesDistDocumentNum as string,\n\t\tBillingDocumentPostingStatusCd as string,\n\t\tIntercompanyBillingTotalStatusCd as string,\n\t\tOrderBillingStatusCd as string,\n\t\tBillingStatusCd as string,\n\t\tOverallBillingBlockStatusCd as string,\n\t\tOverallProcessingStatusCd as string,\n\t\tOverallBlockedStatusCd as string,\n\t\tSDDocumentItemNum as string,\n\t\tChangesOnDt as string,\n\t\tCompanyCd as string,\n\t\tSalesDistrictCd as string,\n\t\tBillingTypeCd as string,\n\t\tBillingDt as string,\n\t\tBillingCatCd as string,\n\t\tLocalCurCd as string,\n\t\tCustGrpCd as string,\n\t\tSoldToPartyCd as string,\n\t\tPayerCd as string,\n\t\tFIPostingsExchangeRate as string,\n\t\tExchangeRateTypeCd as string,\n\t\tStatisticsCurCd as string,\n\t\tSDDocumentCatg1Cd as string,\n\t\tSalesOrgCd as string,\n\t\tDistChannelCd as string,\n\t\tSDDocumentCurCd as string,\n\t\tFiscalYear as string,\n\t\tPostingPeriodTm as string,\n\t\tTransferToAccountingStatusCd as string,\n\t\tAssignNumCd as string,\n\t\tPromotionCd as string,\n\t\tSalesDocumentNum as string,\n\t\tSalesDocumentItemNum as string,\n\t\tRebateBasis1Val as string,\n\t\tVolumeRebateGrpCd as string,\n\t\tGrossWeightQty as string,\n\t\tBillingItemDocumentCurGrossVal as string,\n\t\tApplicationComponentCd as string,\n\t\tSAPBWTransactionKeyCd as string,\n\t\tBatchNum as string,\n\t\tIntArticleNum as string,\n\t\tRecordCreatedDt as string,\n\t\tBillingPlanRuleCd as string,\n\t\tServicesRenderedDt as string,\n\t\tActualInvoicedQty as string,\n\t\tStockkeepingUnitBillingQty as string,\n\t\tWeightUnitMeas as string,\n\t\tSalesDealCd as string,\n\t\tControllingAreaCd as string,\n\t\tCostCenterCd as string,\n\t\tPriceDeterminationExchangeRate as string,\n\t\tTranslationDt as string,\n\t\tCustGrp1Cd as string,\n\t\tCustGrp2Cd as string,\n\t\tCustGrp3Cd as string,\n\t\tCustGrp4Cd as string,\n\t\tCustGrp5Cd as string,\n\t\tPricingProcedureConditionSubtotal1Amt as string,\n\t\tPricingProcedureConditionSubtotal2Amt as string,\n\t\tPricingProcedureConditionSubtotal3Amt as string,\n\t\tPricingProcedureConditionSubtotal4Amt as string,\n\t\tPricingProcedureConditionSubtotal5Amt as string,\n\t\tPricingProcedureConditionSubtotal6Amt as string,\n\t\tStorageLocationCd as string,\n\t\tMatMgmtRequiredQty as string,\n\t\tMatGrpCd as string,\n\t\tMatNum as string,\n\t\tMatEnteredNum as string,\n\t\tBaseUoMMeas as string,\n\t\tMatGrp1Cd as string,\n\t\tMatGrp2Cd as string,\n\t\tMatGrp3Cd as string,\n\t\tMatGrp4Cd as string,\n\t\tMatGrp5Cd as string,\n\t\tDocumentCurTaxAmt as string,\n\t\tBillingItemNetVal as string,\n\t\tNetWeightQty as string,\n\t\tBillToPartyCd as string,\n\t\tShipToPartyCd as string,\n\t\tItemTypeCd as string,\n\t\tProductHierarchyCd as string,\n\t\tCommisionGrpCd as string,\n\t\tPricingExchangeRateDt as string,\n\t\tSalesDocumentItemCatgCd as string,\n\t\tSalesEmpCd as string,\n\t\tCashDiscountEligibleAmt as string,\n\t\tBaseUoMScaleQty as string,\n\t\tOrderHeaderDivisionCd as string,\n\t\tDivisionCd as string,\n\t\tStatisticsDt as string,\n\t\tStatisticsExchangeRate as string,\n\t\tSalesQtyToSKUConversionDenominatorQty as string,\n\t\tSalesQtyToSKUConversionNumeratorQty as string,\n\t\tStatisticsUpdateDt as string,\n\t\tReferenceDocumentNum as string,\n\t\tReferenceItemNum as string,\n\t\tSalesOfficeCd as string,\n\t\tSalesGrpCd as string,\n\t\tVolumeUnitMeas as string,\n\t\tVolumeQty as string,\n\t\tSalesUnitCd as string,\n\t\tShippingPointCd as string,\n\t\tDocumentCurCostAmt as string,\n\t\tPlantCd as string,\n\t\tDocumentCurGrossVal as string,\n\t\tSalesTypeCd as string,\n\t\tTotalQty1 as string,\n\t\tStatisticsUOMTotalQty as string,\n\t\tTotalQty2 as string,\n\t\tStatisticsUoMBillingQty as string,\n\t\tDepartureCountryCd as string,\n\t\tOrderNum as string,\n\t\tOrderReasonTxt as string,\n\t\tSalesDocumentReferenceCd as string,\n\t\tSDDocumentCatgCd as string,\n\t\tAccountingInd as string,\n\t\tPlantCatgCd as string,\n\t\tItemCreditPriceVal as string,\n\t\tAgreedDeliveryTm as string,\n\t\tPurchasingGrpCd as string,\n\t\tPurchasingOrgCd as string,\n\t\tPurchasingAreaCd as string,\n\t\tObjectCreatedByName as string,\n\t\tEntryTm as string,\n\t\tFunctionalAreaCd as string,\n\t\tBillingPlanItemCd as string,\n\t\tEntryTm1 as string,\n\t\tVendorMatNum as string,\n\t\tAccountAssignmentGrpCd as string,\n\t\tSalesOrderDestinationCountryCd as string,\n\t\tMatTypeCd as string,\n\t\tOpenBillingDocumentCreditVal as string,\n\t\tTotalOpenBillingDocumentCreditVal as string,\n\t\tOpenBillingDocumentQty as string,\n\t\tOpenDeliveryCreditVal as string,\n\t\tTotalOpenDeliveryCreditVal as string,\n\t\tSoldToParty1Cd as string,\n\t\tProfitCenterCd as string,\n\t\tItemReturnedInd as string,\n\t\tBaseUoMSalesQty as string,\n\t\tGenerallyIncompleteInd as string,\n\t\tEBSAgreeNum as string,\n\t\tEBSAgreeTypCd as string,\n\t\tWorkBreakdownStructureElementCd as string,\n\t\tNumOfBillingItemNum as string,\n\t\tFiscalYearVariantCd as string,\n\t\tReferredSalesOrderItemCampaignCd as string,\n\t\tCustCd as string,\n\t\tPrecedingSalesDistDocumentCd as string,\n\t\tCust1Cd as string,\n\t\tPayer1Cd as string,\n\t\tSoldToParty2Num as string,\n\t\tBillToParty1Num as string,\n\t\tShipToParty1Num as string,\n\t\tODQChangeModeCd as string,\n\t\tODQEntityCntrCd as string,\n\t\tFileCreatedDtTm as string,\n\t\tFileName as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tIsReversedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_Exploration+$Folder_EBS+'/'+$inputfile_2LIS_13_VDITM+$filename_BillingDocumentItemData+$file_extension_tsv)]) ~> SourceBillingDocumentItemData\nsource(output(\n\t\tDISequenceNum as string,\n\t\tDIOperationTypeCd as string,\n\t\tCompanyCd as string,\n\t\tFiscalYearDt as string,\n\t\tAccountingDocNum as string,\n\t\tLineItemNum as string,\n\t\tSubItemnum as string,\n\t\tFIItemStatusCd as string,\n\t\tCustomerNum as string,\n\t\tCreditControlAreaCd as string,\n\t\tDunninAreaMeas as string,\n\t\tAccountTypeCd as string,\n\t\tGLInd as string,\n\t\tAccountingDocTypeCd as string,\n\t\tPostingKeyCd as string,\n\t\tFiscalYearVariantCd as string,\n\t\tDocDt as string,\n\t\tDocPostingDt as string,\n\t\tAccDocEnterDt as string,\n\t\tClearDt as string,\n\t\tLastDunnDt as string,\n\t\tPaymentDueDt as string,\n\t\tTerms1CashDiscountDueDt as string,\n\t\tTerms2CashDiscountDueDt as string,\n\t\tBaselineDueDtForDueDtCalc as string,\n\t\tFirstCashDiscDaysTm as string,\n\t\tSecondCashDiscDaysTm as string,\n\t\tNetPayTermsTm as string,\n\t\tCashDisc1Pct as string,\n\t\tCashDisc2Pct as string,\n\t\tCountrCd as string,\n\t\tPaymentMethodCd as string,\n\t\tPaymentKeyTermsCd as string,\n\t\tPayBlockKeyCd as string,\n\t\tPaymentReasonCd as string,\n\t\tDunningBlockCd as string,\n\t\tDunningCd as string,\n\t\tDunningLevCd as string,\n\t\tLocalCurrCd as string,\n\t\tLocalCurrDebitAmt as string,\n\t\tLocalCurrCreditAmt as string,\n\t\tLocalCurrSignedAmt as string,\n\t\tLocalCurrCashDiscountAmt as string,\n\t\tCurrencyCd as string,\n\t\tDocCurrDebitAmt as string,\n\t\tDocCurrCreditAmt as string,\n\t\tSignedForeignAmt as string,\n\t\tEligibleDocDiscountAmt as string,\n\t\tDocDiscountAmt as string,\n\t\tChartOfAccountsCd as string,\n\t\tGLAccountCd as string,\n\t\tGLAccountNum as string,\n\t\tBranchAccountnum as string,\n\t\tClearingDocnum as string,\n\t\tReferDocNum as string,\n\t\tTxnInvoicenum as string,\n\t\tInvoiceFiscalyearNum as string,\n\t\tInvoicelineItemCd as string,\n\t\tSalesDistrDocNum as string,\n\t\tBusinessPartnerRefKey1Cd as string,\n\t\tBusinessPartnerRefKey2Cd as string,\n\t\tLineItemRefKeyCd as string,\n\t\tItemTxt as string,\n\t\tNegativePostingInd as string,\n\t\tDocArchiveInd as string,\n\t\tSplGLTransactiontypeCd as string,\n\t\tRecordModeCd as string,\n\t\tAssignmentNum as string,\n\t\tReferenceTxnAmt as string,\n\t\tReferenceKeyCd as string,\n\t\tDocstatusCd as string,\n\t\tLocalCurrAmt as string,\n\t\tLocalCurr2Amt as string,\n\t\tLocalCurr3Amt as string,\n\t\tFiscalYearNum as string,\n\t\tSecondCurrencyKeyCd as string,\n\t\tThirdCurrencyKeyCd as string,\n\t\tFiscalPeriodDt as string,\n\t\tWBSElementCd as string,\n\t\tDebitCreditInd as string,\n\t\tDocCurrencyAmt as string,\n\t\tProfitCenterCd as string,\n\t\tInternalDocHeaderKey as string,\n\t\tODQChangeModeCd as string,\n\t\tODQEntityCntrCd as string,\n\t\tFileCreatedDtTm as string,\n\t\tFileName as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tIsReversedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_Exploration+$Folder_EBS+'/'+$inputfile_0FI_AR_4+$file_Aging_expl_extract+$file_extension_tsv)]) ~> AgingExplExtract\nsource(output(\n\t\tLastRunDate as string,\n\t\tStatus as string,\n\t\tSubjectArea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($path_cntl+$filename_cntl+$file_extension_tsv)]) ~> sourcecntl\nFilter2 window(over(Payer),\n\tdesc(SoldTo, false),\n\tr = rowNumber()) ~> Window1\nWindow1 filter(r==1) ~> Filter1\nFilter1 select(mapColumn(\n\t\tPayer,\n\t\tSoldTo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SoldToPayerLookup\nCoalesceSoldToPayerLookup filter(countofsoldto=='1') ~> Filter2\nCoalesceCustomer select(mapColumn(\n\t\tCustomerKey,\n\t\tCustomerNum,\n\t\tDunningProcedureCd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 window(over(CustomerNum),\n\tdesc(CustomerKey, false),\n\tr = rowNumber()) ~> Window2\nWindow2 filter(r==1) ~> Filter3\nFilter3 select(mapColumn(\n\t\tCustomerKey,\n\t\tCustomerNum,\n\t\tDunningProcedureCd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SoldtoCust\nCoalesceBIllingSoldToLookup window(over(BillingDocNum),\n\tdesc(SoldTo, false),\n\tr = rowNumber()) ~> Window3\nWindow3 filter(r==1) ~> Filter4\nFilter4 select(mapColumn(\n\t\tBillingDocNum,\n\t\tSoldTo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> BillingSoldToLookup\nCoalesceCustomerHier select(mapColumn(\n\t\tBaseCustomerHierKey,\n\t\tCustomerNum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 window(over(CustomerNum),\n\tdesc(BaseCustomerHierKey, false),\n\tr = rowNumber()) ~> Window4\nWindow4 filter(r==1) ~> Filter5\nFilter5 select(mapColumn(\n\t\tCustomerNum,\n\t\tBaseCustomerHierKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SoldtoCustHier\nCoalesceExtCustomerXREF select(mapColumn(\n\t\tLegacyCustomerCd = CustomerCd,\n\t\tEBSCustNum,\n\t\tLastUpdtDtTm\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 window(over(EBSCustNum),\n\tdesc(toTimestamp(LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss'), false),\n\tr = rowNumber()) ~> Window5\nFilter7 select(mapColumn(\n\t\tEBSCustNum,\n\t\tLegacyCustomerCd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> customerxref\nCoalesceBillingDocumentData select(mapColumn(\n\t\tSalesDistDocumentNum,\n\t\tBillToParty1Num,\n\t\tLastUpdtDtTm\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4 window(over(SalesDistDocumentNum),\n\tdesc(toTimestamp(LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss'), false),\n\tr = rowNumber()) ~> Window6\nWindow6 filter(r==1) ~> Filter6\nFilter6 select(mapColumn(\n\t\tSalesDistDocumentNum,\n\t\tBillToParty1Num\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> BillingDocumentItemData\nWindow5 filter(r==1) ~> Filter7\nDerivedColumn11 derive(RunDt = case(toTimestamp(toString(currentTimestamp(),'HH:mm:ss'),'HH:mm:ss')>=toTimestamp('00:00:00','HH:mm:ss')\n&&toTimestamp(toString(currentTimestamp(),'HH:mm:ss'),'HH:mm:ss')<=toTimestamp('05:00:00','HH:mm:ss'),\n RunDt,\n  toString(addDays(toTimestamp(toString(currentTimestamp(),'MM/dd/yyyy'),'MM/dd/yyyy'),-1),'MM/dd/yyyy'))) ~> DerivedColumn1needtochange\nDerivedColumn1needtochange aggregate(groupBy(RunDt),\n\tdummy = count(1)) ~> Aggregate1\nAggregate1 select(mapColumn(\n\t\tRunDt\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> GetRunDt\nGetRunDt, CoalesceManualRun join(1==1||isNull(RunDt)||isNull(Runon),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nJoin1 derive(Runon = case(Runon=='Enter Date', RunDt, Runon)) ~> DerivedColumn2\nDerivedColumn12 select(mapColumn(\n\t\tRunon\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> datefromfile\nDerivedColumn2 window(desc(toTimestamp(Runon,'MM/dd/yyyy'), false),\n\tr = rowNumber()) ~> Window7\nCoalesceAgingExplExtract derive(date = currentTimestamp()) ~> DerivedColumn3\nDerivedColumn3 window(over(CompanyCd,\n\t\tCustomerNum,\n\t\tFiscalYearDt,\n\t\tAccountingDocNum,\n\t\tLineItemNum,\n\t\tSubItemnum),\n\tdesc(toLong(FileCreatedDtTm), false),\n\tr = denseRank()) ~> Window8\nWindow8 filter(r==1) ~> Filter8\nFilter8 select(mapColumn(\n\t\tDISequenceNum,\n\t\tDIOperationTypeCd,\n\t\tCompanyCd,\n\t\tFiscalYearDt,\n\t\tAccountingDocNum,\n\t\tLineItemNum,\n\t\tSubItemnum,\n\t\tFIItemStatusCd,\n\t\tCustomerNum,\n\t\tCreditControlAreaCd,\n\t\tDunninAreaMeas,\n\t\tAccountTypeCd,\n\t\tGLInd,\n\t\tAccountingDocTypeCd,\n\t\tPostingKeyCd,\n\t\tFiscalYearVariantCd,\n\t\tDocDt,\n\t\tDocPostingDt,\n\t\tAccDocEnterDt,\n\t\tClearDt,\n\t\tLastDunnDt,\n\t\tPaymentDueDt,\n\t\tTerms1CashDiscountDueDt,\n\t\tTerms2CashDiscountDueDt,\n\t\tBaselineDueDtForDueDtCalc,\n\t\tFirstCashDiscDaysTm,\n\t\tSecondCashDiscDaysTm,\n\t\tNetPayTermsTm,\n\t\tCashDisc1Pct,\n\t\tCashDisc2Pct,\n\t\tCountrCd,\n\t\tPaymentMethodCd,\n\t\tPaymentKeyTermsCd,\n\t\tPayBlockKeyCd,\n\t\tPaymentReasonCd,\n\t\tDunningBlockCd,\n\t\tDunningCd,\n\t\tDunningLevCd,\n\t\tLocalCurrCd,\n\t\tLocalCurrDebitAmt,\n\t\tLocalCurrCreditAmt,\n\t\tLocalCurrSignedAmt,\n\t\tLocalCurrCashDiscountAmt,\n\t\tCurrencyCd,\n\t\tDocCurrDebitAmt,\n\t\tDocCurrCreditAmt,\n\t\tSignedForeignAmt,\n\t\tEligibleDocDiscountAmt,\n\t\tDocDiscountAmt,\n\t\tChartOfAccountsCd,\n\t\tGLAccountCd,\n\t\tGLAccountNum,\n\t\tBranchAccountnum,\n\t\tClearingDocnum,\n\t\tReferDocNum,\n\t\tTxnInvoicenum,\n\t\tInvoiceFiscalyearNum,\n\t\tInvoicelineItemCd,\n\t\tSalesDistrDocNum,\n\t\tBusinessPartnerRefKey1Cd,\n\t\tBusinessPartnerRefKey2Cd,\n\t\tLineItemRefKeyCd,\n\t\tItemTxt,\n\t\tNegativePostingInd,\n\t\tDocArchiveInd,\n\t\tSplGLTransactiontypeCd,\n\t\tRecordModeCd,\n\t\tAssignmentNum,\n\t\tReferenceTxnAmt,\n\t\tReferenceKeyCd,\n\t\tDocstatusCd,\n\t\tLocalCurrAmt,\n\t\tLocalCurr2Amt,\n\t\tLocalCurr3Amt,\n\t\tFiscalYearNum,\n\t\tSecondCurrencyKeyCd,\n\t\tThirdCurrencyKeyCd,\n\t\tFiscalPeriodDt,\n\t\tWBSElementCd,\n\t\tDebitCreditInd,\n\t\tDocCurrencyAmt,\n\t\tProfitCenterCd,\n\t\tInternalDocHeaderKey,\n\t\tODQChangeModeCd,\n\t\tODQEntityCntrCd,\n\t\tFileCreatedDtTm,\n\t\tFileName,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tJobId,\n\t\tIsReversedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> AgingExplUniqueRecords\nAgingExplUniqueRecords derive(CompanyCd = trim(CompanyCd),\n\t\tCustomerNum = trim(CustomerNum),\n\t\tDocDt = case(isNull(DocDt),'19000101',DocDt),\n\t\tPaymentDueDt = case(isNull(PaymentDueDt),'19000101',PaymentDueDt),\n\t\tLocalCurrSignedAmt = toDecimal(case(isNull(LocalCurrSignedAmt)||LocalCurrSignedAmt=='', '0', LocalCurrSignedAmt),17,4),\n\t\tBranchAccountnum = case((isNull(trim(BranchAccountnum))|| trim(BranchAccountnum) == ''), '', trim(BranchAccountnum)),\n\t\tBillingDoc = case(\n    toLong(\n        case(\n            regexMatch(trim(AccountingDocNum), '^[0-9]+$') && trim(AccountingDocNum) != '',\n            trim(AccountingDocNum),\n            '0'\n        )) >= toLong('6000000000')\n        && \n     toLong(\n        case(\n            regexMatch(trim(AccountingDocNum), '^[0-9]+$') && trim(AccountingDocNum) != '',\n            trim(AccountingDocNum),\n            '0'\n        )) <= toLong('7999999999')\n        &&\nAccountingDocTypeCd != 'U1' && AccountingDocTypeCd != 'DZ',\ntrim(AccountingDocNum),\n\ncase(       \n    toLong(\n        case(\n            regexMatch(trim(AssignmentNum), '^[0-9]+$') && trim(AssignmentNum) != '',\n            trim(AssignmentNum),\n            '0'\n        )) >= toLong('6000000000')\n        && \n     toLong(\n        case(\n            regexMatch(trim(AssignmentNum), '^[0-9]+$') && trim(AssignmentNum) != '',\n            trim(AssignmentNum),\n            '0'\n        )) <= toLong('7999999999')\n        &&\nAccountingDocTypeCd != 'U1',\ntrim(AssignmentNum),\n\ncase(\n    AccountingDocTypeCd == 'U1', trim(SalesDistrDocNum),\n\n\ncase(\n    AccountingDocTypeCd != 'RV' && AccountingDocTypeCd != 'U1' && AccountingDocTypeCd != 'R1'\n    &&\n    toLong(\n        case(\n            regexMatch(trim(TxnInvoicenum), '^[0-9]+$') && trim(TxnInvoicenum) != '',\n            trim(TxnInvoicenum),\n            '0'\n        )) >=  toLong('6000000000')\n   &&\n    toLong(\n        case(\n            regexMatch(trim(TxnInvoicenum), '^[0-9]+$') && trim(TxnInvoicenum) != '',\n            trim(TxnInvoicenum),\n            '0'\n        )) <=  toLong('7999999999'),\n        trim(TxnInvoicenum),\n        trim(AccountingDocNum)\n))))) ~> DerivedColumn4\nDerivedColumn4 select(mapColumn(\n\t\tCompanyCd,\n\t\tFiscalYearDt,\n\t\tAccountingDocNum,\n\t\tLineItemNum,\n\t\tSubItemnum,\n\t\tFIItemStatusCd,\n\t\tPayerCustomerNum = CustomerNum,\n\t\tCreditControlAreaCd,\n\t\tDunninAreaMeas,\n\t\tAccountTypeCd,\n\t\tGLInd,\n\t\tAccountingDocTypeCd,\n\t\tPostingKeyCd,\n\t\tFiscalYearVariantCd,\n\t\tDocDt,\n\t\tDocPostingDt,\n\t\tAccDocEnterDt,\n\t\tClearDt,\n\t\tLastDunnDt,\n\t\tPaymentDueDt,\n\t\tTerms1CashDiscountDueDt,\n\t\tTerms2CashDiscountDueDt,\n\t\tBaselineDueDtForDueDtCalc,\n\t\tFirstCashDiscDaysTm,\n\t\tSecondCashDiscDaysTm,\n\t\tNetPayTermsTm,\n\t\tCashDisc1Pct,\n\t\tCashDisc2Pct,\n\t\tCountrCd,\n\t\tPaymentMethodCd,\n\t\tPaymentKeyTermsCd,\n\t\tPayBlockKeyCd,\n\t\tPaymentReasonCd,\n\t\tDunningBlockCd,\n\t\tDunningCd,\n\t\tDunningLevCd,\n\t\tLocalCurrCd,\n\t\tLocalCurrDebitAmt,\n\t\tLocalCurrCreditAmt,\n\t\tLocalCurrSignedAmt,\n\t\tLocalCurrCashDiscountAmt,\n\t\tCurrencyCd,\n\t\tDocCurrDebitAmt,\n\t\tDocCurrCreditAmt,\n\t\tSignedForeignAmt,\n\t\tEligibleDocDiscountAmt,\n\t\tDocDiscountAmt,\n\t\tChartOfAccountsCd,\n\t\tGLAccountCd,\n\t\tGLAccountNum,\n\t\tBranchAccountnum,\n\t\tClearingDocnum,\n\t\tReferDocNum,\n\t\tTxnInvoicenum,\n\t\tInvoiceFiscalyearNum,\n\t\tInvoicelineItemCd,\n\t\tSalesDistrDocNum,\n\t\tBusinessPartnerRefKey1Cd,\n\t\tBusinessPartnerRefKey2Cd,\n\t\tLineItemRefKeyCd,\n\t\tItemTxt,\n\t\tNegativePostingInd,\n\t\tDocArchiveInd,\n\t\tSplGLTransactiontypeCd,\n\t\tRecordModeCd,\n\t\tAssignmentNum,\n\t\tReferenceTxnAmt,\n\t\tReferenceKeyCd,\n\t\tDocstatusCd,\n\t\tLocalCurrAmt,\n\t\tLocalCurr2Amt,\n\t\tLocalCurr3Amt,\n\t\tFiscalYearNum,\n\t\tSecondCurrencyKeyCd,\n\t\tThirdCurrencyKeyCd,\n\t\tFiscalPeriodDt,\n\t\tWBSElementCd,\n\t\tDebitCreditInd,\n\t\tDocCurrencyAmt,\n\t\tProfitCenterCd,\n\t\tInternalDocHeaderKey,\n\t\tODQChangeModeCd,\n\t\tODQEntityCntrCd,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tJobId,\n\t\tFileName,\n\t\tIsReversedInd,\n\t\tBillingDoc\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> AgingExplExtract1\nFilter12 select(mapColumn(\n\t\teach(match(true()))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> a1\na1, BillingSoldToLookup join(BillingDoc == BillingDocNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join2\nJoin2, SoldToPayerLookup join(PayerCustomerNum == Payer,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join3\nJoin3, BillingDocumentItemData join(SalesDistrDocNum == SalesDistDocumentNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nJoin4, BillingDocumentItemDataNon join(BillingDoc == BillingDocumentItemDataNon@SalesDistDocumentNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join5\nJoin6 derive(SoldToCustomer = case(BranchAccountnum!='', BranchAccountnum,\n case(BranchAccountnum==''&&BillingDoc!='', BillingSoldToLookup@SoldTo, \n case(BranchAccountnum==''&&BillingDoc=='', SoldToPayerLookup@SoldTo, ''))),\n\t\tPastDue1To30DaysAmt = case(toDecimal(toDecimal(toTimestamp(toString(Runon,'yyyyMMdd'),'yyyyMMdd')-\ntoTimestamp(PaymentDueDt,'yyyyMMdd'),17,4)/86400000,17,4)>=1&&\ntoDecimal(toDecimal(toTimestamp(toString(Runon,'yyyyMMdd'),'yyyyMMdd')-\ntoTimestamp(PaymentDueDt,'yyyyMMdd'),17,4)/86400000,17,4)<=30,LocalCurrSignedAmt,toDecimal(0,17,4)),\n\t\tPastDue31To60DaysAmt = case(toDecimal(toDecimal(toTimestamp(toString(Runon,'yyyyMMdd'),'yyyyMMdd')-\ntoTimestamp(PaymentDueDt,'yyyyMMdd'),17,4)/86400000,17,4)>=31&&\ntoDecimal(toDecimal(toTimestamp(toString(Runon,'yyyyMMdd'),'yyyyMMdd')-\ntoTimestamp(PaymentDueDt,'yyyyMMdd'),17,4)/86400000,17,4)<=60,LocalCurrSignedAmt,toDecimal(0,17,4)),\n\t\tPastDue61To90DaysAmt = case(toDecimal(toDecimal(toTimestamp(toString(Runon,'yyyyMMdd'),'yyyyMMdd')-\ntoTimestamp(PaymentDueDt,'yyyyMMdd'),17,4)/86400000,17,4)>=61&&\ntoDecimal(toDecimal(toTimestamp(toString(Runon,'yyyyMMdd'),'yyyyMMdd')-\ntoTimestamp(PaymentDueDt,'yyyyMMdd'),17,4)/86400000,17,4)<=90,LocalCurrSignedAmt,toDecimal(0,17,4)),\n\t\tPastDue91PlusDaysAmt = case(toDecimal(toDecimal(toTimestamp(toString(Runon,'yyyyMMdd'),'yyyyMMdd')-\ntoTimestamp(PaymentDueDt,'yyyyMMdd'),17,4)/86400000,17,4)>=91,LocalCurrSignedAmt,toDecimal(0,17,4)),\n\t\tCurrentARAmt = case(toDecimal(toDecimal(toTimestamp(toString(Runon,'yyyyMMdd'),'yyyyMMdd')-\ntoTimestamp(PaymentDueDt,'yyyyMMdd'),17,4)/86400000,17,4)<=0,LocalCurrSignedAmt,toDecimal(0,17,4)),\n\t\tAgingDate = toString(Runon, 'MM/dd/yyyy'),\n\t\tURLTxt = '',\n\t\tOwner = '',\n\t\tBillToCustomer = case(AccountingDocTypeCd=='U1', BillingDocumentItemData@BillToParty1Num, \ncase(AccountingDocTypeCd!='U1'&&!isNull(BillingDoc)&&BillingDoc!='', BillingDocumentItemDataNon@BillToParty1Num, toString(null()))),\n\t\tAge = toLong(toLong(toTimestamp(toString(Runon,'yyyyMMdd'),'yyyyMMdd')-\ntoTimestamp(PaymentDueDt,'yyyyMMdd'))/86400000),\n\t\t{[DSO]} = toLong(toLong(toTimestamp(toString(Runon,'yyyyMMdd'),'yyyyMMdd')-\ntoTimestamp(DocDt,'yyyyMMdd'))/86400000)) ~> DerivedColumn\nJoin5, datefromfile join(1==1||isNull(CompanyCd)||isNull(Runon),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join6\nFilter6 select(mapColumn(\n\t\tSalesDistDocumentNum,\n\t\tBillToParty1Num\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> BillingDocumentItemDataNon\nDerivedColumn select(mapColumn(\n\t\tCompanyCd,\n\t\tFiscalYearDt,\n\t\tAccountingDocNum,\n\t\tLineItemNum,\n\t\tSubItemnum,\n\t\tFIItemStatusCd,\n\t\tPayerCustomerNum,\n\t\tCreditControlAreaCd,\n\t\tDunninAreaMeas,\n\t\tAccountTypeCd,\n\t\tGLInd,\n\t\tAccountingDocTypeCd,\n\t\tPostingKeyCd,\n\t\tFiscalYearVariantCd,\n\t\tDocDt,\n\t\tDocPostingDt,\n\t\tAccDocEnterDt,\n\t\tClearDt,\n\t\tLastDunnDt,\n\t\tPaymentDueDt,\n\t\tTerms1CashDiscountDueDt,\n\t\tTerms2CashDiscountDueDt,\n\t\tBaselineDueDtForDueDtCalc,\n\t\tFirstCashDiscDaysTm,\n\t\tSecondCashDiscDaysTm,\n\t\tNetPayTermsTm,\n\t\tCashDisc1Pct,\n\t\tCashDisc2Pct,\n\t\tCountrCd,\n\t\tPaymentMethodCd,\n\t\tPaymentKeyTermsCd,\n\t\tPayBlockKeyCd,\n\t\tPaymentReasonCd,\n\t\tDunningBlockCd,\n\t\tDunningCd,\n\t\tDunningLevCd,\n\t\tLocalCurrCd,\n\t\tLocalCurrDebitAmt,\n\t\tLocalCurrCreditAmt,\n\t\tLocalCurrSignedAmt,\n\t\tLocalCurrCashDiscountAmt,\n\t\tCurrencyCd,\n\t\tDocCurrDebitAmt,\n\t\tDocCurrCreditAmt,\n\t\tSignedForeignAmt,\n\t\tEligibleDocDiscountAmt,\n\t\tDocDiscountAmt,\n\t\tChartOfAccountsCd,\n\t\tGLAccountCd,\n\t\tGLAccountNum,\n\t\tBranchAccountnum,\n\t\tClearingDocnum,\n\t\tReferDocNum,\n\t\tTxnInvoicenum,\n\t\tInvoiceFiscalyearNum,\n\t\tInvoicelineItemCd,\n\t\tSalesDistrDocNum,\n\t\tBusinessPartnerRefKey1Cd,\n\t\tBusinessPartnerRefKey2Cd,\n\t\tLineItemRefKeyCd,\n\t\tItemTxt,\n\t\tNegativePostingInd,\n\t\tDocArchiveInd,\n\t\tSplGLTransactiontypeCd,\n\t\tRecordModeCd,\n\t\tAssignmentNum,\n\t\tReferenceTxnAmt,\n\t\tReferenceKeyCd,\n\t\tDocstatusCd,\n\t\tLocalCurrAmt,\n\t\tLocalCurr2Amt,\n\t\tLocalCurr3Amt,\n\t\tFiscalYearNum,\n\t\tSecondCurrencyKeyCd,\n\t\tThirdCurrencyKeyCd,\n\t\tFiscalPeriodDt,\n\t\tWBSElementCd,\n\t\tDebitCreditInd,\n\t\tDocCurrencyAmt,\n\t\tProfitCenterCd,\n\t\tInternalDocHeaderKey,\n\t\tODQChangeModeCd,\n\t\tODQEntityCntrCd,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tJobId,\n\t\tFileName,\n\t\tIsReversedInd,\n\t\tBillingDoc,\n\t\tSoldToCustomer,\n\t\tPastDue1To30DaysAmt,\n\t\tPastDue31To60DaysAmt,\n\t\tPastDue61To90DaysAmt,\n\t\tPastDue91PlusDaysAmt,\n\t\tCurrentARAmt,\n\t\tAgingDate,\n\t\tURLTxt,\n\t\tOwner,\n\t\tBillToCustomer,\n\t\tAge,\n\t\t{[DSO]}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> LogicPopulation\nFilter3 select(mapColumn(\n\t\tCustomerKey,\n\t\tCustomerNum,\n\t\tDunningProcedureCd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> BillTo\nFilter3 select(mapColumn(\n\t\tCustomerKey,\n\t\tCustomerNum,\n\t\tDunningProcedureCd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PayerCust\nLogicPopulation, SoldtoCust join(SoldToCustomer == CustomerNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join7\nJoin7, PayerCust join(PayerCustomerNum == PayerCust@CustomerNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join8\nFilter5 select(mapColumn(\n\t\tBaseCustomerHierKey,\n\t\tCustomerNum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PayerCustHier\nJoin8, SoldtoCustHier join(SoldToCustomer == SoldtoCustHier@CustomerNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join9\nJoin9, PayerCustHier join(PayerCustomerNum == PayerCustHier@CustomerNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join10\nJoin10, customerxref join(SoldToCustomer == EBSCustNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join11\nJoin11, BillTo join(BillToCustomer == BillTo@CustomerNum,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join12\nJoin12 derive(SoldToCustomerKey = case(isNull(SoldToCustomer)||SoldToCustomer=='', -1, \ncase(isNull(SoldtoCust@CustomerKey)||toString(SoldtoCust@CustomerKey)=='', -2, toInteger(SoldtoCust@CustomerKey))),\n\t\tPayerCustomerKey = case(isNull(PayerCustomerNum)||PayerCustomerNum=='', -1, \ncase(isNull(PayerCust@CustomerKey)||toString(PayerCust@CustomerKey)=='', -2, toInteger(PayerCust@CustomerKey))),\n\t\tBillToCustomerKey = case(isNull(BillToCustomer)||BillToCustomer=='', -1, \ncase(isNull(BillTo@CustomerKey)||toString(BillTo@CustomerKey)=='', -2, toInteger(BillTo@CustomerKey))),\n\t\tSoldToCustomerHierarchyKey = case(isNull(SoldToCustomer)||SoldToCustomer=='', -1, \ncase(isNull(SoldtoCustHier@BaseCustomerHierKey)||toString(SoldtoCustHier@BaseCustomerHierKey)=='', -2, toInteger(SoldtoCustHier@BaseCustomerHierKey))),\n\t\tPayerCustomerHierarchyKey = case(isNull(PayerCustomerNum)||PayerCustomerNum=='', -1, \ncase(isNull(PayerCustHier@BaseCustomerHierKey)||toString(PayerCustHier@BaseCustomerHierKey)=='', -2, toInteger(PayerCustHier@BaseCustomerHierKey))),\n\t\tCAMAlignmentKey = case(SoldToCustomer==''||isNull(SoldToCustomer), '-1', SoldToCustomer),\n\t\tCurrentAlignmentKey = case(SoldToCustomer==''||isNull(SoldToCustomer), '-1', SoldToCustomer),\n\t\tPreviousAlignmentKey = case(SoldToCustomer==''||isNull(SoldToCustomer), '-1', SoldToCustomer),\n\t\tAgreementKey = case(SoldToCustomer==''||isNull(SoldToCustomer), '-1', SoldToCustomer),\n\t\tLegacySoldToCustomer = case(AccountingDocTypeCd=='U1', LegacyCustomerCd, ''),\n\t\tPastDue1To30DaysAmt = toString(PastDue1To30DaysAmt),\n\t\tPastDue31To60DaysAmt = toString(PastDue31To60DaysAmt),\n\t\tPastDue61To90DaysAmt = toString(PastDue61To90DaysAmt),\n\t\tPastDue91PlusDaysAmt = toString(PastDue91PlusDaysAmt),\n\t\tCurrentARAmt = toString(CurrentARAmt),\n\t\tPastDueARAmt = toString(PastDue1To30DaysAmt+PastDue31To60DaysAmt+PastDue61To90DaysAmt+PastDue91PlusDaysAmt),\n\t\tTotalARAmt = toString(PastDue1To30DaysAmt+PastDue31To60DaysAmt+PastDue61To90DaysAmt+PastDue91PlusDaysAmt+CurrentARAmt),\n\t\tJobId = $jobid,\n\t\tCreatedDttm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss'),\n\t\tLastUpdtDttm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> DerivedColumn5\nDerivedColumn5 select(mapColumn(\n\t\tCompanyCd,\n\t\tFiscalYearDt,\n\t\tAccountingDocNum,\n\t\tLineItemNum,\n\t\tSubItemnum,\n\t\tFIItemStatusCd,\n\t\tPayerCustomerNum,\n\t\tCreditControlAreaCd,\n\t\tDunninAreaMeas,\n\t\tAccountTypeCd,\n\t\tGLInd,\n\t\tAccountingDocTypeCd,\n\t\tPostingKeyCd,\n\t\tFiscalYearVariantCd,\n\t\tDocDt,\n\t\tDocPostingDt,\n\t\tAccDocEnterDt,\n\t\tClearDt,\n\t\tLastDunnDt,\n\t\tPaymentDueDt,\n\t\tTerms1CashDiscountDueDt,\n\t\tTerms2CashDiscountDueDt,\n\t\tBaselineDueDtForDueDtCalc,\n\t\tFirstCashDiscDaysTm,\n\t\tSecondCashDiscDaysTm,\n\t\tNetPayTermsTm,\n\t\tCashDisc1Pct,\n\t\tCashDisc2Pct,\n\t\tCountrCd,\n\t\tPaymentMethodCd,\n\t\tPaymentKeyTermsCd,\n\t\tPayBlockKeyCd,\n\t\tPaymentReasonCd,\n\t\tDunningBlockCd,\n\t\tDunningCd,\n\t\tDunningLevCd,\n\t\tLocalCurrCd,\n\t\tLocalCurrDebitAmt,\n\t\tLocalCurrCreditAmt,\n\t\tLocalCurrSignedAmt,\n\t\tLocalCurrCashDiscountAmt,\n\t\tCurrencyCd,\n\t\tDocCurrDebitAmt,\n\t\tDocCurrCreditAmt,\n\t\tSignedForeignAmt,\n\t\tEligibleDocDiscountAmt,\n\t\tDocDiscountAmt,\n\t\tChartOfAccountsCd,\n\t\tGLAccountCd,\n\t\tGLAccountNum,\n\t\tBranchAccountnum,\n\t\tClearingDocnum,\n\t\tReferDocNum,\n\t\tTxnInvoicenum,\n\t\tInvoiceFiscalyearNum,\n\t\tInvoicelineItemCd,\n\t\tSalesDistrDocNum,\n\t\tBusinessPartnerRefKey1Cd,\n\t\tBusinessPartnerRefKey2Cd,\n\t\tLineItemRefKeyCd,\n\t\tItemTxt,\n\t\tNegativePostingInd,\n\t\tDocArchiveInd,\n\t\tSplGLTransactiontypeCd,\n\t\tRecordModeCd,\n\t\tAssignmentNum,\n\t\tReferenceTxnAmt,\n\t\tReferenceKeyCd,\n\t\tDocstatusCd,\n\t\tLocalCurrAmt,\n\t\tLocalCurr2Amt,\n\t\tLocalCurr3Amt,\n\t\tFiscalYearNum,\n\t\tSecondCurrencyKeyCd,\n\t\tThirdCurrencyKeyCd,\n\t\tFiscalPeriodDt,\n\t\tWBSElementCd,\n\t\tDebitCreditInd,\n\t\tDocCurrencyAmt,\n\t\tProfitCenterCd,\n\t\tInternalDocHeaderKey,\n\t\tODQChangeModeCd,\n\t\tODQEntityCntrCd,\n\t\tJobId,\n\t\tFileName,\n\t\tIsReversedInd,\n\t\tBillingDoc,\n\t\tSoldToCustomer,\n\t\tPastDue1To30DaysAmt,\n\t\tPastDue31To60DaysAmt,\n\t\tPastDue61To90DaysAmt,\n\t\tPastDue91PlusDaysAmt,\n\t\tCurrentARAmt,\n\t\tAgingDate,\n\t\tURLTxt,\n\t\tOwner,\n\t\tBillToCustomer,\n\t\tAge,\n\t\t{[DSO]},\n\t\tDunningProcedureCd = PayerCust@DunningProcedureCd,\n\t\tEBSCustNum,\n\t\tLegacyCustomerCd,\n\t\tSoldToCustomerKey,\n\t\tPayerCustomerKey,\n\t\tBillToCustomerKey,\n\t\tSoldToCustomerHierarchyKey,\n\t\tPayerCustomerHierarchyKey,\n\t\tCAMAlignmentKey,\n\t\tCurrentAlignmentKey,\n\t\tPreviousAlignmentKey,\n\t\tAgreementKey,\n\t\tLegacySoldToCustomer,\n\t\tPastDueARAmt,\n\t\tTotalARAmt,\n\t\tCreatedDttm = DerivedColumn5@CreatedDttm,\n\t\tLastUpdtDttm = DerivedColumn5@LastUpdtDttm\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FinalDailySet\nCoalesceSourceCntl select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getoldcntlvalue\nCoalesceSourceCntl derive(LastRunDate = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss'),\n\t\tStatus = 'S',\n\t\tSubjectArea = $SubjectAreacntl) ~> DerivedColumn6\nDerivedColumn6 aggregate(groupBy(LastRunDate,\n\t\tStatus,\n\t\tSubjectArea),\n\tdummy = count(1)) ~> Aggregate2\nAggregate2 select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getnewcntlvalue\ngetoldcntlvalue, getnewcntlvalue union(byName: true)~> updatecntl\nCoalesceSourceCntl derive(Runon = 'Enter Date') ~> DerivedColumn7\nAggregate3 select(mapColumn(\n\t\tRunon\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Defaultlvalue\nFinalDailySet, datefromfile join(1==1||isNull(CompanyCd)||isNull(Runon),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join13\nJoin13 filter(toTimestamp(DocDt,'yyyyMMdd')<=toTimestamp(toString(Runon,'yyyyMMdd'),'yyyyMMdd') &&\n(ClearDt ==''||toTimestamp(case(ClearDt=='', '19000101', ClearDt),'yyyyMMdd')>toTimestamp(toString(Runon,'yyyyMMdd'),'yyyyMMdd'))) ~> Filter10\nFilter10 derive(InvoiceNum = case(AccountingDocTypeCd=='U1', trim(ReferDocNum), trim(AccountingDocNum))) ~> DerivedColumn8\nDerivedColumn8 select(mapColumn(\n\t\tCompanyCd,\n\t\tFiscalYearDt,\n\t\tAccountingDocNum,\n\t\tLineItemNum,\n\t\tSubItemnum,\n\t\tFIItemStatusCd,\n\t\tPayer = PayerCustomerNum,\n\t\tCreditControlAreaCd,\n\t\tDunninAreaMeas,\n\t\tAccountTypeCd,\n\t\tGLInd,\n\t\tAccountingDocTypeCd,\n\t\tPostingKeyCd,\n\t\tFiscalVariantCd = FiscalYearVariantCd,\n\t\tDocDt,\n\t\tDocPostingDt,\n\t\tAccDocEnterDt,\n\t\tClearDt,\n\t\tLastDunnDt,\n\t\tNetDueDt = PaymentDueDt,\n\t\tPaymentDtToAvailDiscountI = Terms1CashDiscountDueDt,\n\t\tPaymentDtToAvailDiscountII = Terms2CashDiscountDueDt,\n\t\tBaselineDtForDueDtCalculation = BaselineDueDtForDueDtCalc,\n\t\tDaysToPayWithinToAvailDiscountI = FirstCashDiscDaysTm,\n\t\tDaysToPayWithinToAvailDiscountII = SecondCashDiscDaysTm,\n\t\tNetPayTermsTm,\n\t\tCashDiscountPctI = CashDisc1Pct,\n\t\tCashDiscountPctII = CashDisc2Pct,\n\t\tCountrCd,\n\t\tPaymentMethodCd,\n\t\tPaymentTermsCode = PaymentKeyTermsCd,\n\t\tPaymentBlockKey = PayBlockKeyCd,\n\t\tReasonCodes = PaymentReasonCd,\n\t\tDunningBlock = DunningBlockCd,\n\t\tDunningCd,\n\t\tDunningLevCd,\n\t\tLocalCurrCd,\n\t\tLocalCurrDebitAmt,\n\t\tLocalCurrCreditAmt,\n\t\tLocalCurrSignedAmt,\n\t\tDiscountTakenAndHonoured = LocalCurrCashDiscountAmt,\n\t\tCurrencyCd,\n\t\tDocCurrDebitAmt,\n\t\tDocCurrCreditAmt,\n\t\tSignedForeignAmt,\n\t\tEligibleDocDiscountAmt,\n\t\tDocDiscountAmt,\n\t\tChartOfAccountsCd,\n\t\tGLAccountCd,\n\t\tGLAccountNum,\n\t\tBranchAccountnum,\n\t\tClearingDocnum,\n\t\tReferDocNum,\n\t\tTxnInvoicenum,\n\t\tInvoiceFiscalyearNum,\n\t\tInvoicelineItemCd,\n\t\tSalesDistrDocNum,\n\t\tBusinessPartnerRefKey1Cd,\n\t\tBusinessPartnerRefKey2Cd,\n\t\tLineItemRefKeyCd,\n\t\tItemTxt,\n\t\tNegativePostingInd,\n\t\tDocArchiveInd,\n\t\tSplGLTransactiontypeCd,\n\t\tRecordModeCd,\n\t\tAssignmentNum,\n\t\tReferenceTxnAmt,\n\t\tReferenceKeyCd,\n\t\tDocstatusCd,\n\t\tLocalCurrAmt,\n\t\tAmountInSecondLocalCurrency = LocalCurr2Amt,\n\t\tAmountInThirdLocalCurrency = LocalCurr3Amt,\n\t\tFiscalYearNum,\n\t\tSecondCurrencyKeyCd,\n\t\tThirdCurrencyKeyCd,\n\t\tFiscalPeriodDt,\n\t\tWBSElementCd,\n\t\tDebitCreditInd,\n\t\tDocCurrencyAmt,\n\t\tProfitCenterCd,\n\t\tInternalDocHeaderKey,\n\t\tODQChangeModeCd,\n\t\tODQEntityCntrCd,\n\t\tJobId,\n\t\tFileName,\n\t\tIsReversedInd,\n\t\tBillingDoc,\n\t\tSoldToCustomer,\n\t\tPastDue1To30DaysAmt,\n\t\tPastDue31To60DaysAmt,\n\t\tPastDue61To90DaysAmt,\n\t\tPastDue91PlusDaysAmt,\n\t\tCurrentARAmt,\n\t\tAgingDate,\n\t\tURLTxt,\n\t\tOwner,\n\t\tBillToCustomer,\n\t\tAge,\n\t\t{[DSO]},\n\t\tDunningProcedureCd,\n\t\tEBSCustNum,\n\t\tLegacyCustomerCd,\n\t\tSoldToCustomerKey,\n\t\tPayerCustomerKey,\n\t\tBillToCustomerKey,\n\t\tSoldToCustomerHierarchyKey,\n\t\tPayerCustomerHierarchyKey,\n\t\tCAMAlignmentKey,\n\t\tCurrentAlignmentKey,\n\t\tPreviousAlignmentKey,\n\t\tAgreementKey,\n\t\tLegacySoldToCustomer,\n\t\tPastDueARAmt,\n\t\tTotalARAmt,\n\t\tCreatedDttm,\n\t\tLastUpdtDttm,\n\t\tInvoiceNum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OpenSevendaysDataSet\nOpenSevendaysDataSet derive(forencryption = case(\n    AccountingDocTypeCd == 'U1' && like(CompanyCd, 'US%'),\n    concat('custnbr=29a8dc05-dd09-4a14-975c-ff29f0d418f0&method=getMyBills&acctnumber=', iifNull(SoldToCustomer,''), '&invoice0=009',substring(DocDt,5,2),substring(DocDt,1,4),InvoiceNum),\ncase(\n    AccountingDocTypeCd != 'U1' && like(CompanyCd, 'US%'),\n    concat('custnbr=29a8dc05-dd09-4a14-975c-ff29f0d418f0&method=getMyBills&acctnumber=',iifNull(BillToCustomer,''), '&invoice0=', InvoiceNum), \n\ncase(\n    AccountingDocTypeCd != 'U1' && like(CompanyCd, 'CA%'),\n    concat('custnbr=29a8dc05-dd09-4a14-975c-ff29f0d418f0&method=getMyBills&acctnumber=',iifNull(Payer,''), '&invoice0=', InvoiceNum), ''\n)\n)\n),\n\t\tTMvsCAMOwnership = case(isNull(DunningProcedureCd)||DunningProcedureCd=='', 'CAM Ownership', 'TM Ownership')) ~> DerivedColumn9\nDerivedColumn13 select(mapColumn(\n\t\tAgingDate,\n\t\tSoldToCustomerKey,\n\t\tPayerCustomerKey,\n\t\tBillToCustomerKey,\n\t\tSoldToCustomerHierarchyKey,\n\t\tPayerCustomerHierarchyKey,\n\t\tCAMAlignmentKey,\n\t\tCurrentAlignmentKey,\n\t\tPreviousAlignmentKey,\n\t\tAgreementKey,\n\t\tCompanyCd,\n\t\tFiscalYearDt,\n\t\tAccountingDocNum,\n\t\tLineItemNum,\n\t\tSubItemnum,\n\t\tFIItemStatusCd,\n\t\tPayer,\n\t\tTMvsCAMOwnership,\n\t\tCreditControlAreaCd,\n\t\tDunninAreaMeas,\n\t\tAccountTypeCd,\n\t\tGLInd,\n\t\tAccountingDocTypeCd,\n\t\tPostingKeyCd,\n\t\tFiscalVariantCd,\n\t\tDocDt,\n\t\tDocPostingDt,\n\t\tAccDocEnterDt,\n\t\tClearDt,\n\t\tLastDunnDt,\n\t\tNetDueDt,\n\t\tPaymentDtToAvailDiscountI,\n\t\tPaymentDtToAvailDiscountII,\n\t\tBaselineDtForDueDtCalculation,\n\t\tDaysToPayWithinToAvailDiscountI,\n\t\tDaysToPayWithinToAvailDiscountII,\n\t\tNetPayTermsTm,\n\t\tCashDiscountPctI,\n\t\tCashDiscountPctII,\n\t\tCountrCd,\n\t\tPaymentMethodCd,\n\t\tPaymentTermsCode,\n\t\tPaymentBlockKey,\n\t\tReasonCodes,\n\t\tDunningBlock,\n\t\tDunningCd,\n\t\tDunningLevCd,\n\t\tLocalCurrCd,\n\t\tLocalCurrDebitAmt,\n\t\tLocalCurrCreditAmt,\n\t\tLocalCurrSignedAmt,\n\t\tDiscountTakenAndHonoured,\n\t\tCurrencyCd,\n\t\tDocCurrDebitAmt,\n\t\tDocCurrCreditAmt,\n\t\tSignedForeignAmt,\n\t\tEligibleDocDiscountAmt,\n\t\tDocDiscountAmt,\n\t\tChartOfAccountsCd,\n\t\tGLAccountCd,\n\t\tGLAccountNum,\n\t\tBranchAccountnum,\n\t\tClearingDocnum,\n\t\tReferDocNum,\n\t\tTxnInvoicenum,\n\t\tInvoiceFiscalyearNum,\n\t\tInvoicelineItemCd,\n\t\tSalesDistrDocNum,\n\t\tBusinessPartnerRefKey1Cd,\n\t\tBusinessPartnerRefKey2Cd,\n\t\tLineItemRefKeyCd,\n\t\tItemTxt,\n\t\tNegativePostingInd,\n\t\tDocArchiveInd,\n\t\tSplGLTransactiontypeCd,\n\t\tRecordModeCd,\n\t\tAssignmentNum,\n\t\tReferenceTxnAmt,\n\t\tReferenceKeyCd,\n\t\tDocstatusCd,\n\t\tLocalCurrAmt,\n\t\tAmountInSecondLocalCurrency,\n\t\tAmountInThirdLocalCurrency,\n\t\tFiscalYearNum,\n\t\tSecondCurrencyKeyCd,\n\t\tThirdCurrencyKeyCd,\n\t\tFiscalPeriodDt,\n\t\tWBSElementCd,\n\t\tDebitCreditInd,\n\t\tDocCurrencyAmt,\n\t\tProfitCenterCd,\n\t\tInternalDocHeaderKey,\n\t\tODQChangeModeCd,\n\t\tODQEntityCntrCd,\n\t\tIsReversedInd,\n\t\tBillingDoc,\n\t\tInvoiceNum,\n\t\tSoldToCustomer,\n\t\tDunningProcedureCd,\n\t\tLegacySoldToCustomer,\n\t\tPastDue1To30DaysAmt,\n\t\tPastDue31To60DaysAmt,\n\t\tPastDue61To90DaysAmt,\n\t\tPastDue91PlusDaysAmt,\n\t\tCurrentARAmt,\n\t\tPastDueARAmt,\n\t\tTotalARAmt,\n\t\tURLTxt,\n\t\tOwner,\n\t\tBillToCustomer,\n\t\tAge,\n\t\tDSO = {[DSO]},\n\t\tJobId,\n\t\tFileName,\n\t\tCreatedDttm,\n\t\tLastUpdtDttm\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OpenSevendaysDataSet2\nOpenSevendaysDataSet2 sort(desc(AgingDate, false)) ~> Sort1\nDerivedColumn7 aggregate(groupBy(Runon),\n\tdunny = count(1)) ~> Aggregate3\nCoalesceManualRun derive(RunDt = toString(currentTimestamp(), 'MM/dd/yyyy')) ~> DerivedColumn11\nWindow7 filter(r==1) ~> Filter11\nFilter11 derive(Runon = toTimestamp(Runon,'MM/dd/yyyy')) ~> DerivedColumn12\nManualRun derive(each(match(true()), $$ = coalesce($$,''))) ~> CoalesceManualRun\nSourceSoldToPayerLookup derive(each(match(true()), $$ = coalesce($$,''))) ~> CoalesceSoldToPayerLookup\nSourceBillingSoldToLookup derive(each(match(true()), $$ = coalesce($$,''))) ~> CoalesceBIllingSoldToLookup\nSourceCustomerhier derive(each(match(true()), $$ = coalesce($$,''))) ~> CoalesceCustomerHier\nSourceExtCustomerxref derive(each(match(true()), $$ = coalesce($$,''))) ~> CoalesceExtCustomerXREF\nSourceBillingDocumentItemData derive(each(match(true()), $$ = coalesce($$,''))) ~> CoalesceBillingDocumentData\nAgingExplExtract derive(each(match(true()), $$ = coalesce($$,''))) ~> CoalesceAgingExplExtract\nSourceCustomer derive(each(match(true()), $$ = coalesce($$,''))) ~> CoalesceCustomer\nsourcecntl derive(each(match(true()), $$ = coalesce($$,''))) ~> CoalesceSourceCntl\nDerivedColumn9 derive(URLTxt = concat('https://secure.billtrust.com/xmlwebservices/webServiceDispatch.php?custnbr=29a8dc05-dd09-4a14-975c-ff29f0d418f0&p=','|~|',forencryption),\n\t\tAgingDate = toDate(AgingDate,'MM/dd/yyyy')) ~> DerivedColumn13\nAgingExplExtract1 filter(like(CompanyCd, 'US%')||like(CompanyCd, 'CA%')||like(CompanyCd, 'GB%')||like(CompanyCd, 'IE%')) ~> Filter12\nupdatecntl sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($path_cntl+$filename_cntl+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\tpartitionBy('hash', 1)) ~> sinkCntl\nDefaultlvalue sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($src_path_ManualRun+$filename_ManualRun+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 4,\n\tpartitionBy('hash', 1)) ~> sinkDefaultlvalue\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($target_path+$tsv_folder+$target_filename+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tpartitionBy('hash', 1)) ~> OutputTSV\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($target_path+$parquet_folder+$target_filename+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tpartitionBy('hash', 1)) ~> OutputParquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ECOLABDATALAKE_O2C_CREDIT_WORTH_DIM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "AgingTransactions"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "CLMBPARTNER"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "ZBWDSBP1010"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "FSCMCM3"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "SOLDTOPAYERLOOKUP"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "CntlDimCreditWorth"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "maxAgingdate"
						},
						{
							"name": "Agingdata"
						},
						{
							"name": "CrossJoin"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "payerCreditamount"
						},
						{
							"name": "Window1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "oclmbpartner"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "zbwdsbp10101"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "ThirdParty"
						},
						{
							"name": "Window3"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Credithold"
						},
						{
							"name": "CreditHold1"
						},
						{
							"name": "Join3"
						},
						{
							"name": "finalsetdataset"
						},
						{
							"name": "Join4"
						},
						{
							"name": "getoldcntlvalue"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "getnewcntlvalue"
						},
						{
							"name": "Union1"
						},
						{
							"name": "FinalSet"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Filter6"
						}
					],
					"script": "parameters{\n\tgeneral_path_1 as string ('Analytics/EnterpriseCertified/EnterpriseFacts/Accounts_Receivable/'),\n\tsrc_folder_1 as string ('Aging/'),\n\tfile_name_1 as string ('Aging_Transactions'),\n\tfile_extension_1 as string ('.tsv'),\n\tgeneral_path_2 as string ('Exploration/EnterpriseBackbone/EBS/'),\n\tsrc_folder_2 as string ('0CLM_BPARTNER/'),\n\tfile_name_2 as string ('0CLM_BPARTNER'),\n\tsrc_folder_3 as string ('ZBW_DS_BP1010/'),\n\tfile_name_3 as string ('ZBW_DS_BP1010'),\n\tsrc_folder_4 as string ('0FSCM_CM_3/'),\n\tfile_name_4 as string ('0FSCM_CM_3'),\n\tgeneral_path_3 as string ('Exploration/EnterpriseBackbone/'),\n\tsrc_folder_5 as string ('O2C_Lookup/'),\n\tfile_name_5 as string ('soldtopayerlookup'),\n\ttgt_path_1 as string ('Analytics/EnterpriseCertified/EnterpriseDims/CREDIT_WORTH/'),\n\ttgt_file_1 as string ('dim_credit_worth'),\n\tfile_extension_2 as string ('.parquet'),\n\tgeneral_path_4 as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/'),\n\tsrc_folder_6 as string ('AUDIT_DATA/'),\n\tfile_name_6 as string ('cntl_dim_Credit_worth'),\n\ttgt_path_2 as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/')\n}\nsource(output(\n\t\tAgingDate as string,\n\t\tSoldToCustomerKey as string,\n\t\tPayerCustomerKey as string,\n\t\tBillToCustomerKey as string,\n\t\tSoldToCustomerHierarchyKey as string,\n\t\tPayerCustomerHierarchyKey as string,\n\t\tCAMAlignmentKey as string,\n\t\tCurrentAlignmentKey as string,\n\t\tPreviousAlignmentKey as string,\n\t\tAgreementKey as string,\n\t\tCompanyCd as string,\n\t\tFiscalYearDt as string,\n\t\tAccountingDocNum as string,\n\t\tLineItemNum as string,\n\t\tSubItemnum as string,\n\t\tFIItemStatusCd as string,\n\t\tPayer as string,\n\t\tTMvsCAMOwnership as string,\n\t\tCreditControlAreaCd as string,\n\t\tDunninAreaMeas as string,\n\t\tAccountTypeCd as string,\n\t\tGLInd as string,\n\t\tAccountingDocTypeCd as string,\n\t\tPostingKeyCd as string,\n\t\tFiscalVariantCd as string,\n\t\tDocDt as string,\n\t\tDocPostingDt as string,\n\t\tAccDocEnterDt as string,\n\t\tClearDt as string,\n\t\tLastDunnDt as string,\n\t\tNetDueDt as string,\n\t\tPaymentDtToAvailDiscountI as string,\n\t\tPaymentDtToAvailDiscountII as string,\n\t\tBaselineDtForDueDtCalculation as string,\n\t\tDaysToPayWithinToAvailDiscountI as string,\n\t\tDaysToPayWithinToAvailDiscountII as string,\n\t\tNetPayTermsTm as string,\n\t\tCashDiscountPctI as string,\n\t\tCashDiscountPctII as string,\n\t\tCountrCd as string,\n\t\tPaymentMethodCd as string,\n\t\tPaymentTermsCode as string,\n\t\tPaymentBlockKey as string,\n\t\tReasonCodes as string,\n\t\tDunningBlock as string,\n\t\tDunningCd as string,\n\t\tDunningLevCd as string,\n\t\tLocalCurrCd as string,\n\t\tLocalCurrDebitAmt as string,\n\t\tLocalCurrCreditAmt as string,\n\t\tLocalCurrSignedAmt as string,\n\t\tDiscountTakenAndHonoured as string,\n\t\tCurrencyCd as string,\n\t\tDocCurrDebitAmt as string,\n\t\tDocCurrCreditAmt as string,\n\t\tSignedForeignAmt as string,\n\t\tEligibleDocDiscountAmt as string,\n\t\tDocDiscountAmt as string,\n\t\tChartOfAccountsCd as string,\n\t\tGLAccountCd as string,\n\t\tGLAccountNum as string,\n\t\tBranchAccountnum as string,\n\t\tClearingDocnum as string,\n\t\tReferDocNum as string,\n\t\tTxnInvoicenum as string,\n\t\tInvoiceFiscalyearNum as string,\n\t\tInvoicelineItemCd as string,\n\t\tSalesDistrDocNum as string,\n\t\tBusinessPartnerRefKey1Cd as string,\n\t\tBusinessPartnerRefKey2Cd as string,\n\t\tLineItemRefKeyCd as string,\n\t\tItemTxt as string,\n\t\tNegativePostingInd as string,\n\t\tDocArchiveInd as string,\n\t\tSplGLTransactiontypeCd as string,\n\t\tRecordModeCd as string,\n\t\tAssignmentNum as string,\n\t\tReferenceTxnAmt as string,\n\t\tReferenceKeyCd as string,\n\t\tDocstatusCd as string,\n\t\tLocalCurrAmt as string,\n\t\tAmountInSecondLocalCurrency as string,\n\t\tAmountInThirdLocalCurrency as string,\n\t\tFiscalYearNum as string,\n\t\tSecondCurrencyKeyCd as string,\n\t\tThirdCurrencyKeyCd as string,\n\t\tFiscalPeriodDt as string,\n\t\tWBSElementCd as string,\n\t\tDebitCreditInd as string,\n\t\tDocCurrencyAmt as string,\n\t\tProfitCenterCd as string,\n\t\tInternalDocHeaderKey as string,\n\t\tODQChangeModeCd as string,\n\t\tODQEntityCntrCd as string,\n\t\tIsReversedInd as string,\n\t\tBillingDoc as string,\n\t\tInvoiceNum as string,\n\t\tSoldToCustomer as string,\n\t\tDunningProcedureCd as string,\n\t\tLegacySoldToCustomer as string,\n\t\tPastDue1To30DaysAmt as string,\n\t\tPastDue31To60DaysAmt as string,\n\t\tPastDue61To90DaysAmt as string,\n\t\tPastDue91PlusDaysAmt as float,\n\t\tCurrentARAmt as string,\n\t\tPastDueARAmt as string,\n\t\tTotalARAmt as string,\n\t\tURLTxt as string,\n\t\tOwner as string,\n\t\tBillToCustomer as string,\n\t\tAge as string,\n\t\tDSO as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tCreatedDttm as string,\n\t\tLastUpdtDttm as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($general_path_1+$src_folder_1+$file_name_1+$file_extension_1)]) ~> AgingTransactions\nsource(output(\n\t\tDISequenceNum as string,\n\t\tDIOperationTypeCd as string,\n\t\tBusinessPartnerNum as string,\n\t\tCollectionSegmentCd as string,\n\t\tCollectionGrpCd as string,\n\t\tCollectionSpecialistCd as string,\n\t\tCompanyCd as string,\n\t\tCreatedOnDt as string,\n\t\tClosedOnDt as string,\n\t\tLogicalFISystemCd as string,\n\t\tBWDeltaProcessRecordModeCd as string,\n\t\tLogicalSystemCd as string,\n\t\tFileCreatedDtTm as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($general_path_2+$src_folder_2+$file_name_2+$file_extension_1)]) ~> CLMBPARTNER\nsource(output(\n\t\tBusinessPartnerNum as string,\n\t\tAffidavitCd as string,\n\t\tAffidavitDt as string,\n\t\tLaunchBankruptcyProceedingsInd as string,\n\t\tBankruptcyProceedingsCommencementDt as string,\n\t\tForeclosureCd as string,\n\t\tForeclosureDt as string,\n\t\tCreditStandingCd as string,\n\t\tInstituteProvidingCreditStandingInfoCd as string,\n\t\tCreditStandingInfoStatusCd as string,\n\t\tAdditionalCreditStandingInfoDesc as string,\n\t\tCreditStandingInfoDt as string,\n\t\tRatingCd as string,\n\t\tLegalProceedingsStatusCd as string,\n\t\tLegalProceedingsInitiationDt as string,\n\t\tODQChangeModeCd as string,\n\t\tODQEntityCntrCd as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($general_path_2+$src_folder_3+$file_name_3+$file_extension_1)]) ~> ZBWDSBP1010\nsource(output(\n\t\tClientCd as string,\n\t\tBusinessPartnerNum as string,\n\t\tCreditSegmentCd as string,\n\t\tScoreCd as string,\n\t\tCreditCheckRuleCd as string,\n\t\tLimitCd as string,\n\t\tRatingValidToDt as string,\n\t\tRatingChangeDt as string,\n\t\tCreditAcPartnerCd as string,\n\t\tScoreCalcRule as string,\n\t\tRiskClassCd as string,\n\t\tRiskClassCalculatedCd as string,\n\t\tRiskClassChangeDt as string,\n\t\tCustomerCreditGrpCd as string,\n\t\tCreditLimitNum as string,\n\t\tBlockedbyCreditMgmt as string,\n\t\tLimitValidDt as string,\n\t\tCreditLimitChangeDate as string,\n\t\tCreditAnalystName as string,\n\t\tCustomerCreditGrpCd1 as string,\n\t\tResubmissionFollowUpDt as string,\n\t\tCalcCreditLimitnum as string,\n\t\tSpecialAttentionReqdInd as string,\n\t\tLimitisZeroInd as string,\n\t\tBlockReasonCd as string,\n\t\tCurrencyCd as string,\n\t\tBusinessPartnerNum1 as string,\n\t\tUTCTimeStampTs as string,\n\t\tDeleteFlagInd as string,\n\t\tRecordModeCd as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($general_path_2+$src_folder_4+$file_name_4+$file_extension_1)]) ~> FSCMCM3\nsource(output(\n\t\tPayer as string,\n\t\tSoldTo as string,\n\t\tcountofsoldto as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($general_path_3+$src_folder_5+$file_name_5+$file_extension_1)]) ~> SOLDTOPAYERLOOKUP\nsource(output(\n\t\tLastRunDate as string,\n\t\tStatus as string,\n\t\tSubjectArea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($general_path_4+$src_folder_6+$file_name_6+$file_extension_1)]) ~> CntlDimCreditWorth\nAgingTransactions aggregate(AgingDate = max(toInteger(toString(toDate(AgingDate,\"yyyy-MM-dd\"),\"yyyyMMdd\")))) ~> maxAgingdate\nAgingTransactions select(mapColumn(\n\t\tpayer = Payer,\n\t\tAgingDate,\n\t\tPastDue91PlusDaysAmt\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Agingdata\nAgingdata, maxAgingdate join(1 == 1 || !isNull(Agingdata@AgingDate) || !isNull(maxAgingdate@AgingDate),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> CrossJoin\nCrossJoin filter(toInteger(toString(toDate(Agingdata@AgingDate,\"yyyy-MM-dd\"),\"yyyyMMdd\")) == maxAgingdate@AgingDate) ~> Filter1\nFilter1 aggregate(groupBy(payer),\n\tAmount = sum(toDecimal(case(isNull(PastDue91PlusDaysAmt),0.0000,PastDue91PlusDaysAmt),17,4))) ~> payerCreditamount\nFilter5 window(over(BusinessPartnerNum),\n\tdesc(LastUpdtDtTm, false),\n\tr = rowNumber()) ~> Window1\nWindow1 filter(r == 1) ~> Filter2\nZBWDSBP1010 window(over(BusinessPartnerNum),\n\tdesc(LastUpdtDtTm, false),\n\tr = rowNumber()) ~> Window2\nDerivedColumn3 select(mapColumn(\n\t\tpayer = BusinessPartnerNum,\n\t\tCollectionGrpCd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> oclmbpartner\nWindow2 filter(r == 1) ~> Filter3\nFilter3 derive(InstituteProvidingCreditStandingInfoCd = case(isNull(trim(InstituteProvidingCreditStandingInfoCd)), '', trim(InstituteProvidingCreditStandingInfoCd))) ~> DerivedColumn2\nDerivedColumn2 select(mapColumn(\n\t\tpayer = BusinessPartnerNum,\n\t\tInstituteProvidingCreditStandingInfoCd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> zbwdsbp10101\nFilter2 derive(CollectionGrpCd = case(isNull(trim(CollectionGrpCd)), '', trim(CollectionGrpCd))) ~> DerivedColumn3\npayerCreditamount, oclmbpartner join(payerCreditamount@payer == oclmbpartner@payer,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1, zbwdsbp10101 join(payerCreditamount@payer == zbwdsbp10101@payer,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join2\nJoin2 derive(Third_Party_Collection = case(\n    in(['Z_ECO_US_1','Z_ECO_US_6'], CollectionGrpCd), 'Acct Not subject to 3rd Party Collections',\ncase(\n    in(['0001','0002','0003','0004','0005','0006','0007','0012'], InstituteProvidingCreditStandingInfoCd), '3rd Party Collections', \n\ncase(\n    in(['0008','0009','0010'], InstituteProvidingCreditStandingInfoCd), 'Reinstated Account',\ncase(\n    in(['0011'], InstituteProvidingCreditStandingInfoCd), 'Bankruptcy Account',\ncase(\n    Amount >= 100.0000, 'Acct about to go under Review', 'Acct Not under Review'\n)))))) ~> ThirdParty\nFilter6 window(over(BusinessPartnerNum),\n\tdesc(LastUpdtDtTm, false),\n\tr = rowNumber()) ~> Window3\nWindow3 filter(r == 1) ~> Filter4\nFilter4 derive(CreditCheckRuleCd = case(isNull(trim(CreditCheckRuleCd)), '', trim(CreditCheckRuleCd)),\n\t\tRiskClassCd = case(isNull(trim(RiskClassCd)), '', trim(RiskClassCd))) ~> DerivedColumn5\nDerivedColumn5 derive(Credit_Hold_Status = case(\n    CreditCheckRuleCd == 'ZUS03', 'Under Credit Review',\ncase(\n    CreditCheckRuleCd == 'ZUS02', '--',\ncase(\n    CreditCheckRuleCd == 'ZUS01' && in(['US3','US2'], RiskClassCd), 'Under Credit Review',\ncase(\n    CreditCheckRuleCd == 'ZUS01' && RiskClassCd == 'US1', '--', ''\n))))) ~> Credithold\nCredithold select(mapColumn(\n\t\tpayer = BusinessPartnerNum,\n\t\tCredit_Hold_Status\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CreditHold1\nThirdParty, CreditHold1 join(payerCreditamount@payer == CreditHold1@payer,\n\tjoinType:'outer',\n\tbroadcast: 'auto')~> Join3\nJoin3 derive(Payer = case(!isNull(payerCreditamount@payer), payerCreditamount@payer, CreditHold1@payer),\n\t\tThird_Party_Collection = case(!isNull(Third_Party_Collection), Third_Party_Collection, ''),\n\t\tCredit_Hold_Status = case(!isNull(Credit_Hold_Status), Credit_Hold_Status, ''),\n\t\tCreatedDttm = toString(currentTimestamp(), 'MM/dd/yyyy HH:mm:ss'),\n\t\tLastUpdtDttm = toString(currentTimestamp(), 'MM/dd/yyyy HH:mm:ss')) ~> finalsetdataset\nfinalsetdataset, SOLDTOPAYERLOOKUP join(finalsetdataset@Payer == SOLDTOPAYERLOOKUP@Payer,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nCntlDimCreditWorth select(skipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getoldcntlvalue\nDerivedColumn6 aggregate(groupBy(Status,\n\t\tLastRunDate,\n\t\tSubjectArea),\n\tDummy = max(1)) ~> Aggregate1\nCntlDimCreditWorth derive(LastRunDate = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss'),\n\t\tStatus = 'S',\n\t\tSubjectArea = 'Credit Worth') ~> DerivedColumn6\nAggregate1 select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getnewcntlvalue\ngetoldcntlvalue, getnewcntlvalue union(byName: true)~> Union1\nJoin4 select(mapColumn(\n\t\tPayer = finalsetdataset@Payer,\n\t\tThird_Party_Collection,\n\t\tCredit_Hold_Status,\n\t\tSoldTo,\n\t\tCreatedDttm,\n\t\tLastUpdtDttm\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FinalSet\nCLMBPARTNER filter(currentTimestamp() >= toTimestamp(CreatedOnDt, 'yyyy.MM.dd') && currentTimestamp() <= toTimestamp(ClosedOnDt, 'yyyy.MM.dd')) ~> Filter5\nFSCMCM3 filter(trim(CreditCheckRuleCd) != '') ~> Filter6\nFinalSet sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($tgt_path_1+$tgt_file_1+$file_extension_1)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tpartitionBy('hash', 1)) ~> sink1\nFinalSet sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($tgt_path_1+$tgt_file_1+$file_extension_2)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tpartitionBy('hash', 1)) ~> sink2\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($tgt_path_2+$file_name_6+$file_extension_1)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\tpartitionBy('hash', 1)) ~> sink3"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ELSE_ECOLABDATALAKE_AZONE_DIM_ACCOUNTING_TYPE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "ACCTTYPECntlsource"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "TableACCTTYPETEXTEXPLsource"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "viewdimroute1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimAccountingTypeParquet"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimAccountingTypeTSV"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "AccountingTypeCntlTSV"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "maxdate"
						},
						{
							"name": "Select1"
						},
						{
							"name": "expl"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Delta"
						},
						{
							"name": "getDeltaRowNum"
						},
						{
							"name": "MaxDimKey"
						},
						{
							"name": "Join3"
						},
						{
							"name": "appendMaxKey"
						},
						{
							"name": "GetNewKeyDelta"
						},
						{
							"name": "Join4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Inserts"
						},
						{
							"name": "Join5"
						},
						{
							"name": "Updates"
						},
						{
							"name": "Join6"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "getnewcntlvalue"
						},
						{
							"name": "UnionALL"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "lrd"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Existing"
						},
						{
							"name": "Union3"
						},
						{
							"name": "DTypeChange1"
						},
						{
							"name": "DTypeChange2"
						}
					],
					"script": "parameters{\n\tAudit_Path as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/'),\n\tsrc_filename_Audit_AccountingType_Cntl as string ('AccountingType_Cntl'),\n\tfile_extension_tsv as string ('.tsv'),\n\tsrc_path_Exploration as string ('Exploration/EnterpriseBackbone/EBS/'),\n\tfile_name_0ACCT_TYPE as string ('0ACCT_TYPE'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_accounting_type as string ('dim_accounting_type'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_ACCOUNTING_TYPE as string ('ACCOUNTING_TYPE/')\n}\nsource(output(\n\t\tLastRunDate as string,\n\t\tStatus as string,\n\t\tSubjectArea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Audit_Path+$src_filename_Audit_AccountingType_Cntl+$file_extension_tsv)]) ~> ACCTTYPECntlsource\nsource(output(\n\t\tLanguageKeyCd as string,\n\t\tTextDatasourceKeyCd as string,\n\t\tLongDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_Exploration+$file_name_0ACCT_TYPE+'/'+$file_name_0ACCT_TYPE+$file_extension_tsv)]) ~> TableACCTTYPETEXTEXPLsource\nsource(output(\n\t\tAccountingTypeKey as string,\n\t\tLanguageKeyCd as string,\n\t\tTextDatasourceKeyCd as string,\n\t\tLongDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Analytics_Path + $Analytics_Folder_ACCOUNTING_TYPE + $file_name_dim_accounting_type + $file_extension_tsv)]) ~> viewdimroute1\nACCTTYPECntlsource filter(SubjectArea=='AccountingType'&& Status=='S') ~> Filter1\nFilter1 aggregate(groupBy(SubjectArea,\n\t\tStatus),\n\tLastRunDate = max(toString(toTimestamp(LastRunDate,'M/d/yyyy h:mm:ss a')))) ~> maxdate\nDTypeChange1 select(mapColumn(\n\t\tLanguageKeyCd,\n\t\tTextDatasourceKeyCd,\n\t\tLongDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tJobId,\n\t\tFileName,\n\t\tIsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(CreatedDtTm = coalesce(CreatedDtTm,'01/01/1900 00:00:00'),\n\t\tLastUpdtDtTm = coalesce(LastUpdtDtTm,'01/01/1900 00:00:00'),\n\t\tSubject = 'AccountingType') ~> expl\nexpl, maxdate join(SubjectArea == Subject,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nexpl, lrd join(Select1@LanguageKeyCd == lrd@LanguageKeyCd\n\t&& Select1@TextDatasourceKeyCd == lrd@TextDatasourceKeyCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin2 filter(toTimestamp(toString(toTimestamp(expl@LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss'),'yyyy-mm-dd HH:mm:ss'),'yyyy-mm-dd HH:mm:ss') > toTimestamp(LastRunDate,'yyyy-mm-dd HH:mm:ss')) ~> Filter2\nSelect5 aggregate(groupBy(LanguageKeyCd,\n\t\tTextDatasourceKeyCd,\n\t\tLongDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject),\n\tdummy = count([1])) ~> Aggregate1\nAggregate1 select(mapColumn(\n\t\tLanguageKeyCd,\n\t\tTextDatasourceKeyCd,\n\t\tLongDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Delta\nDelta window(desc(concat(LanguageKeyCd,TextDatasourceKeyCd), true),\n\tNewAccountingTypeKey = rowNumber()) ~> getDeltaRowNum\nDTypeChange2 aggregate(MaxAccountingTypeKey = max(AccountingTypeKey)) ~> MaxDimKey\ngetDeltaRowNum, MaxDimKey join(1 == 1 || !isNull(LanguageKeyCd) || !isNull(MaxAccountingTypeKey),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join3\nJoin3 derive(MaxAccountingTypeKey = case(isNull(MaxAccountingTypeKey), toLong(0) ,(case(MaxAccountingTypeKey<=0,toLong(0),MaxAccountingTypeKey)))) ~> appendMaxKey\nappendMaxKey derive(AccountingTypeKey = NewAccountingTypeKey+MaxAccountingTypeKey) ~> GetNewKeyDelta\nGetNewKeyDelta, viewdimroute1 join(Delta@LanguageKeyCd == viewdimroute1@LanguageKeyCd\n\t&& Delta@TextDatasourceKeyCd == viewdimroute1@TextDatasourceKeyCd,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nJoin4 filter(isNull(viewdimroute1@LanguageKeyCd) || isNull(viewdimroute1@TextDatasourceKeyCd)) ~> Filter3\nSelect6 derive(CreatedDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss'),\n\t\tLastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Inserts\nGetNewKeyDelta, DTypeChange2 join(Delta@LanguageKeyCd == viewdimroute1@LanguageKeyCd\n\t&& Delta@TextDatasourceKeyCd == viewdimroute1@TextDatasourceKeyCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join5\nSelect7 derive(LastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Updates\nGetNewKeyDelta, DTypeChange2 join(Delta@LanguageKeyCd == viewdimroute1@LanguageKeyCd\n\t&& Delta@TextDatasourceKeyCd == viewdimroute1@TextDatasourceKeyCd,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join6\nJoin6 filter(isNull(Delta@TextDatasourceKeyCd) || isNull(Delta@LanguageKeyCd)) ~> Filter4\nDerivedColumn4 aggregate(groupBy(LastRunDate,\n\t\tStatus,\n\t\tSubjectArea),\n\tdummy = count(1)) ~> Aggregate2\nACCTTYPECntlsource derive(LastRunDate = toString(currentTimestamp(),'M/d/yyyy h:mm:ss a'),\n\t\tStatus = 'S',\n\t\tSubjectArea = 'AccountingType') ~> DerivedColumn4\nAggregate2 select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getnewcntlvalue\ngetnewcntlvalue, ACCTTYPECntlsource union(byName: true)~> UnionALL\nUnionALL sort(asc(LastRunDate, true)) ~> Sort1\nJoin1 select(mapColumn(\n\t\tLanguageKeyCd,\n\t\tTextDatasourceKeyCd,\n\t\tLongDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject,\n\t\tLastRunDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lrd\nFilter2 select(mapColumn(\n\t\tLanguageKeyCd = Select1@LanguageKeyCd,\n\t\tTextDatasourceKeyCd = Select1@TextDatasourceKeyCd,\n\t\tLongDesc = Select1@LongDesc,\n\t\tCreatedDtTm = expl@CreatedDtTm,\n\t\tLastUpdtDtTm = expl@LastUpdtDtTm,\n\t\tIsDeletedInd = Select1@IsDeletedInd,\n\t\tSubject = expl@Subject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nFilter3 select(mapColumn(\n\t\tLanguageKeyCd = Delta@LanguageKeyCd,\n\t\tTextDatasourceKeyCd = Delta@TextDatasourceKeyCd,\n\t\tLongDesc = Delta@LongDesc,\n\t\tAccountingTypeKey = GetNewKeyDelta@AccountingTypeKey,\n\t\tIsDeletedInd = Delta@IsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nJoin5 select(mapColumn(\n\t\tLongDesc = Delta@LongDesc,\n\t\tIsDeletedInd = Delta@IsDeletedInd,\n\t\tAccountingTypeKey = DTypeChange2@AccountingTypeKey,\n\t\tLanguageKeyCd = viewdimroute1@LanguageKeyCd,\n\t\tTextDatasourceKeyCd = viewdimroute1@TextDatasourceKeyCd,\n\t\tCreatedDtTm = viewdimroute1@CreatedDtTm\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Select7\nFilter4 select(mapColumn(\n\t\tLanguageKeyCd = viewdimroute1@LanguageKeyCd,\n\t\tTextDatasourceKeyCd = viewdimroute1@TextDatasourceKeyCd,\n\t\tLongDesc = viewdimroute1@LongDesc,\n\t\tCreatedDtTm = viewdimroute1@CreatedDtTm,\n\t\tLastUpdtDtTm = viewdimroute1@LastUpdtDtTm,\n\t\tIsDeletedInd = viewdimroute1@IsDeletedInd,\n\t\tAccountingTypeKey = DTypeChange2@AccountingTypeKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Existing\nInserts, Updates, Existing union(byName: true)~> Union3\nTableACCTTYPETEXTEXPLsource derive(CreatedDtTm = toString(CreatedDtTm),\n\t\tLastUpdtDtTm = toString(LastUpdtDtTm)) ~> DTypeChange1\nviewdimroute1 derive(AccountingTypeKey = toLong(AccountingTypeKey)) ~> DTypeChange2\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path + $Analytics_Folder_ACCOUNTING_TYPE + $file_name_dim_accounting_type +$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tAccountingTypeKey,\n\t\tLanguageKeyCd,\n\t\tTextDatasourceKeyCd,\n\t\tLongDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> dimAccountingTypeParquet\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path + $Analytics_Folder_ACCOUNTING_TYPE + $file_name_dim_accounting_type +$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tAccountingTypeKey,\n\t\tLanguageKeyCd,\n\t\tTextDatasourceKeyCd,\n\t\tLongDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> dimAccountingTypeTSV\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Audit_Path+$src_filename_Audit_AccountingType_Cntl+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\tpartitionBy('hash', 1)) ~> AccountingTypeCntlTSV"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ELSE_ECOLABDATALAKE_AZONE_DIM_ACCOUNT_CHART')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "SrcCntl"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "viewEXPL"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "viewdimroute1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "outputparquet"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "outputtsv"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "updatecntl"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "maxdate"
						},
						{
							"name": "Select1"
						},
						{
							"name": "expl"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Delta"
						},
						{
							"name": "getDeltaRowNum"
						},
						{
							"name": "MaxDimKey"
						},
						{
							"name": "Join3"
						},
						{
							"name": "appendMaxKey"
						},
						{
							"name": "GetNewKeyDelta"
						},
						{
							"name": "Join4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Inserts"
						},
						{
							"name": "Join5"
						},
						{
							"name": "Updates"
						},
						{
							"name": "Join6"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "getnewcntlvalue"
						},
						{
							"name": "UnionALL"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "lrd"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Existing"
						},
						{
							"name": "Union3"
						}
					],
					"script": "parameters{\n\tAudit_Path as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/'),\n\tsrc_filename_Audit_AccountChart_Cntl as string ('AccountChart_Cntl'),\n\tfile_extension_tsv as string ('.tsv'),\n\tsrc_path_Exploration as string ('Exploration/EnterpriseBackbone/EBS/'),\n\tfile_name_0CHRT_ACCTS as string ('0CHRT_ACCTS'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_account_chart as string ('dim_account_chart'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_ACCOUNT_CHART as string ('ACCOUNT_CHART/')\n}\nsource(output(\n\t\tLastRunDate as string,\n\t\tStatus as string,\n\t\tSubjectArea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Audit_Path+$src_filename_Audit_AccountChart_Cntl+$file_extension_tsv)]) ~> SrcCntl\nsource(output(\n\t\tLanguageKeyCd as string,\n\t\tAccountsChartCd as string,\n\t\tAccountsChartDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_Exploration+$file_name_0CHRT_ACCTS+'/'+$file_name_0CHRT_ACCTS+$file_extension_tsv)]) ~> viewEXPL\nsource(output(\n\t\tAccountChartKey as long,\n\t\tLanguageKeyCd as string,\n\t\tAccountsChartCd as string,\n\t\tAccountsChartDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Analytics_Path + $Analytics_Folder_ACCOUNT_CHART + $file_name_dim_account_chart + $file_extension_tsv)]) ~> viewdimroute1\nSrcCntl filter(SubjectArea=='AccountChart' && Status=='S') ~> Filter1\nFilter1 aggregate(groupBy(SubjectArea,\n\t\tStatus),\n\tLastRunDate = max(toString(toTimestamp(LastRunDate,'M/d/yyyy h:mm:ss a')))) ~> maxdate\nviewEXPL select(mapColumn(\n\t\tLanguageKeyCd,\n\t\tAccountsChartCd,\n\t\tAccountsChartDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(CreatedDtTm = coalesce(CreatedDtTm,'01/01/1900 00:00:00'),\n\t\tLastUpdtDtTm = coalesce(LastUpdtDtTm,'01/01/1900 00:00:00'),\n\t\tSubject = 'AccountChart') ~> expl\nexpl, maxdate join(SubjectArea == Subject,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nexpl, lrd join(Select1@LanguageKeyCd == lrd@LanguageKeyCd\n\t&& Select1@AccountsChartCd == lrd@AccountsChartCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin2 filter(toTimestamp(toString(toTimestamp(expl@LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss'),'yyyy-mm-dd HH:mm:ss'),'yyyy-mm-dd HH:mm:ss') > toTimestamp(LastRunDate,'yyyy-mm-dd HH:mm:ss')) ~> Filter2\nSelect5 aggregate(groupBy(LanguageKeyCd,\n\t\tAccountsChartCd,\n\t\tAccountsChartDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject),\n\tdummy = count(LanguageKeyCd)) ~> Aggregate1\nAggregate1 select(mapColumn(\n\t\tLanguageKeyCd,\n\t\tAccountsChartCd,\n\t\tAccountsChartDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Delta\nDelta window(desc(concat(LanguageKeyCd,AccountsChartCd), true),\n\tNewAccountChartKey = rowNumber()) ~> getDeltaRowNum\nviewdimroute1 aggregate(MaxAccountChartKey = max(AccountChartKey)) ~> MaxDimKey\ngetDeltaRowNum, MaxDimKey join(1 == 1 || !isNull(LanguageKeyCd) || !isNull(MaxAccountChartKey),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join3\nJoin3 derive(MaxAccountChartKey = case(isNull(MaxAccountChartKey), toLong(0) ,(case(MaxAccountChartKey<=0,toLong(0),MaxAccountChartKey)))) ~> appendMaxKey\nappendMaxKey derive(AccountChartKey = NewAccountChartKey+MaxAccountChartKey) ~> GetNewKeyDelta\nGetNewKeyDelta, viewdimroute1 join(Delta@LanguageKeyCd == viewdimroute1@LanguageKeyCd\n\t&& Delta@AccountsChartCd == viewdimroute1@AccountsChartCd,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nJoin4 filter(isNull(viewdimroute1@AccountChartKey) || isNull(viewdimroute1@LanguageKeyCd)) ~> Filter3\nSelect6 derive(CreatedDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss'),\n\t\tLastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Inserts\nGetNewKeyDelta, viewdimroute1 join(Delta@LanguageKeyCd == viewdimroute1@LanguageKeyCd\n\t&& Delta@AccountsChartCd == viewdimroute1@AccountsChartCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join5\nSelect7 derive(LastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Updates\nGetNewKeyDelta, viewdimroute1 join(Delta@LanguageKeyCd == viewdimroute1@LanguageKeyCd\n\t&& Delta@AccountsChartCd == viewdimroute1@AccountsChartCd,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join6\nJoin6 filter(isNull(Delta@LanguageKeyCd) || isNull(Delta@AccountsChartCd)) ~> Filter4\nDerivedColumn4 aggregate(groupBy(LastRunDate,\n\t\tStatus,\n\t\tSubjectArea),\n\tdummy = count(1)) ~> Aggregate2\nSrcCntl derive(LastRunDate = toString(currentTimestamp(),'M/d/yyyy h:mm:ss a'),\n\t\tStatus = 'S',\n\t\tSubjectArea = 'AccountChart') ~> DerivedColumn4\nAggregate2 select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getnewcntlvalue\ngetnewcntlvalue, SrcCntl union(byName: true)~> UnionALL\nUnionALL sort(asc(LastRunDate, true)) ~> Sort1\nJoin1 select(mapColumn(\n\t\tLanguageKeyCd,\n\t\tAccountsChartCd,\n\t\tAccountsChartDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject,\n\t\tLastRunDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lrd\nFilter2 select(mapColumn(\n\t\tLanguageKeyCd = Select1@LanguageKeyCd,\n\t\tAccountsChartCd = Select1@AccountsChartCd,\n\t\tAccountsChartDesc = Select1@AccountsChartDesc,\n\t\tCreatedDtTm = expl@CreatedDtTm,\n\t\tLastUpdtDtTm = expl@LastUpdtDtTm,\n\t\tIsDeletedInd = Select1@IsDeletedInd,\n\t\tSubject = expl@Subject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nFilter3 select(mapColumn(\n\t\tLanguageKeyCd = Delta@LanguageKeyCd,\n\t\tAccountsChartCd = Delta@AccountsChartCd,\n\t\tAccountsChartDesc = Delta@AccountsChartDesc,\n\t\tIsDeletedInd = Delta@IsDeletedInd,\n\t\tAccountChartKey = GetNewKeyDelta@AccountChartKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nJoin5 select(mapColumn(\n\t\tAccountsChartDesc = Delta@AccountsChartDesc,\n\t\tIsDeletedInd = Delta@IsDeletedInd,\n\t\tAccountChartKey = viewdimroute1@AccountChartKey,\n\t\tLanguageKeyCd = viewdimroute1@LanguageKeyCd,\n\t\tAccountsChartCd = viewdimroute1@AccountsChartCd,\n\t\tCreatedDtTm = viewdimroute1@CreatedDtTm\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Select7\nFilter4 select(mapColumn(\n\t\tLanguageKeyCd = viewdimroute1@LanguageKeyCd,\n\t\tAccountsChartCd = viewdimroute1@AccountsChartCd,\n\t\tAccountsChartDesc = viewdimroute1@AccountsChartDesc,\n\t\tCreatedDtTm = viewdimroute1@CreatedDtTm,\n\t\tLastUpdtDtTm = viewdimroute1@LastUpdtDtTm,\n\t\tIsDeletedInd = viewdimroute1@IsDeletedInd,\n\t\tAccountChartKey = viewdimroute1@AccountChartKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Existing\nInserts, Updates, Existing union(byName: true)~> Union3\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_ACCOUNT_CHART+$file_name_dim_account_chart+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tAccountChartKey,\n\t\tLanguageKeyCd,\n\t\tAccountsChartCd,\n\t\tAccountsChartDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> outputparquet\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_ACCOUNT_CHART+$file_name_dim_account_chart+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tAccountChartKey,\n\t\tLanguageKeyCd,\n\t\tAccountsChartCd,\n\t\tAccountsChartDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> outputtsv\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Audit_Path+$src_filename_Audit_AccountChart_Cntl+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\tpartitionBy('hash', 1)) ~> updatecntl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ELSE_ECOLABDATALAKE_AZONE_DIM_ACCOUNT_DOCUMENT_TYPE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "SrcCntl"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "viewEXPL"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "viewroute1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "outputparquet"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "outputtsv"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "updatecntl"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "maxdate"
						},
						{
							"name": "Select1"
						},
						{
							"name": "expl"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Delta"
						},
						{
							"name": "getDeltaRowNum"
						},
						{
							"name": "MaxDimKey"
						},
						{
							"name": "Join3"
						},
						{
							"name": "appendMaxKey"
						},
						{
							"name": "GetNewKeyDelta"
						},
						{
							"name": "Join4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Inserts"
						},
						{
							"name": "Join5"
						},
						{
							"name": "Updates"
						},
						{
							"name": "Join6"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "getnewcntlvalue"
						},
						{
							"name": "Union2"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "lrd"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Existing"
						},
						{
							"name": "Union3"
						}
					],
					"script": "parameters{\n\tAudit_Path as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/'),\n\tsrc_filename_Audit_AccountDocumentType_Cntl as string ('AccountDocumentType_Cntl'),\n\tfile_extension_tsv as string ('.tsv'),\n\tsrc_path_Exploration as string ('Exploration/EnterpriseBackbone/EBS/'),\n\tfile_name_0AC_DOC_TYP as string ('0AC_DOC_TYP'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_account_document_type as string ('dim_account_document_type'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_ACCOUNT_DOCUMENT_TYPE as string ('ACCOUNT_DOCUMENT_TYPE/')\n}\nsource(output(\n\t\tLastRunDate as string,\n\t\tStatus as string,\n\t\tSubjectArea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Audit_Path+$src_filename_Audit_AccountDocumentType_Cntl+$file_extension_tsv)]) ~> SrcCntl\nsource(output(\n\t\tLanguageKeyCd as string,\n\t\tDocTypeCd as string,\n\t\tDocTypeDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_Exploration+$file_name_0AC_DOC_TYP+'/'+$file_name_0AC_DOC_TYP+$file_extension_tsv)]) ~> viewEXPL\nsource(output(\n\t\tAccountDocumentTypeKey as long,\n\t\tLanguageKeyCd as string,\n\t\tDocTypeCd as string,\n\t\tDocTypeDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Analytics_Path + $Analytics_Folder_ACCOUNT_DOCUMENT_TYPE + $file_name_dim_account_document_type + $file_extension_tsv)]) ~> viewroute1\nSrcCntl filter(SubjectArea=='Route' && Status=='S') ~> Filter1\nFilter1 aggregate(groupBy(SubjectArea,\n\t\tStatus),\n\tLastRunDate = max(toString(toTimestamp(LastRunDate,'M/d/yyyy h:mm:ss a')))) ~> maxdate\nviewEXPL select(mapColumn(\n\t\tLanguageKeyCd,\n\t\tDocTypeCd,\n\t\tDocTypeDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(CreatedDtTm = coalesce(CreatedDtTm,'01/01/1900 00:00:00'),\n\t\tLastUpdtDtTm = coalesce(LastUpdtDtTm,'01/01/1900 00:00:00'),\n\t\tSubject = 'AccountDocumentType') ~> expl\nexpl, maxdate join(SubjectArea == Subject,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nexpl, lrd join(Select1@LanguageKeyCd == lrd@LanguageKeyCd\n\t&& Select1@DocTypeCd == lrd@DocTypeCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin2 filter(toTimestamp(toString(toTimestamp(expl@LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss'),'yyyy-mm-dd HH:mm:ss'),'yyyy-mm-dd HH:mm:ss') > toTimestamp(LastRunDate,'yyyy-mm-dd HH:mm:ss')) ~> Filter2\nSelect5 aggregate(groupBy(LanguageKeyCd,\n\t\tDocTypeCd,\n\t\tDocTypeDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject),\n\tdummy = count(LanguageKeyCd)) ~> Aggregate1\nAggregate1 select(mapColumn(\n\t\tLanguageKeyCd,\n\t\tDocTypeCd,\n\t\tDocTypeDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Delta\nDelta window(desc(concat(LanguageKeyCd,DocTypeCd), true),\n\tNewAccountDocumentTypeKey = rowNumber()) ~> getDeltaRowNum\nviewroute1 aggregate(MaxAccountDocumentTypeKey = max(AccountDocumentTypeKey)) ~> MaxDimKey\ngetDeltaRowNum, MaxDimKey join(1 == 1 || !isNull(LanguageKeyCd) || !isNull(MaxAccountDocumentTypeKey),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join3\nJoin3 derive(MaxAccountDocumentTypeKey = case(isNull(MaxAccountDocumentTypeKey), toLong(0) ,(case(MaxAccountDocumentTypeKey<=0,toLong(0),MaxAccountDocumentTypeKey)))) ~> appendMaxKey\nappendMaxKey derive(AccountDocumentTypeKey = NewAccountDocumentTypeKey+MaxAccountDocumentTypeKey) ~> GetNewKeyDelta\nGetNewKeyDelta, viewroute1 join(Delta@LanguageKeyCd == viewroute1@LanguageKeyCd\n\t&& Delta@DocTypeCd == viewroute1@DocTypeCd,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nJoin4 filter(isNull(viewroute1@LanguageKeyCd) || isNull(viewroute1@DocTypeCd)) ~> Filter3\nSelect6 derive(CreatedDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss'),\n\t\tLastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Inserts\nGetNewKeyDelta, viewroute1 join(Delta@LanguageKeyCd == viewroute1@LanguageKeyCd\n\t&& Delta@DocTypeCd == viewroute1@DocTypeCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join5\nSelect7 derive(LastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Updates\nGetNewKeyDelta, viewroute1 join(Delta@LanguageKeyCd == viewroute1@LanguageKeyCd\n\t&& Delta@DocTypeCd == viewroute1@DocTypeCd,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join6\nJoin6 filter(isNull(Delta@LanguageKeyCd) || isNull(Delta@DocTypeCd)) ~> Filter4\nDerivedColumn4 aggregate(groupBy(LastRunDate,\n\t\tStatus,\n\t\tSubjectArea),\n\tdummy = count(Status)) ~> Aggregate2\nSrcCntl derive(LastRunDate = toString(currentTimestamp(),'M/d/yyyy h:mm:ss a'),\n\t\tStatus = 'S',\n\t\tSubjectArea = 'AccountDocumentType') ~> DerivedColumn4\nAggregate2 select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getnewcntlvalue\ngetnewcntlvalue, SrcCntl union(byName: true)~> Union2\nUnion2 sort(asc(LastRunDate, true)) ~> Sort1\nJoin1 select(mapColumn(\n\t\tLanguageKeyCd,\n\t\tDocTypeCd,\n\t\tDocTypeDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject,\n\t\tLastRunDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lrd\nFilter2 select(mapColumn(\n\t\tLanguageKeyCd = Select1@LanguageKeyCd,\n\t\tDocTypeCd = Select1@DocTypeCd,\n\t\tDocTypeDesc = Select1@DocTypeDesc,\n\t\tCreatedDtTm = expl@CreatedDtTm,\n\t\tLastUpdtDtTm = expl@LastUpdtDtTm,\n\t\tIsDeletedInd = Select1@IsDeletedInd,\n\t\tSubject = expl@Subject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nFilter3 select(mapColumn(\n\t\tLanguageKeyCd = Delta@LanguageKeyCd,\n\t\tDocTypeCd = Delta@DocTypeCd,\n\t\tDocTypeDesc = Delta@DocTypeDesc,\n\t\tIsDeletedInd = Delta@IsDeletedInd,\n\t\tAccountDocumentTypeKey = GetNewKeyDelta@AccountDocumentTypeKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nJoin5 select(mapColumn(\n\t\tDocTypeDesc = Delta@DocTypeDesc,\n\t\tIsDeletedInd = Delta@IsDeletedInd,\n\t\tAccountDocumentTypeKey = viewroute1@AccountDocumentTypeKey,\n\t\tLanguageKeyCd = viewroute1@LanguageKeyCd,\n\t\tDocTypeCd = viewroute1@DocTypeCd,\n\t\tCreatedDtTm = viewroute1@CreatedDtTm\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Select7\nFilter4 select(mapColumn(\n\t\tLanguageKeyCd = viewroute1@LanguageKeyCd,\n\t\tDocTypeCd = viewroute1@DocTypeCd,\n\t\tDocTypeDesc = viewroute1@DocTypeDesc,\n\t\tCreatedDtTm = viewroute1@CreatedDtTm,\n\t\tLastUpdtDtTm = viewroute1@LastUpdtDtTm,\n\t\tIsDeletedInd = viewroute1@IsDeletedInd,\n\t\tAccountDocumentTypeKey = viewroute1@AccountDocumentTypeKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Existing\nInserts, Updates, Existing union(byName: true)~> Union3\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_ACCOUNT_DOCUMENT_TYPE+$file_name_dim_account_document_type+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tAccountDocumentTypeKey,\n\t\tLanguageKeyCd,\n\t\tDocTypeCd,\n\t\tDocTypeDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> outputparquet\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_ACCOUNT_DOCUMENT_TYPE+$file_name_dim_account_document_type+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tAccountDocumentTypeKey,\n\t\tLanguageKeyCd,\n\t\tDocTypeCd,\n\t\tDocTypeDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> outputtsv\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Audit_Path+$src_filename_Audit_AccountDocumentType_Cntl+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\tpartitionBy('hash', 1)) ~> updatecntl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ELSE_ECOLABDATALAKE_AZONE_DIM_CREDIT_CONTROLLING_AREA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "SrcCntl"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "viewEXPL"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "view1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "outputparquet"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "outputtsv"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "updatecntl"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "maxdate"
						},
						{
							"name": "Select1"
						},
						{
							"name": "expl"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Delta"
						},
						{
							"name": "getDeltaRowNum"
						},
						{
							"name": "MaxDimKey"
						},
						{
							"name": "Join3"
						},
						{
							"name": "appendMaxKey"
						},
						{
							"name": "GetNewKeyDelta"
						},
						{
							"name": "Join4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Inserts"
						},
						{
							"name": "Join5"
						},
						{
							"name": "Updates"
						},
						{
							"name": "Join6"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "getnewcntlvalue"
						},
						{
							"name": "Union2"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "lrd"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Existing"
						},
						{
							"name": "Union3"
						}
					],
					"script": "parameters{\n\tAudit_Path as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/'),\n\tsrc_filename_Audit_CreditControlArea_Cntl as string ('CreditControlArea_Cntl'),\n\tfile_extension_tsv as string ('.tsv'),\n\tsrc_path_Exploration as string ('Exploration/EnterpriseBackbone/EBS/'),\n\tfile_name_0C_CTR_AREA as string ('0C_CTR_AREA'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_credit_controlling_area as string ('dim_credit_controlling_area'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_CREDIT_CONTROLLING_AREA as string ('CREDIT_CONTROLLING_AREA/')\n}\nsource(output(\n\t\tLastRunDate as string,\n\t\tStatus as string,\n\t\tSubjectArea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Audit_Path+$src_filename_Audit_CreditControlArea_Cntl+$file_extension_tsv)]) ~> SrcCntl\nsource(output(\n\t\tCreditControlAreaCd as string,\n\t\tCurrencyKeyCd as string,\n\t\tRiskCatgCd as string,\n\t\tRepresentativeGroupCd as string,\n\t\tLanguageKeyCd as string,\n\t\tCreditControlAreaDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_Exploration+$file_name_0C_CTR_AREA+'/'+$file_name_0C_CTR_AREA+$file_extension_tsv)]) ~> viewEXPL\nsource(output(\n\t\tCreditControlAreaKey as long,\n\t\tCreditControlAreaCd as string,\n\t\tCurrencyKeyCd as string,\n\t\tRiskCatgCd as string,\n\t\tRepresentativeGroupCd as string,\n\t\tLanguageKeyCd as string,\n\t\tCreditControlAreaDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Analytics_Path + $Analytics_Folder_CREDIT_CONTROLLING_AREA + $file_name_dim_credit_controlling_area + $file_extension_tsv)]) ~> view1\nSrcCntl filter(SubjectArea=='CreditControlArea' && Status=='S') ~> Filter1\nFilter1 aggregate(groupBy(SubjectArea,\n\t\tStatus),\n\tLastRunDate = max(toString(toTimestamp(LastRunDate,'MM/dd/yyyy HH:mm:ss')))) ~> maxdate\nviewEXPL select(mapColumn(\n\t\tCreditControlAreaCd,\n\t\tCurrencyKeyCd,\n\t\tRiskCatgCd,\n\t\tRepresentativeGroupCd,\n\t\tLanguageKeyCd,\n\t\tCreditControlAreaDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(CreatedDtTm = coalesce(CreatedDtTm,'01/01/1900 00:00:00'),\n\t\tLastUpdtDtTm = coalesce(LastUpdtDtTm,'01/01/1900 00:00:00'),\n\t\tSubject = 'Route') ~> expl\nexpl, maxdate join(1 == 1 || !isNull(SubjectArea) || !isNull(Subject),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nexpl, lrd join(Select1@CreditControlAreaCd == lrd@CreditControlAreaCd\n\t&& Select1@CurrencyKeyCd == lrd@CurrencyKeyCd\n\t&& Select1@LanguageKeyCd == lrd@LanguageKeyCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin2 filter(toTimestamp(toString(toTimestamp(expl@LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss'),'yyyy-mm-dd HH:mm:ss'),'yyyy-mm-dd HH:mm:ss') > toTimestamp(LastRunDate,'yyyy-mm-dd HH:mm:ss')) ~> Filter2\nSelect5 aggregate(groupBy(CreditControlAreaCd,\n\t\tCurrencyKeyCd,\n\t\tRiskCatgCd,\n\t\tRepresentativeGroupCd,\n\t\tLanguageKeyCd,\n\t\tCreditControlAreaDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject),\n\tdummy = count(LanguageKeyCd)) ~> Aggregate1\nAggregate1 select(mapColumn(\n\t\tCreditControlAreaCd,\n\t\tCurrencyKeyCd,\n\t\tRiskCatgCd,\n\t\tRepresentativeGroupCd,\n\t\tLanguageKeyCd,\n\t\tCreditControlAreaDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Delta\nDelta window(desc(concat(CreditControlAreaCd,CurrencyKeyCd,LanguageKeyCd), true),\n\tNewCreditControlAreaKey = rowNumber()) ~> getDeltaRowNum\nview1 aggregate(MaxCreditControlAreaKey = max(CreditControlAreaKey)) ~> MaxDimKey\ngetDeltaRowNum, MaxDimKey join(1 == 1 || !isNull(LanguageKeyCd) || !isNull(MaxCreditControlAreaKey),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join3\nJoin3 derive(MaxCreditControlAreaKey = case(isNull(MaxCreditControlAreaKey), toLong(0) ,(case(MaxCreditControlAreaKey<=0,toLong(0),MaxCreditControlAreaKey)))) ~> appendMaxKey\nappendMaxKey derive(CreditControlAreaKey = NewCreditControlAreaKey+MaxCreditControlAreaKey) ~> GetNewKeyDelta\nGetNewKeyDelta, view1 join(Delta@CreditControlAreaCd == view1@CreditControlAreaCd\n\t&& Delta@CurrencyKeyCd == view1@CurrencyKeyCd\n\t&& Delta@LanguageKeyCd == view1@LanguageKeyCd,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nJoin4 filter(isNull(view1@CreditControlAreaKey) || isNull(view1@CreditControlAreaCd)||isNull(view1@LanguageKeyCd)) ~> Filter3\nSelect6 derive(CreatedDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss'),\n\t\tLastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Inserts\nGetNewKeyDelta, view1 join(Delta@CreditControlAreaCd == view1@CreditControlAreaCd\n\t&& Delta@CurrencyKeyCd == view1@CurrencyKeyCd\n\t&& Delta@LanguageKeyCd == view1@LanguageKeyCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join5\nSelect7 derive(LastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Updates\nGetNewKeyDelta, view1 join(Delta@CreditControlAreaCd == view1@CreditControlAreaCd\n\t&& Delta@CurrencyKeyCd == view1@CurrencyKeyCd\n\t&& Delta@LanguageKeyCd == view1@LanguageKeyCd,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join6\nJoin6 filter(isNull(Delta@CreditControlAreaCd) || isNull(Delta@CurrencyKeyCd)||isNull(Delta@LanguageKeyCd)) ~> Filter4\nDerivedColumn4 aggregate(groupBy(LastRunDate,\n\t\tStatus,\n\t\tSubjectArea),\n\tdummy = count(Status)) ~> Aggregate2\nSrcCntl derive(LastRunDate = toString(currentTimestamp(),'M/d/yyyy h:mm:ss a'),\n\t\tStatus = 'S',\n\t\tSubjectArea = 'CreditControlArea') ~> DerivedColumn4\nAggregate2 select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getnewcntlvalue\ngetnewcntlvalue, SrcCntl union(byName: true)~> Union2\nUnion2 sort(asc(LastRunDate, true)) ~> Sort1\nJoin1 select(mapColumn(\n\t\tCreditControlAreaCd,\n\t\tCurrencyKeyCd,\n\t\tRiskCatgCd,\n\t\tRepresentativeGroupCd,\n\t\tLanguageKeyCd,\n\t\tCreditControlAreaDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject,\n\t\tLastRunDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lrd\nFilter2 select(mapColumn(\n\t\tCreditControlAreaCd = Select1@CreditControlAreaCd,\n\t\tCurrencyKeyCd = Select1@CurrencyKeyCd,\n\t\tRiskCatgCd = Select1@RiskCatgCd,\n\t\tRepresentativeGroupCd = Select1@RepresentativeGroupCd,\n\t\tLanguageKeyCd = Select1@LanguageKeyCd,\n\t\tCreditControlAreaDesc = Select1@CreditControlAreaDesc,\n\t\tCreatedDtTm = expl@CreatedDtTm,\n\t\tLastUpdtDtTm = expl@LastUpdtDtTm,\n\t\tIsDeletedInd = Select1@IsDeletedInd,\n\t\tSubject = expl@Subject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nFilter3 select(mapColumn(\n\t\tCreditControlAreaCd = Delta@CreditControlAreaCd,\n\t\tCurrencyKeyCd = Delta@CurrencyKeyCd,\n\t\tRiskCatgCd = Delta@RiskCatgCd,\n\t\tRepresentativeGroupCd = Delta@RepresentativeGroupCd,\n\t\tLanguageKeyCd = Delta@LanguageKeyCd,\n\t\tCreditControlAreaDesc = Delta@CreditControlAreaDesc,\n\t\tIsDeletedInd = Delta@IsDeletedInd,\n\t\tCreditControlAreaKey = GetNewKeyDelta@CreditControlAreaKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nJoin5 select(mapColumn(\n\t\tCreditControlAreaDesc = Delta@CreditControlAreaDesc,\n\t\tIsDeletedInd = Delta@IsDeletedInd,\n\t\tCreditControlAreaKey = view1@CreditControlAreaKey,\n\t\tCreditControlAreaCd = view1@CreditControlAreaCd,\n\t\tCurrencyKeyCd = view1@CurrencyKeyCd,\n\t\tRiskCatgCd = view1@RiskCatgCd,\n\t\tRepresentativeGroupCd = Delta@RepresentativeGroupCd,\n\t\tLanguageKeyCd = Delta@LanguageKeyCd,\n\t\tCreatedDtTm = view1@CreatedDtTm\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Select7\nFilter4 select(mapColumn(\n\t\tCreditControlAreaCd = view1@CreditControlAreaCd,\n\t\tCurrencyKeyCd = view1@CurrencyKeyCd,\n\t\tRiskCatgCd = view1@RiskCatgCd,\n\t\tRepresentativeGroupCd = view1@RepresentativeGroupCd,\n\t\tLanguageKeyCd = view1@LanguageKeyCd,\n\t\tCreditControlAreaDesc = view1@CreditControlAreaDesc,\n\t\tCreatedDtTm = view1@CreatedDtTm,\n\t\tLastUpdtDtTm = view1@LastUpdtDtTm,\n\t\tIsDeletedInd = view1@IsDeletedInd,\n\t\tCreditControlAreaKey = view1@CreditControlAreaKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Existing\nInserts, Updates, Existing union(byName: true)~> Union3\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_CREDIT_CONTROLLING_AREA+$file_name_dim_credit_controlling_area+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tCreditControlAreaKey,\n\t\tCreditControlAreaCd,\n\t\tCurrencyKeyCd,\n\t\tRiskCatgCd,\n\t\tRepresentativeGroupCd,\n\t\tLanguageKeyCd,\n\t\tCreditControlAreaDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> outputparquet\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_CREDIT_CONTROLLING_AREA+$file_name_dim_credit_controlling_area+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tCreditControlAreaKey,\n\t\tCreditControlAreaCd,\n\t\tCurrencyKeyCd,\n\t\tRiskCatgCd,\n\t\tRepresentativeGroupCd,\n\t\tLanguageKeyCd,\n\t\tCreditControlAreaDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> outputtsv\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Audit_Path+$src_filename_Audit_CreditControlArea_Cntl+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\tpartitionBy('hash', 1)) ~> updatecntl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ELSE_ECOLABDATALAKE_AZONE_DIM_DUNNING')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "DUNNKEYCntlsource"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "TableDUNNKEYTEXTEXPLsource"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "viewdimdunning1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimDunningParquet"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimDunningTSV"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "DunningCntlTSV"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "maxdate"
						},
						{
							"name": "Select1"
						},
						{
							"name": "expl"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Delta"
						},
						{
							"name": "getDeltaRowNum"
						},
						{
							"name": "MaxDimKey"
						},
						{
							"name": "Join3"
						},
						{
							"name": "appendMaxKey"
						},
						{
							"name": "GetNewKeyDelta"
						},
						{
							"name": "Join4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Inserts"
						},
						{
							"name": "Join5"
						},
						{
							"name": "Updates"
						},
						{
							"name": "Join6"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "getnewcntlvalue"
						},
						{
							"name": "UnionALL"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "lrd"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Existing"
						},
						{
							"name": "Union3"
						},
						{
							"name": "DTypeChange1"
						},
						{
							"name": "DTypeChange2"
						}
					],
					"script": "parameters{\n\tAudit_Path as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/'),\n\tsrc_filename_Audit_Dunning_Cntl as string ('Dunning_Cntl'),\n\tfile_extension_tsv as string ('.tsv'),\n\tsrc_path_Exploration as string ('Exploration/EnterpriseBackbone/EBS/'),\n\tfile_name_0DUNN_KEY as string ('0DUNN_KEY'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_dunning as string ('dim_dunning'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_DUNNING as string ('DUNNING/')\n}\nsource(output(\n\t\tLastRunDate as string,\n\t\tStatus as string,\n\t\tSubjectArea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Audit_Path+$src_filename_Audit_Dunning_Cntl+$file_extension_tsv)]) ~> DUNNKEYCntlsource\nsource(output(\n\t\tLanguageCd as string,\n\t\tDunningKeyCd as string,\n\t\tDunningKeyDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_Exploration+$file_name_0DUNN_KEY+'/'+$file_name_0DUNN_KEY+$file_extension_tsv)]) ~> TableDUNNKEYTEXTEXPLsource\nsource(output(\n\t\tDunningKey as string,\n\t\tLanguageCd as string,\n\t\tDunningKeyCd as string,\n\t\tDunningKeyDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Analytics_Path + $Analytics_Folder_DUNNING + $file_name_dim_dunning + $file_extension_tsv)]) ~> viewdimdunning1\nDUNNKEYCntlsource filter(SubjectArea=='Dunning'&& Status=='S') ~> Filter1\nFilter1 aggregate(groupBy(SubjectArea,\n\t\tStatus),\n\tLastRunDate = max(toString(toTimestamp(LastRunDate,'M/d/yyyy h:mm:ss a')))) ~> maxdate\nDTypeChange1 select(mapColumn(\n\t\tLanguageCd,\n\t\tDunningKeyCd,\n\t\tDunningKeyDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tJobId,\n\t\tFileName,\n\t\tIsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(CreatedDtTm = coalesce(CreatedDtTm,'01/01/1900 00:00:00'),\n\t\tLastUpdtDtTm = coalesce(LastUpdtDtTm,'01/01/1900 00:00:00'),\n\t\tSubject = 'Dunning') ~> expl\nexpl, maxdate join(SubjectArea == Subject,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nexpl, lrd join(Select1@LanguageCd == lrd@LanguageCd\n\t&& Select1@DunningKeyCd == lrd@DunningKeyCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin2 filter(toTimestamp(toString(toTimestamp(expl@LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss'),'yyyy-mm-dd HH:mm:ss'),'yyyy-mm-dd HH:mm:ss') > toTimestamp(LastRunDate,'yyyy-mm-dd HH:mm:ss')) ~> Filter2\nSelect5 aggregate(groupBy(LanguageCd,\n\t\tDunningKeyCd,\n\t\tDunningKeyDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject),\n\tdummy = count([1])) ~> Aggregate1\nAggregate1 select(mapColumn(\n\t\tLanguageCd,\n\t\tDunningKeyCd,\n\t\tDunningKeyDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Delta\nDelta window(desc(concat(LanguageCd,DunningKeyCd), true),\n\tNewDunningKey = rowNumber()) ~> getDeltaRowNum\nDTypeChange2 aggregate(MaxDunningKey = max(DunningKey)) ~> MaxDimKey\ngetDeltaRowNum, MaxDimKey join(1 == 1 || !isNull(LanguageCd) || !isNull(MaxDunningKey),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join3\nJoin3 derive(MaxDunningKey = case(isNull(MaxDunningKey), toLong(0) ,(case(MaxDunningKey<=0,toLong(0),MaxDunningKey)))) ~> appendMaxKey\nappendMaxKey derive(DunningKey = NewDunningKey+MaxDunningKey) ~> GetNewKeyDelta\nGetNewKeyDelta, viewdimdunning1 join(Delta@LanguageCd == viewdimdunning1@LanguageCd\n\t&& Delta@DunningKeyCd == viewdimdunning1@DunningKeyCd,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nJoin4 filter(isNull(viewdimdunning1@LanguageCd) || isNull(viewdimdunning1@DunningKeyCd)) ~> Filter3\nSelect6 derive(CreatedDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss'),\n\t\tLastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Inserts\nGetNewKeyDelta, DTypeChange2 join(Delta@LanguageCd == viewdimdunning1@LanguageCd\n\t&& Delta@DunningKeyCd == viewdimdunning1@DunningKeyCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join5\nSelect7 derive(LastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Updates\nGetNewKeyDelta, DTypeChange2 join(Delta@LanguageCd == viewdimdunning1@LanguageCd\n\t&& Delta@DunningKeyCd == viewdimdunning1@DunningKeyCd,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join6\nJoin6 filter(isNull(Delta@DunningKeyCd) || isNull(Delta@LanguageCd)) ~> Filter4\nDerivedColumn4 aggregate(groupBy(LastRunDate,\n\t\tStatus,\n\t\tSubjectArea),\n\tdummy = count(1)) ~> Aggregate2\nDUNNKEYCntlsource derive(LastRunDate = toString(currentTimestamp(),'M/d/yyyy h:mm:ss a'),\n\t\tStatus = 'S',\n\t\tSubjectArea = 'Dunning') ~> DerivedColumn4\nAggregate2 select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getnewcntlvalue\ngetnewcntlvalue, DUNNKEYCntlsource union(byName: true)~> UnionALL\nUnionALL sort(asc(LastRunDate, true)) ~> Sort1\nJoin1 select(mapColumn(\n\t\tLanguageCd,\n\t\tDunningKeyCd,\n\t\tDunningKeyDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject,\n\t\tLastRunDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lrd\nFilter2 select(mapColumn(\n\t\tLanguageCd = Select1@LanguageCd,\n\t\tDunningKeyCd = Select1@DunningKeyCd,\n\t\tDunningKeyDesc = Select1@DunningKeyDesc,\n\t\tCreatedDtTm = expl@CreatedDtTm,\n\t\tLastUpdtDtTm = expl@LastUpdtDtTm,\n\t\tIsDeletedInd = Select1@IsDeletedInd,\n\t\tSubject = expl@Subject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nFilter3 select(mapColumn(\n\t\tLanguageCd = Delta@LanguageCd,\n\t\tDunningKeyCd = Delta@DunningKeyCd,\n\t\tDunningKeyDesc = Delta@DunningKeyDesc,\n\t\tDunningKey = GetNewKeyDelta@DunningKey,\n\t\tIsDeletedInd = Delta@IsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nJoin5 select(mapColumn(\n\t\tDunningKeyDesc = Delta@DunningKeyDesc,\n\t\tIsDeletedInd = Delta@IsDeletedInd,\n\t\tDunningKey = DTypeChange2@DunningKey,\n\t\tLanguageCd = viewdimdunning1@LanguageCd,\n\t\tDunningKeyCd = viewdimdunning1@DunningKeyCd,\n\t\tCreatedDtTm = DTypeChange2@CreatedDtTm\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Select7\nFilter4 select(mapColumn(\n\t\tLanguageCd = viewdimdunning1@LanguageCd,\n\t\tDunningKeyCd = viewdimdunning1@DunningKeyCd,\n\t\tDunningKeyDesc = viewdimdunning1@DunningKeyDesc,\n\t\tCreatedDtTm = DTypeChange2@CreatedDtTm,\n\t\tLastUpdtDtTm = DTypeChange2@LastUpdtDtTm,\n\t\tIsDeletedInd = viewdimdunning1@IsDeletedInd,\n\t\tDunningKey = DTypeChange2@DunningKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Existing\nInserts, Updates, Existing union(byName: true)~> Union3\nTableDUNNKEYTEXTEXPLsource derive(CreatedDtTm = toString(CreatedDtTm),\n\t\tLastUpdtDtTm = toString(LastUpdtDtTm)) ~> DTypeChange1\nviewdimdunning1 derive(DunningKey = toLong(DunningKey),\n\t\tCreatedDtTm = toString(CreatedDtTm),\n\t\tLastUpdtDtTm = toString(LastUpdtDtTm)) ~> DTypeChange2\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path + $Analytics_Folder_DUNNING + $file_name_dim_dunning +$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tDunningKey,\n\t\tLanguageCd,\n\t\tDunningKeyCd,\n\t\tDunningKeyDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> dimDunningParquet\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path + $Analytics_Folder_DUNNING + $file_name_dim_dunning +$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tDunningKey,\n\t\tLanguageCd,\n\t\tDunningKeyCd,\n\t\tDunningKeyDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> dimDunningTSV\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Audit_Path+$src_filename_Audit_Dunning_Cntl+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\tpartitionBy('hash', 1)) ~> DunningCntlTSV"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ELSE_ECOLABDATALAKE_AZONE_DIM_DUNNING_BLOCK')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "DUNNBLOCKCntlsource"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "TableDUNNBLOCKTEXTEXPLsource"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "viewdimdunningblock1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimDunningBlockParquet"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimDunningBlockTSV"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "DunningBlockCntlTSV"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "maxdate"
						},
						{
							"name": "Select1"
						},
						{
							"name": "expl"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Delta"
						},
						{
							"name": "getDeltaRowNum"
						},
						{
							"name": "MaxDimKey"
						},
						{
							"name": "Join3"
						},
						{
							"name": "appendMaxKey"
						},
						{
							"name": "GetNewKeyDelta"
						},
						{
							"name": "Join4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Inserts"
						},
						{
							"name": "Join5"
						},
						{
							"name": "Updates"
						},
						{
							"name": "Join6"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "getnewcntlvalue"
						},
						{
							"name": "UnionALL"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "lrd"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Existing"
						},
						{
							"name": "Union3"
						},
						{
							"name": "DTypeChange1"
						},
						{
							"name": "DTypeChange2"
						}
					],
					"script": "parameters{\n\tAudit_Path as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/'),\n\tsrc_filename_Audit_DunningBlock_Cntl as string ('DunningBlock_Cntl'),\n\tfile_extension_tsv as string ('.tsv'),\n\tsrc_path_Exploration as string ('Exploration/EnterpriseBackbone/EBS/'),\n\tfile_name_0DUNN_BLOCK as string ('0DUNN_BLOCK'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_dunning_block as string ('dim_dunning_block'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_DUNNING_BLOCK as string ('DUNNING_BLOCK/')\n}\nsource(output(\n\t\tLastRunDate as string,\n\t\tStatus as string,\n\t\tSubjectArea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Audit_Path+$src_filename_Audit_DunningBlock_Cntl+$file_extension_tsv)]) ~> DUNNBLOCKCntlsource\nsource(output(\n\t\tLanguageCd as string,\n\t\tDunningBlockCd as string,\n\t\tDunningBlockDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_Exploration+$file_name_0DUNN_BLOCK+'/'+$file_name_0DUNN_BLOCK+$file_extension_tsv)]) ~> TableDUNNBLOCKTEXTEXPLsource\nsource(output(\n\t\tDunningBlockKey as string,\n\t\tLanguageCd as string,\n\t\tDunningBlockCd as string,\n\t\tDunningBlockDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Analytics_Path + $Analytics_Folder_DUNNING_BLOCK + $file_name_dim_dunning_block + $file_extension_tsv)]) ~> viewdimdunningblock1\nDUNNBLOCKCntlsource filter(SubjectArea=='DunningBlock'&& Status=='S') ~> Filter1\nFilter1 aggregate(groupBy(SubjectArea,\n\t\tStatus),\n\tLastRunDate = max(toString(toTimestamp(LastRunDate,'M/d/yyyy h:mm:ss a')))) ~> maxdate\nDTypeChange1 select(mapColumn(\n\t\tLanguageCd,\n\t\tDunningBlockCd,\n\t\tDunningBlockDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tJobId,\n\t\tFileName,\n\t\tIsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(CreatedDtTm = coalesce(CreatedDtTm,'01/01/1900 00:00:00'),\n\t\tLastUpdtDtTm = coalesce(LastUpdtDtTm,'01/01/1900 00:00:00'),\n\t\tSubject = 'DunningBlock') ~> expl\nexpl, maxdate join(SubjectArea == Subject,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nexpl, lrd join(Select1@LanguageCd == lrd@LanguageCd\n\t&& Select1@DunningBlockCd == lrd@DunningBlockCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin2 filter(toTimestamp(toString(toTimestamp(expl@LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss'),'yyyy-mm-dd HH:mm:ss'),'yyyy-mm-dd HH:mm:ss') > toTimestamp(LastRunDate,'yyyy-mm-dd HH:mm:ss')) ~> Filter2\nSelect5 aggregate(groupBy(LanguageCd,\n\t\tDunningBlockCd,\n\t\tDunningBlockDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject),\n\tdummy = count([1])) ~> Aggregate1\nAggregate1 select(mapColumn(\n\t\tLanguageCd,\n\t\tDunningBlockCd,\n\t\tDunningBlockDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Delta\nDelta window(desc(concat(LanguageCd,DunningBlockCd), true),\n\tNewDunningBlockKey = rowNumber()) ~> getDeltaRowNum\nDTypeChange2 aggregate(MaxDunningBlockKey = max(DunningBlockKey)) ~> MaxDimKey\ngetDeltaRowNum, MaxDimKey join(1 == 1 || !isNull(LanguageCd) || !isNull(MaxDunningBlockKey),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join3\nJoin3 derive(MaxDunningBlockKey = case(isNull(MaxDunningBlockKey), toLong(0) ,(case(MaxDunningBlockKey<=0,toLong(0),MaxDunningBlockKey)))) ~> appendMaxKey\nappendMaxKey derive(DunningBlockKey = NewDunningBlockKey+MaxDunningBlockKey) ~> GetNewKeyDelta\nGetNewKeyDelta, viewdimdunningblock1 join(Delta@LanguageCd == viewdimdunningblock1@LanguageCd\n\t&& Delta@DunningBlockCd == viewdimdunningblock1@DunningBlockCd,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nJoin4 filter(isNull(viewdimdunningblock1@LanguageCd) || isNull(viewdimdunningblock1@DunningBlockCd)) ~> Filter3\nSelect6 derive(CreatedDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss'),\n\t\tLastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Inserts\nGetNewKeyDelta, DTypeChange2 join(Delta@LanguageCd == viewdimdunningblock1@LanguageCd\n\t&& Delta@DunningBlockCd == viewdimdunningblock1@DunningBlockCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join5\nSelect7 derive(LastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Updates\nGetNewKeyDelta, DTypeChange2 join(Delta@LanguageCd == viewdimdunningblock1@LanguageCd\n\t&& Delta@DunningBlockCd == viewdimdunningblock1@DunningBlockCd,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join6\nJoin6 filter(isNull(Delta@DunningBlockCd) || isNull(Delta@LanguageCd)) ~> Filter4\nDerivedColumn4 aggregate(groupBy(LastRunDate,\n\t\tStatus,\n\t\tSubjectArea),\n\tdummy = count(1)) ~> Aggregate2\nDUNNBLOCKCntlsource derive(LastRunDate = toString(currentTimestamp(),'M/d/yyyy h:mm:ss a'),\n\t\tStatus = 'S',\n\t\tSubjectArea = 'DunningBlock') ~> DerivedColumn4\nAggregate2 select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getnewcntlvalue\ngetnewcntlvalue, DUNNBLOCKCntlsource union(byName: true)~> UnionALL\nUnionALL sort(asc(LastRunDate, true)) ~> Sort1\nJoin1 select(mapColumn(\n\t\tLanguageCd,\n\t\tDunningBlockCd,\n\t\tDunningBlockDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject,\n\t\tLastRunDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lrd\nFilter2 select(mapColumn(\n\t\tLanguageCd = Select1@LanguageCd,\n\t\tDunningBlockCd = Select1@DunningBlockCd,\n\t\tDunningBlockDesc = Select1@DunningBlockDesc,\n\t\tCreatedDtTm = expl@CreatedDtTm,\n\t\tLastUpdtDtTm = expl@LastUpdtDtTm,\n\t\tIsDeletedInd = Select1@IsDeletedInd,\n\t\tSubject = expl@Subject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nFilter3 select(mapColumn(\n\t\tLanguageCd = Delta@LanguageCd,\n\t\tDunningBlockCd = Delta@DunningBlockCd,\n\t\tDunningBlockDesc = Delta@DunningBlockDesc,\n\t\tDunningBlockKey = GetNewKeyDelta@DunningBlockKey,\n\t\tIsDeletedInd = Delta@IsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nJoin5 select(mapColumn(\n\t\tDunningBlockDesc = Delta@DunningBlockDesc,\n\t\tIsDeletedInd = Delta@IsDeletedInd,\n\t\tDunningBlockKey = DTypeChange2@DunningBlockKey,\n\t\tLanguageCd = viewdimdunningblock1@LanguageCd,\n\t\tDunningBlockCd = viewdimdunningblock1@DunningBlockCd,\n\t\tCreatedDtTm = DTypeChange2@CreatedDtTm\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Select7\nFilter4 select(mapColumn(\n\t\tLanguageCd = viewdimdunningblock1@LanguageCd,\n\t\tDunningBlockCd = viewdimdunningblock1@DunningBlockCd,\n\t\tDunningBlockDesc = viewdimdunningblock1@DunningBlockDesc,\n\t\tCreatedDtTm = DTypeChange2@CreatedDtTm,\n\t\tLastUpdtDtTm = DTypeChange2@LastUpdtDtTm,\n\t\tIsDeletedInd = viewdimdunningblock1@IsDeletedInd,\n\t\tDunningBlockKey = DTypeChange2@DunningBlockKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Existing\nInserts, Updates, Existing union(byName: true)~> Union3\nTableDUNNBLOCKTEXTEXPLsource derive(CreatedDtTm = toString(CreatedDtTm),\n\t\tLastUpdtDtTm = toString(LastUpdtDtTm)) ~> DTypeChange1\nviewdimdunningblock1 derive(DunningBlockKey = toLong(DunningBlockKey),\n\t\tCreatedDtTm = toString(CreatedDtTm),\n\t\tLastUpdtDtTm = toString(LastUpdtDtTm)) ~> DTypeChange2\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path + $Analytics_Folder_DUNNING_BLOCK + $file_name_dim_dunning_block +$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tDunningBlockKey,\n\t\tLanguageCd,\n\t\tDunningBlockCd,\n\t\tDunningBlockDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> dimDunningBlockParquet\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path + $Analytics_Folder_DUNNING_BLOCK + $file_name_dim_dunning_block +$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tDunningBlockKey,\n\t\tLanguageCd,\n\t\tDunningBlockCd,\n\t\tDunningBlockDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> dimDunningBlockTSV\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Audit_Path+$src_filename_Audit_DunningBlock_Cntl+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\tpartitionBy('hash', 1)) ~> DunningBlockCntlTSV"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ELSE_ECOLABDATALAKE_AZONE_DIM_PAYMENT_BLOCK')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "PMNTBLOCKCntlsource"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "TablePMNTBLOCKTEXTEXPLsource"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "viewdimbillingblock1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimPaymentBlockParquet"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimPaymentBlockTSV"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "PaymentBlockCntlTSV"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "maxdate"
						},
						{
							"name": "Select1"
						},
						{
							"name": "expl"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Delta"
						},
						{
							"name": "getDeltaRowNum"
						},
						{
							"name": "MaxDimKey"
						},
						{
							"name": "Join3"
						},
						{
							"name": "appendMaxKey"
						},
						{
							"name": "GetNewKeyDelta"
						},
						{
							"name": "Join4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Inserts"
						},
						{
							"name": "Join5"
						},
						{
							"name": "Updates"
						},
						{
							"name": "Join6"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "getnewcntlvalue"
						},
						{
							"name": "UnionALL"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "lrd"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Existing"
						},
						{
							"name": "Union3"
						},
						{
							"name": "DTypeChange1"
						},
						{
							"name": "DTypeChange2"
						},
						{
							"name": "Select8"
						}
					],
					"script": "parameters{\n\tAudit_Path as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/'),\n\tsrc_filename_Audit_PaymentBlock_Cntl as string ('PaymentBlock_Cntl'),\n\tfile_extension_tsv as string ('.tsv'),\n\tsrc_path_Exploration as string ('Exploration/EnterpriseBackbone/EBS/'),\n\tfile_name_0PMNT_BLOCK as string ('0PMNT_BLOCK'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_payment_block as string ('dim_payment_block'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_PAYMENT_BLOCK as string ('PAYMENT_BLOCK/')\n}\nsource(output(\n\t\tLastRunDate as string,\n\t\tStatus as string,\n\t\tSubjectArea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Audit_Path+$src_filename_Audit_PaymentBlock_Cntl+$file_extension_tsv)]) ~> PMNTBLOCKCntlsource\nsource(output(\n\t\tLanguageCd as string,\n\t\tPaymentBlockCd as string,\n\t\tPaymentBlockDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_Exploration+$file_name_0PMNT_BLOCK+'/'+$file_name_0PMNT_BLOCK+$file_extension_tsv)]) ~> TablePMNTBLOCKTEXTEXPLsource\nsource(output(\n\t\tPaymentBlockKey as string,\n\t\tLanguageCd as string,\n\t\tPaymentBlockCd as string,\n\t\tPaymentBlockDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Analytics_Path + $Analytics_Folder_PAYMENT_BLOCK + $file_name_dim_payment_block + $file_extension_tsv)]) ~> viewdimbillingblock1\nPMNTBLOCKCntlsource filter(SubjectArea=='PaymentBlock'&& Status=='S') ~> Filter1\nFilter1 aggregate(groupBy(SubjectArea,\n\t\tStatus),\n\tLastRunDate = max(toString(toTimestamp(LastRunDate,'M/d/yyyy h:mm:ss a')))) ~> maxdate\nDTypeChange1 select(mapColumn(\n\t\tLanguageCd,\n\t\tPaymentBlockCd,\n\t\tPaymentBlockDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tJobId,\n\t\tFileName,\n\t\tIsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(CreatedDtTm = coalesce(CreatedDtTm,'01/01/1900 00:00:00'),\n\t\tLastUpdtDtTm = coalesce(LastUpdtDtTm,'01/01/1900 00:00:00'),\n\t\tSubject = 'PaymentBlock') ~> expl\nexpl, maxdate join(SubjectArea == Subject,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nexpl, lrd join(Select1@LanguageCd == lrd@LanguageCd\n\t&& Select1@PaymentBlockCd == lrd@PaymentBlockCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin2 filter(toTimestamp\r\n(toString\r\n(toTimestamp(expl@LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss'),'yyyy-mm-dd HH:mm:ss')\r\n,'yyyy-mm-dd HH:mm:ss') \r\n> toTimestamp(LastRunDate,'yyyy-mm-dd HH:mm:ss')) ~> Filter2\nSelect5 aggregate(groupBy(LanguageCd,\n\t\tPaymentBlockCd,\n\t\tPaymentBlockDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject),\n\tdummy = count([1])) ~> Aggregate1\nAggregate1 select(mapColumn(\n\t\tLanguageCd,\n\t\tPaymentBlockCd,\n\t\tPaymentBlockDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Delta\nDelta window(desc(concat(LanguageCd,PaymentBlockCd), true),\n\tNewPaymentBlockKey = rowNumber()) ~> getDeltaRowNum\nDTypeChange2 aggregate(MaxPaymentBlockKey = max(PaymentBlockKey)) ~> MaxDimKey\ngetDeltaRowNum, MaxDimKey join(1 == 1 || !isNull(LanguageCd) || !isNull(MaxPaymentBlockKey),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join3\nJoin3 derive(MaxPaymentBlockKey = case(isNull(MaxPaymentBlockKey), toLong(0) ,(case(MaxPaymentBlockKey<=0,toLong(0),MaxPaymentBlockKey)))) ~> appendMaxKey\nappendMaxKey derive(PaymentBlockKey = NewPaymentBlockKey+MaxPaymentBlockKey) ~> GetNewKeyDelta\nGetNewKeyDelta, viewdimbillingblock1 join(Delta@LanguageCd == viewdimbillingblock1@LanguageCd\n\t&& Delta@PaymentBlockCd == viewdimbillingblock1@PaymentBlockCd,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nJoin4 filter(isNull(viewdimbillingblock1@LanguageCd) || isNull(viewdimbillingblock1@PaymentBlockCd)) ~> Filter3\nSelect6 derive(CreatedDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss'),\n\t\tLastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Inserts\nGetNewKeyDelta, DTypeChange2 join(Delta@LanguageCd == viewdimbillingblock1@LanguageCd\n\t&& Delta@PaymentBlockCd == viewdimbillingblock1@PaymentBlockCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join5\nSelect7 derive(LastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Updates\nGetNewKeyDelta, DTypeChange2 join(Delta@LanguageCd == viewdimbillingblock1@LanguageCd\n\t&& Delta@PaymentBlockCd == viewdimbillingblock1@PaymentBlockCd,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join6\nJoin6 filter(isNull(Delta@PaymentBlockCd) || isNull(Delta@LanguageCd)) ~> Filter4\nDerivedColumn4 aggregate(groupBy(LastRunDate,\n\t\tStatus,\n\t\tSubjectArea),\n\tdummy = count(1)) ~> Aggregate2\nPMNTBLOCKCntlsource derive(LastRunDate = toString(currentTimestamp(),'M/d/yyyy h:mm:ss a'),\n\t\tStatus = 'S',\n\t\tSubjectArea = 'PaymentBlock') ~> DerivedColumn4\nAggregate2 select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getnewcntlvalue\ngetnewcntlvalue, PMNTBLOCKCntlsource union(byName: true)~> UnionALL\nUnionALL sort(asc(LastRunDate, true)) ~> Sort1\nJoin1 select(mapColumn(\n\t\tLanguageCd,\n\t\tPaymentBlockCd,\n\t\tPaymentBlockDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject,\n\t\tLastRunDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lrd\nFilter2 select(mapColumn(\n\t\tLanguageCd = Select1@LanguageCd,\n\t\tPaymentBlockCd = Select1@PaymentBlockCd,\n\t\tPaymentBlockDesc = Select1@PaymentBlockDesc,\n\t\tCreatedDtTm = expl@CreatedDtTm,\n\t\tLastUpdtDtTm = expl@LastUpdtDtTm,\n\t\tIsDeletedInd = Select1@IsDeletedInd,\n\t\tSubject = expl@Subject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nFilter3 select(mapColumn(\n\t\tLanguageCd = Delta@LanguageCd,\n\t\tPaymentBlockCd = Delta@PaymentBlockCd,\n\t\tPaymentBlockDesc = Delta@PaymentBlockDesc,\n\t\tPaymentBlockKey = GetNewKeyDelta@PaymentBlockKey,\n\t\tIsDeletedInd = Delta@IsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nJoin5 select(mapColumn(\n\t\tPaymentBlockKey = DTypeChange2@PaymentBlockKey,\n\t\tLanguageCd = viewdimbillingblock1@LanguageCd,\n\t\tPaymentBlockCd = viewdimbillingblock1@PaymentBlockCd,\n\t\tPaymentBlockDesc = Delta@PaymentBlockDesc,\n\t\tIsDeletedInd = Delta@IsDeletedInd,\n\t\tCreatedDtTm = DTypeChange2@CreatedDtTm\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Select7\nFilter4 select(mapColumn(\n\t\tPaymentBlockKey = DTypeChange2@PaymentBlockKey,\n\t\tLanguageCd = viewdimbillingblock1@LanguageCd,\n\t\tPaymentBlockCd = viewdimbillingblock1@PaymentBlockCd,\n\t\tPaymentBlockDesc = viewdimbillingblock1@PaymentBlockDesc,\n\t\tCreatedDtTm = DTypeChange2@CreatedDtTm,\n\t\tLastUpdtDtTm = DTypeChange2@LastUpdtDtTm,\n\t\tIsDeletedInd = viewdimbillingblock1@IsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Existing\nInserts, Updates, Existing union(byName: true)~> Union3\nTablePMNTBLOCKTEXTEXPLsource derive(CreatedDtTm = toString(CreatedDtTm),\n\t\tLastUpdtDtTm = toString(LastUpdtDtTm)) ~> DTypeChange1\nviewdimbillingblock1 derive(PaymentBlockKey = toLong(PaymentBlockKey),\n\t\tCreatedDtTm = toString(CreatedDtTm),\n\t\tLastUpdtDtTm = toString(LastUpdtDtTm)) ~> DTypeChange2\nUnion3 select(mapColumn(\n\t\tPaymentBlockKey,\n\t\tLanguageCd,\n\t\tPaymentBlockCd,\n\t\tPaymentBlockDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select8\nSelect8 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path + $Analytics_Folder_PAYMENT_BLOCK + $file_name_dim_payment_block +$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tpartitionBy('hash', 1)) ~> dimPaymentBlockParquet\nSelect8 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path + $Analytics_Folder_PAYMENT_BLOCK + $file_name_dim_payment_block +$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tpartitionBy('hash', 1)) ~> dimPaymentBlockTSV\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Audit_Path+$src_filename_Audit_PaymentBlock_Cntl+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\tpartitionBy('hash', 1)) ~> PaymentBlockCntlTSV"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ELSE_ECOLABDATALAKE_AZONE_DIM_PAYMENT_METHOD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "SrcCntl"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "viewEXPL"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "view1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "outputparquet"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "outputtsv"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "updatecntl"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "maxdate"
						},
						{
							"name": "Select1"
						},
						{
							"name": "expl"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Delta"
						},
						{
							"name": "getDeltaRowNum"
						},
						{
							"name": "MaxDimKey"
						},
						{
							"name": "Join3"
						},
						{
							"name": "appendMaxKey"
						},
						{
							"name": "GetNewKeyDelta"
						},
						{
							"name": "Join4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Inserts"
						},
						{
							"name": "Join5"
						},
						{
							"name": "Updates"
						},
						{
							"name": "Join6"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "getnewcntlvalue"
						},
						{
							"name": "UnionALL"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "lrd"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Existing"
						},
						{
							"name": "Union3"
						}
					],
					"script": "parameters{\n\tAudit_Path as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/'),\n\tsrc_filename_Audit_PaymentMethod_Cntl as string ('PaymentMethod_Cntl'),\n\tfile_extension_tsv as string ('.tsv'),\n\tsrc_path_Exploration as string ('Exploration/EnterpriseBackbone/EBS/'),\n\tfile_name_0PYMT_METH as string ('0PYMT_METH'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_payment_method as string ('dim_payment_method'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_PAYMENT_METHOD as string ('PAYMENT_METHOD/')\n}\nsource(output(\n\t\tLastRunDate as string,\n\t\tStatus as string,\n\t\tSubjectArea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Audit_Path+$src_filename_Audit_PaymentMethod_Cntl+$file_extension_tsv)]) ~> SrcCntl\nsource(output(\n\t\tCountryCd as string,\n\t\tPaymentMethCd as string,\n\t\tPaymentMethName as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_Exploration+$file_name_0PYMT_METH+'/'+$file_name_0PYMT_METH+$file_extension_tsv)]) ~> viewEXPL\nsource(output(\n\t\tPaymentMethodKey as long,\n\t\tCountryCd as string,\n\t\tPaymentMethCd as string,\n\t\tPaymentMethName as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Analytics_Path + $Analytics_Folder_PAYMENT_METHOD + $file_name_dim_payment_method + $file_extension_tsv)]) ~> view1\nSrcCntl filter(SubjectArea=='PaymentMethod' && Status=='S') ~> Filter1\nFilter1 aggregate(groupBy(SubjectArea,\n\t\tStatus),\n\tLastRunDate = max(toString(toTimestamp(LastRunDate,'M/d/yyyy h:mm:ss a')))) ~> maxdate\nviewEXPL select(mapColumn(\n\t\tCountryCd,\n\t\tPaymentMethCd,\n\t\tPaymentMethName,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(CreatedDtTm = coalesce(CreatedDtTm,'01/01/1900 00:00:00'),\n\t\tLastUpdtDtTm = coalesce(LastUpdtDtTm,'01/01/1900 00:00:00'),\n\t\tSubject = 'PaymentMethod') ~> expl\nexpl, maxdate join(SubjectArea == Subject,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nexpl, lrd join(Select1@CountryCd == lrd@CountryCd\n\t&& Select1@PaymentMethCd == lrd@PaymentMethCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin2 filter(toTimestamp(toString(toTimestamp(expl@LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss'),'yyyy-mm-dd HH:mm:ss'),'yyyy-mm-dd HH:mm:ss') > toTimestamp(LastRunDate,'yyyy-mm-dd HH:mm:ss')) ~> Filter2\nSelect5 aggregate(groupBy(CountryCd,\n\t\tPaymentMethCd,\n\t\tPaymentMethName,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject),\n\tdummy = count(CountryCd)) ~> Aggregate1\nAggregate1 select(mapColumn(\n\t\tCountryCd,\n\t\tPaymentMethCd,\n\t\tPaymentMethName,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Delta\nDelta window(desc(concat(CountryCd,PaymentMethCd), true),\n\tNewPaymentMethodKey = rowNumber()) ~> getDeltaRowNum\nview1 aggregate(MaxPaymentMethodKey = max(PaymentMethodKey)) ~> MaxDimKey\ngetDeltaRowNum, MaxDimKey join(1 == 1 || !isNull(CountryCd) || !isNull(MaxPaymentMethodKey),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join3\nJoin3 derive(MaxPaymentMethodKey = case(isNull(MaxPaymentMethodKey), toLong(0) ,(case(MaxPaymentMethodKey<=0,toLong(0),MaxPaymentMethodKey)))) ~> appendMaxKey\nappendMaxKey derive(PaymentMethodKey = NewPaymentMethodKey+MaxPaymentMethodKey) ~> GetNewKeyDelta\nGetNewKeyDelta, view1 join(Delta@CountryCd == view1@CountryCd\n\t&& Delta@PaymentMethCd == view1@PaymentMethCd,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nJoin4 filter(isNull(view1@CountryCd) || isNull(view1@PaymentMethCd)) ~> Filter3\nSelect6 derive(CreatedDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss'),\n\t\tLastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Inserts\nGetNewKeyDelta, view1 join(Delta@CountryCd == view1@CountryCd\n\t&& Delta@PaymentMethCd == view1@PaymentMethCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join5\nSelect7 derive(LastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Updates\nGetNewKeyDelta, view1 join(Delta@CountryCd == view1@CountryCd\n\t&& Delta@PaymentMethCd == view1@PaymentMethCd,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join6\nJoin6 filter(isNull(Delta@CountryCd) || isNull(Delta@PaymentMethCd)) ~> Filter4\nDerivedColumn4 aggregate(groupBy(LastRunDate,\n\t\tStatus,\n\t\tSubjectArea),\n\tdummy = count(1)) ~> Aggregate2\nSrcCntl derive(LastRunDate = toString(currentTimestamp(),'M/d/yyyy h:mm:ss a'),\n\t\tStatus = 'S',\n\t\tSubjectArea = 'PaymentMethod') ~> DerivedColumn4\nAggregate2 select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getnewcntlvalue\ngetnewcntlvalue, SrcCntl union(byName: true)~> UnionALL\nUnionALL sort(asc(LastRunDate, true)) ~> Sort1\nJoin1 select(mapColumn(\n\t\tCountryCd,\n\t\tPaymentMethCd,\n\t\tPaymentMethName,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject,\n\t\tLastRunDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lrd\nFilter2 select(mapColumn(\n\t\tCountryCd = Select1@CountryCd,\n\t\tPaymentMethCd = Select1@PaymentMethCd,\n\t\tPaymentMethName = Select1@PaymentMethName,\n\t\tCreatedDtTm = expl@CreatedDtTm,\n\t\tLastUpdtDtTm = expl@LastUpdtDtTm,\n\t\tIsDeletedInd = Select1@IsDeletedInd,\n\t\tSubject = expl@Subject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nFilter3 select(mapColumn(\n\t\tCountryCd = Delta@CountryCd,\n\t\tPaymentMethCd = Delta@PaymentMethCd,\n\t\tPaymentMethName = Delta@PaymentMethName,\n\t\tCreatedDtTm = Delta@CreatedDtTm,\n\t\tLastUpdtDtTm = Delta@LastUpdtDtTm,\n\t\tIsDeletedInd = Delta@IsDeletedInd,\n\t\tPaymentMethodKey = GetNewKeyDelta@PaymentMethodKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nJoin5 select(mapColumn(\n\t\tPaymentMethName = Delta@PaymentMethName,\n\t\tIsDeletedInd = Delta@IsDeletedInd,\n\t\tCountryCd = view1@CountryCd,\n\t\tPaymentMethCd = view1@PaymentMethCd,\n\t\tCreatedDtTm = view1@CreatedDtTm,\n\t\tLastUpdtDtTm = view1@LastUpdtDtTm,\n\t\tPaymentMethodKey = view1@PaymentMethodKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Select7\nFilter4 select(mapColumn(\n\t\tCountryCd = view1@CountryCd,\n\t\tPaymentMethCd = view1@PaymentMethCd,\n\t\tPaymentMethName = view1@PaymentMethName,\n\t\tCreatedDtTm = view1@CreatedDtTm,\n\t\tLastUpdtDtTm = view1@LastUpdtDtTm,\n\t\tIsDeletedInd = view1@IsDeletedInd,\n\t\tPaymentMethodKey = view1@PaymentMethodKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Existing\nInserts, Updates, Existing union(byName: true)~> Union3\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path + $Analytics_Folder_PAYMENT_METHOD + $file_name_dim_payment_method +$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tPaymentMethodKey,\n\t\tCountryCd,\n\t\tPaymentMethCd,\n\t\tPaymentMethName,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> outputparquet\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path + $Analytics_Folder_PAYMENT_METHOD + $file_name_dim_payment_method +$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tPaymentMethodKey,\n\t\tCountryCd,\n\t\tPaymentMethCd,\n\t\tPaymentMethName,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> outputtsv\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Audit_Path+$src_filename_Audit_PaymentMethod_Cntl+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\tpartitionBy('hash', 1)) ~> updatecntl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ELSE_ECOLABDATALAKE_AZONE_DIM_PAYMENT_REASON')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "REASONCDECntlsource"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "TableREASONCDETEXTEXPLsource"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "viewdimroute1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimPaymentReasonParquet"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimPaymentReasonTSV"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "PaymentReasonCntlTSV"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "maxdate"
						},
						{
							"name": "Select1"
						},
						{
							"name": "expl"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Delta"
						},
						{
							"name": "getDeltaRowNum"
						},
						{
							"name": "MaxDimKey"
						},
						{
							"name": "Join3"
						},
						{
							"name": "appendMaxKey"
						},
						{
							"name": "GetNewKeyDelta"
						},
						{
							"name": "Join4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Inserts"
						},
						{
							"name": "Join5"
						},
						{
							"name": "Updates"
						},
						{
							"name": "Join6"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "getnewcntlvalue"
						},
						{
							"name": "UnionALL"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "lrd"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Existing"
						},
						{
							"name": "Union3"
						},
						{
							"name": "DTypeChange1"
						},
						{
							"name": "DTypeChange2"
						}
					],
					"script": "parameters{\n\tAudit_Path as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/'),\n\tsrc_filename_Audit_P as string ('PaymentReason_Cntl'),\n\tfile_extension_tsv as string ('.tsv'),\n\tsrc_path_Exploration as string ('Exploration/EnterpriseBackbone/EBS/'),\n\tfile_name_0REASON_CDE as string ('0REASON_CDE'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_payment_reaareason as string ('dim_payment_reason'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_PAYMENT_REASON as string ('PAYMENT_REASON/')\n}\nsource(output(\n\t\tLastRunDate as string,\n\t\tStatus as string,\n\t\tSubjectArea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Audit_Path+$src_filename_Audit_P+$file_extension_tsv)]) ~> REASONCDECntlsource\nsource(output(\n\t\tLanguageCd as string,\n\t\tCompanyCd as string,\n\t\tPaymentReasonCd as string,\n\t\tReasonShortTxt as string,\n\t\tReasonLongTxt as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_Exploration+$file_name_0REASON_CDE+'/'+$file_name_0REASON_CDE+$file_extension_tsv)]) ~> TableREASONCDETEXTEXPLsource\nsource(output(\n\t\tPaymentReasonKey as string,\n\t\tLanguageCd as string,\n\t\tCompanyCd as string,\n\t\tPaymentReasonCd as string,\n\t\tReasonShortTxt as string,\n\t\tReasonLongTxt as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Analytics_Path + $Analytics_Folder_PAYMENT_REASON + $file_name_dim_payment_reaareason + $file_extension_tsv)]) ~> viewdimroute1\nREASONCDECntlsource filter(SubjectArea=='PaymentReason'&& Status=='S') ~> Filter1\nFilter1 aggregate(groupBy(SubjectArea,\n\t\tStatus),\n\tLastRunDate = max(toString(toTimestamp(LastRunDate,'M/d/yyyy h:mm:ss a')))) ~> maxdate\nDTypeChange1 select(mapColumn(\n\t\tLanguageCd,\n\t\tCompanyCd,\n\t\tPaymentReasonCd,\n\t\tReasonShortTxt,\n\t\tReasonLongTxt,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tJobId,\n\t\tFileName,\n\t\tIsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(CreatedDtTm = coalesce(CreatedDtTm,'01/01/1900 00:00:00'),\n\t\tLastUpdtDtTm = coalesce(LastUpdtDtTm,'01/01/1900 00:00:00'),\n\t\tSubject = 'PaymentReason') ~> expl\nexpl, maxdate join(SubjectArea == Subject,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nexpl, lrd join(Select1@LanguageCd == lrd@LanguageCd\n\t&& Select1@CompanyCd == lrd@CompanyCd\n\t&& Select1@PaymentReasonCd == lrd@PaymentReasonCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin2 filter(toTimestamp(toString(toTimestamp(expl@LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss'),'yyyy-mm-dd HH:mm:ss'),'yyyy-mm-dd HH:mm:ss') > toTimestamp(LastRunDate,'yyyy-mm-dd HH:mm:ss')) ~> Filter2\nSelect5 aggregate(groupBy(LanguageCd,\n\t\tCompanyCd,\n\t\tPaymentReasonCd,\n\t\tReasonShortTxt,\n\t\tReasonLongTxt,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject),\n\tdummy = count([1])) ~> Aggregate1\nAggregate1 select(mapColumn(\n\t\tLanguageCd,\n\t\tCompanyCd,\n\t\tPaymentReasonCd,\n\t\tReasonShortTxt,\n\t\tReasonLongTxt,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Delta\nDelta window(desc(concat(LanguageCd,CompanyCd,PaymentReasonCd), true),\n\tNewPaymentReasonKey = rowNumber()) ~> getDeltaRowNum\nDTypeChange2 aggregate(MaxPaymentReasonKey = max(PaymentReasonKey)) ~> MaxDimKey\ngetDeltaRowNum, MaxDimKey join(1 == 1 || !isNull(LanguageCd) || !isNull(MaxPaymentReasonKey),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join3\nJoin3 derive(MaxPaymentReasonKey = case(isNull(MaxPaymentReasonKey), toLong(0) ,(case(MaxPaymentReasonKey<=0,toLong(0),MaxPaymentReasonKey)))) ~> appendMaxKey\nappendMaxKey derive(PaymentReasonKey = NewPaymentReasonKey+MaxPaymentReasonKey) ~> GetNewKeyDelta\nGetNewKeyDelta, viewdimroute1 join(Delta@LanguageCd == viewdimroute1@LanguageCd\n\t&& Delta@CompanyCd == viewdimroute1@CompanyCd\n\t&& Delta@PaymentReasonCd == viewdimroute1@PaymentReasonCd,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nJoin4 filter(isNull(viewdimroute1@LanguageCd) || isNull(viewdimroute1@CompanyCd) || isNull(viewdimroute1@PaymentReasonCd)) ~> Filter3\nSelect6 derive(CreatedDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss'),\n\t\tLastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Inserts\nGetNewKeyDelta, DTypeChange2 join(Delta@LanguageCd == viewdimroute1@LanguageCd\n\t&& Delta@CompanyCd == viewdimroute1@CompanyCd\n\t&& Delta@PaymentReasonCd == viewdimroute1@PaymentReasonCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join5\nSelect7 derive(LastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Updates\nGetNewKeyDelta, DTypeChange2 join(Delta@LanguageCd == viewdimroute1@LanguageCd\n\t&& Delta@CompanyCd == viewdimroute1@CompanyCd\n\t&& Delta@PaymentReasonCd == viewdimroute1@PaymentReasonCd,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join6\nJoin6 filter(isNull(Delta@CompanyCd) || isNull(Delta@LanguageCd) || isNull(Delta@PaymentReasonCd)) ~> Filter4\nDerivedColumn4 aggregate(groupBy(LastRunDate,\n\t\tStatus,\n\t\tSubjectArea),\n\tdummy = count(1)) ~> Aggregate2\nREASONCDECntlsource derive(LastRunDate = toString(currentTimestamp(),'M/d/yyyy h:mm:ss a'),\n\t\tStatus = 'S',\n\t\tSubjectArea = 'PaymentReason') ~> DerivedColumn4\nAggregate2 select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getnewcntlvalue\ngetnewcntlvalue, REASONCDECntlsource union(byName: true)~> UnionALL\nUnionALL sort(asc(LastRunDate, true)) ~> Sort1\nJoin1 select(mapColumn(\n\t\tLanguageCd,\n\t\tCompanyCd,\n\t\tPaymentReasonCd,\n\t\tReasonShortTxt,\n\t\tReasonLongTxt,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject,\n\t\tLastRunDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lrd\nFilter2 select(mapColumn(\n\t\tLanguageCd = Select1@LanguageCd,\n\t\tCompanyCd = Select1@CompanyCd,\n\t\tPaymentReasonCd = Select1@PaymentReasonCd,\n\t\tReasonShortTxt = Select1@ReasonShortTxt,\n\t\tReasonLongTxt = Select1@ReasonLongTxt,\n\t\tCreatedDtTm = expl@CreatedDtTm,\n\t\tLastUpdtDtTm = expl@LastUpdtDtTm,\n\t\tIsDeletedInd = Select1@IsDeletedInd,\n\t\tSubject = expl@Subject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nFilter3 select(mapColumn(\n\t\tLanguageCd = Delta@LanguageCd,\n\t\tCompanyCd = Delta@CompanyCd,\n\t\tPaymentReasonCd = Delta@PaymentReasonCd,\n\t\tReasonShortTxt = Delta@ReasonShortTxt,\n\t\tReasonLongTxt = Delta@ReasonLongTxt,\n\t\tPaymentReasonKey = GetNewKeyDelta@PaymentReasonKey,\n\t\tIsDeletedInd = Delta@IsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nJoin5 select(mapColumn(\n\t\tPaymentReasonCd = viewdimroute1@PaymentReasonCd,\n\t\tIsDeletedInd = Delta@IsDeletedInd,\n\t\tPaymentReasonKey = DTypeChange2@PaymentReasonKey,\n\t\tLanguageCd = viewdimroute1@LanguageCd,\n\t\tCompanyCd = viewdimroute1@CompanyCd,\n\t\tCreatedDtTm = DTypeChange2@CreatedDtTm,\n\t\tReasonShortTxt = Delta@ReasonShortTxt,\n\t\tReasonLongTxt = Delta@ReasonLongTxt\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Select7\nFilter4 select(mapColumn(\n\t\tLanguageCd = viewdimroute1@LanguageCd,\n\t\tCompanyCd = viewdimroute1@CompanyCd,\n\t\tPaymentReasonCd = viewdimroute1@PaymentReasonCd,\n\t\tReasonShortTxt = viewdimroute1@ReasonShortTxt,\n\t\tReasonLongTxt = viewdimroute1@ReasonLongTxt,\n\t\tCreatedDtTm = DTypeChange2@CreatedDtTm,\n\t\tLastUpdtDtTm = DTypeChange2@LastUpdtDtTm,\n\t\tIsDeletedInd = viewdimroute1@IsDeletedInd,\n\t\tPaymentReasonKey = DTypeChange2@PaymentReasonKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Existing\nInserts, Updates, Existing union(byName: true)~> Union3\nTableREASONCDETEXTEXPLsource derive(CreatedDtTm = toString(CreatedDtTm),\n\t\tLastUpdtDtTm = toString(LastUpdtDtTm)) ~> DTypeChange1\nviewdimroute1 derive(PaymentReasonKey = toLong(PaymentReasonKey),\n\t\tCreatedDtTm = toString(CreatedDtTm),\n\t\tLastUpdtDtTm = toString(LastUpdtDtTm)) ~> DTypeChange2\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path + $Analytics_Folder_PAYMENT_REASON + $file_name_dim_payment_reaareason +$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tPaymentReasonKey,\n\t\tLanguageCd,\n\t\tCompanyCd,\n\t\tPaymentReasonCd,\n\t\tReasonShortTxt,\n\t\tReasonLongTxt,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> dimPaymentReasonParquet\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path + $Analytics_Folder_PAYMENT_REASON + $file_name_dim_payment_reaareason +$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tPaymentReasonKey,\n\t\tLanguageCd,\n\t\tCompanyCd,\n\t\tPaymentReasonCd,\n\t\tReasonShortTxt,\n\t\tReasonLongTxt,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> dimPaymentReasonTSV\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Audit_Path+$src_filename_Audit_P+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\tpartitionBy('hash', 1)) ~> PaymentReasonCntlTSV"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ELSE_ECOLABDATALAKE_AZONE_DIM_PAYMENT_TERM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "IDPAYTERMBRCntlsource"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "TableIDPAYTERMBRTEXTEXPLsource"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "viewdimroute1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimPaymentTermParquet"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimPaymentTermTSV"
						},
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "PaymentTermCntlTSV"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "maxdate"
						},
						{
							"name": "Select1"
						},
						{
							"name": "expl"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Delta"
						},
						{
							"name": "getDeltaRowNum"
						},
						{
							"name": "MaxDimKey"
						},
						{
							"name": "Join3"
						},
						{
							"name": "appendMaxKey"
						},
						{
							"name": "GetNewKeyDelta"
						},
						{
							"name": "Join4"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Inserts"
						},
						{
							"name": "Join5"
						},
						{
							"name": "Updates"
						},
						{
							"name": "Join6"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "getnewcntlvalue"
						},
						{
							"name": "UnionALL"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "lrd"
						},
						{
							"name": "Select5"
						},
						{
							"name": "Select6"
						},
						{
							"name": "Select7"
						},
						{
							"name": "Existing"
						},
						{
							"name": "Union3"
						},
						{
							"name": "DTypeChange1"
						},
						{
							"name": "DTypeChange2"
						}
					],
					"script": "parameters{\n\tAudit_Path as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/'),\n\tsrc_filename_Audit_PaymentTerm_cntl as string ('PaymentTerm_Cntl'),\n\tfile_extension_tsv as string ('.tsv'),\n\tsrc_path_Exploration as string ('Exploration/EnterpriseBackbone/EBS/'),\n\tfile_name_0ID_PAYTERM_BR as string ('0ID_PAYTERM_BR'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_payment_term as string ('dim_payment_term'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_PAYMENT_TERM as string ('PAYMENT_TERM/')\n}\nsource(output(\n\t\tLastRunDate as string,\n\t\tStatus as string,\n\t\tSubjectArea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Audit_Path+$src_filename_Audit_PaymentTerm_cntl+$file_extension_tsv)]) ~> IDPAYTERMBRCntlsource\nsource(output(\n\t\tClientCd as string,\n\t\tTermsofPaymentKeyCd as string,\n\t\tValidityAreaofConditionDesc as string,\n\t\tFirstPaymentTermExplanationDesc as string,\n\t\tSecondPaymentTermExplanationDesc as string,\n\t\tNetPaymentTermExplanationDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tJobId as string,\n\t\tFileName as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_Exploration+$file_name_0ID_PAYTERM_BR+'/'+$file_name_0ID_PAYTERM_BR+$file_extension_tsv)]) ~> TableIDPAYTERMBRTEXTEXPLsource\nsource(output(\n\t\tPaymentTermKey as string,\n\t\tClientCd as string,\n\t\tTermsofPaymentKeyCd as string,\n\t\tValidityAreaofConditionDesc as string,\n\t\tFirstPaymentTermExplanationDesc as string,\n\t\tSecondPaymentTermExplanationDesc as string,\n\t\tNetPaymentTermExplanationDesc as string,\n\t\tCreatedDtTm as string,\n\t\tLastUpdtDtTm as string,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($Analytics_Path + $Analytics_Folder_PAYMENT_TERM + $file_name_dim_payment_term + $file_extension_tsv)]) ~> viewdimroute1\nIDPAYTERMBRCntlsource filter(SubjectArea=='PaymentTerm'&& Status=='S') ~> Filter1\nFilter1 aggregate(groupBy(SubjectArea,\n\t\tStatus),\n\tLastRunDate = max(toString(toTimestamp(LastRunDate,'M/d/yyyy h:mm:ss a')))) ~> maxdate\nDTypeChange1 select(mapColumn(\n\t\tClientCd,\n\t\tTermsofPaymentKeyCd,\n\t\tValidityAreaofConditionDesc,\n\t\tFirstPaymentTermExplanationDesc,\n\t\tSecondPaymentTermExplanationDesc,\n\t\tNetPaymentTermExplanationDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tJobId,\n\t\tFileName,\n\t\tIsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(CreatedDtTm = coalesce(CreatedDtTm,'01/01/1900 00:00:00'),\n\t\tLastUpdtDtTm = coalesce(LastUpdtDtTm,'01/01/1900 00:00:00'),\n\t\tSubject = 'PaymentTerm') ~> expl\nexpl, maxdate join(SubjectArea == Subject,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nexpl, lrd join(Select1@ClientCd == lrd@ClientCd\n\t&& Select1@TermsofPaymentKeyCd == lrd@TermsofPaymentKeyCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin2 filter(toTimestamp(toString(toTimestamp(expl@LastUpdtDtTm,'MM/dd/yyyy HH:mm:ss'),'yyyy-mm-dd HH:mm:ss'),'yyyy-mm-dd HH:mm:ss') > toTimestamp(LastRunDate,'yyyy-mm-dd HH:mm:ss')) ~> Filter2\nSelect5 aggregate(groupBy(ClientCd,\n\t\tTermsofPaymentKeyCd,\n\t\tValidityAreaofConditionDesc,\n\t\tFirstPaymentTermExplanationDesc,\n\t\tSecondPaymentTermExplanationDesc,\n\t\tNetPaymentTermExplanationDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject),\n\tdummy = count([1])) ~> Aggregate1\nAggregate1 select(mapColumn(\n\t\tClientCd,\n\t\tTermsofPaymentKeyCd,\n\t\tValidityAreaofConditionDesc,\n\t\tFirstPaymentTermExplanationDesc,\n\t\tSecondPaymentTermExplanationDesc,\n\t\tNetPaymentTermExplanationDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Delta\nDelta window(desc(concat(ClientCd,TermsofPaymentKeyCd), true),\n\tNewPaymentTermKey = rowNumber()) ~> getDeltaRowNum\nDTypeChange2 aggregate(MaxPaymentTermKey = max(PaymentTermKey)) ~> MaxDimKey\ngetDeltaRowNum, MaxDimKey join(1 == 1 || !isNull(ClientCd) || !isNull(MaxPaymentTermKey),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join3\nJoin3 derive(MaxPaymentTermKey = case(isNull(MaxPaymentTermKey), toLong(0) ,(case(MaxPaymentTermKey<=0,toLong(0),MaxPaymentTermKey)))) ~> appendMaxKey\nappendMaxKey derive(PaymentTermKey = NewPaymentTermKey+MaxPaymentTermKey) ~> GetNewKeyDelta\nGetNewKeyDelta, viewdimroute1 join(Delta@ClientCd == viewdimroute1@ClientCd\n\t&& Delta@TermsofPaymentKeyCd == viewdimroute1@TermsofPaymentKeyCd,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join4\nJoin4 filter(isNull(viewdimroute1@ClientCd) || isNull(viewdimroute1@TermsofPaymentKeyCd)) ~> Filter3\nSelect6 derive(CreatedDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss'),\n\t\tLastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Inserts\nGetNewKeyDelta, DTypeChange2 join(Delta@ClientCd == viewdimroute1@ClientCd\n\t&& Delta@TermsofPaymentKeyCd == viewdimroute1@TermsofPaymentKeyCd,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join5\nSelect7 derive(LastUpdtDtTm = toString(currentTimestamp(),'MM/dd/yyyy HH:mm:ss')) ~> Updates\nGetNewKeyDelta, DTypeChange2 join(Delta@ClientCd == viewdimroute1@ClientCd\n\t&& Delta@TermsofPaymentKeyCd == viewdimroute1@TermsofPaymentKeyCd,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join6\nJoin6 filter(isNull(Delta@TermsofPaymentKeyCd) || isNull(Delta@ClientCd)) ~> Filter4\nDerivedColumn4 aggregate(groupBy(LastRunDate,\n\t\tStatus,\n\t\tSubjectArea),\n\tdummy = count(1)) ~> Aggregate2\nIDPAYTERMBRCntlsource derive(LastRunDate = toString(currentTimestamp(),'M/d/yyyy h:mm:ss a'),\n\t\tStatus = 'S',\n\t\tSubjectArea = 'PaymentTerm') ~> DerivedColumn4\nAggregate2 select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> getnewcntlvalue\ngetnewcntlvalue, IDPAYTERMBRCntlsource union(byName: true)~> UnionALL\nUnionALL sort(asc(LastRunDate, true)) ~> Sort1\nJoin1 select(mapColumn(\n\t\tClientCd,\n\t\tTermsofPaymentKeyCd,\n\t\tValidityAreaofConditionDesc,\n\t\tFirstPaymentTermExplanationDesc,\n\t\tSecondPaymentTermExplanationDesc,\n\t\tNetPaymentTermExplanationDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd,\n\t\tSubject,\n\t\tLastRunDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lrd\nFilter2 select(mapColumn(\n\t\tClientCd = Select1@ClientCd,\n\t\tTermsofPaymentKeyCd = Select1@TermsofPaymentKeyCd,\n\t\tValidityAreaofConditionDesc = Select1@ValidityAreaofConditionDesc,\n\t\tFirstPaymentTermExplanationDesc = Select1@FirstPaymentTermExplanationDesc,\n\t\tSecondPaymentTermExplanationDesc = Select1@SecondPaymentTermExplanationDesc,\n\t\tNetPaymentTermExplanationDesc = Select1@NetPaymentTermExplanationDesc,\n\t\tCreatedDtTm = expl@CreatedDtTm,\n\t\tLastUpdtDtTm = expl@LastUpdtDtTm,\n\t\tIsDeletedInd = Select1@IsDeletedInd,\n\t\tSubject = expl@Subject\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nFilter3 select(mapColumn(\n\t\tClientCd = Delta@ClientCd,\n\t\tTermsofPaymentKeyCd = Delta@TermsofPaymentKeyCd,\n\t\tValidityAreaofConditionDesc = Delta@ValidityAreaofConditionDesc,\n\t\tFirstPaymentTermExplanationDesc = Delta@FirstPaymentTermExplanationDesc,\n\t\tSecondPaymentTermExplanationDesc = Delta@SecondPaymentTermExplanationDesc,\n\t\tNetPaymentTermExplanationDesc = Delta@NetPaymentTermExplanationDesc,\n\t\tPaymentTermKey = GetNewKeyDelta@PaymentTermKey,\n\t\tIsDeletedInd = Delta@IsDeletedInd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nJoin5 select(mapColumn(\n\t\tValidityAreaofConditionDesc = Delta@ValidityAreaofConditionDesc,\n\t\tIsDeletedInd = Delta@IsDeletedInd,\n\t\tPaymentTermKey = DTypeChange2@PaymentTermKey,\n\t\tClientCd = viewdimroute1@ClientCd,\n\t\tTermsofPaymentKeyCd = viewdimroute1@TermsofPaymentKeyCd,\n\t\tCreatedDtTm = DTypeChange2@CreatedDtTm,\n\t\tFirstPaymentTermExplanationDesc = viewdimroute1@FirstPaymentTermExplanationDesc,\n\t\tSecondPaymentTermExplanationDesc = Delta@SecondPaymentTermExplanationDesc,\n\t\tNetPaymentTermExplanationDesc = Delta@NetPaymentTermExplanationDesc\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Select7\nFilter4 select(mapColumn(\n\t\tClientCd = viewdimroute1@ClientCd,\n\t\tTermsofPaymentKeyCd = viewdimroute1@TermsofPaymentKeyCd,\n\t\tValidityAreaofConditionDesc = viewdimroute1@ValidityAreaofConditionDesc,\n\t\tFirstPaymentTermExplanationDesc = viewdimroute1@FirstPaymentTermExplanationDesc,\n\t\tSecondPaymentTermExplanationDesc = viewdimroute1@SecondPaymentTermExplanationDesc,\n\t\tNetPaymentTermExplanationDesc = viewdimroute1@NetPaymentTermExplanationDesc,\n\t\tCreatedDtTm = DTypeChange2@CreatedDtTm,\n\t\tLastUpdtDtTm = DTypeChange2@LastUpdtDtTm,\n\t\tIsDeletedInd = viewdimroute1@IsDeletedInd,\n\t\tPaymentTermKey = DTypeChange2@PaymentTermKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: false) ~> Existing\nInserts, Updates, Existing union(byName: true)~> Union3\nTableIDPAYTERMBRTEXTEXPLsource derive(CreatedDtTm = toString(CreatedDtTm),\n\t\tLastUpdtDtTm = toString(LastUpdtDtTm)) ~> DTypeChange1\nviewdimroute1 derive(PaymentTermKey = toLong(PaymentTermKey),\n\t\tCreatedDtTm = toString(CreatedDtTm),\n\t\tLastUpdtDtTm = toString(LastUpdtDtTm)) ~> DTypeChange2\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path + $Analytics_Folder_PAYMENT_TERM + $file_name_dim_payment_term +$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tPaymentTermKey,\n\t\tClientCd,\n\t\tTermsofPaymentKeyCd,\n\t\tValidityAreaofConditionDesc,\n\t\tFirstPaymentTermExplanationDesc,\n\t\tSecondPaymentTermExplanationDesc,\n\t\tNetPaymentTermExplanationDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> dimPaymentTermParquet\nUnion3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path + $Analytics_Folder_PAYMENT_TERM + $file_name_dim_payment_term +$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\tPaymentTermKey,\n\t\tClientCd,\n\t\tTermsofPaymentKeyCd,\n\t\tValidityAreaofConditionDesc,\n\t\tFirstPaymentTermExplanationDesc,\n\t\tSecondPaymentTermExplanationDesc,\n\t\tNetPaymentTermExplanationDesc,\n\t\tCreatedDtTm,\n\t\tLastUpdtDtTm,\n\t\tIsDeletedInd\n\t),\n\tpartitionBy('hash', 1)) ~> dimPaymentTermTSV\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Audit_Path+$src_filename_Audit_PaymentTerm_cntl+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 3,\n\tpartitionBy('hash', 1)) ~> PaymentTermCntlTSV"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericControlFileUpdate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Generic/ControlFiles"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "CntlSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "CntlOutput"
						}
					],
					"transformations": [
						{
							"name": "getnewcntlvalue"
						},
						{
							"name": "Distinct"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "updatecntl"
						}
					],
					"script": "parameters{\n\tFilePath as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/'),\n\tFileName as string ('Customer_Cntl'),\n\tStatus as string ('S'),\n\tSubjectArea as string ('Customer'),\n\tTimeFormat as string ('M/d/yyyy h:mm:ss a')\n}\nsource(output(\n\t\tLastRunDate as string,\n\t\tStatus as string,\n\t\tSubjectArea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($FilePath+$FileName+'.tsv')]) ~> CntlSource\nCntlSource derive(LastRunDate = toString(currentTimestamp(),$TimeFormat),\n\t\tStatus = $Status,\n\t\tSubjectArea = $SubjectArea) ~> getnewcntlvalue\ngetnewcntlvalue aggregate(groupBy(LastRunDate,\n\t\tStatus,\n\t\tSubjectArea),\n\tdummy = min(LastRunDate)) ~> Distinct\nDistinct select(mapColumn(\n\t\tLastRunDate,\n\t\tStatus,\n\t\tSubjectArea\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredColumns\nCntlSource, SelectRequiredColumns union(byName: true)~> updatecntl\nupdatecntl sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($FilePath+$FileName+'.tsv')],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> CntlOutput"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IF_ECOLABDATALAKE_AZONE_DIM_ACCOUNTING_TYPE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "TSV"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "Parquet"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tsrc_path_dummy as string ('offshore-test/Dummy_Data/'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_accounting_type as string ('dim_accounting_type'),\n\tfile_extension_tsv as string ('.tsv'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_ACCOUNTING_TYPE as string ('ACCOUNTING_TYPE/')\n}\nsource(output(\n\t\tAccountingTypeKey as short,\n\t\tLanguageKeyCd as short,\n\t\tTextDatasourceKeyCd as short,\n\t\tLongDesc as short,\n\t\tCreatedDtTm as timestamp,\n\t\tLastUpdtDtTm as timestamp,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_dummy + $file_name_dim_accounting_type +'_dummy'+ $file_extension_tsv)]) ~> dimDummy\ndimDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_ACCOUNTING_TYPE+$file_name_dim_accounting_type+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> TSV\ndimDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_ACCOUNTING_TYPE+$file_name_dim_accounting_type+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> Parquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IF_ECOLABDATALAKE_AZONE_DIM_ACCOUNT_CHART')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "TSV"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "Parquet"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tsrc_path_dummy as string ('offshore-test/Dummy_Data/'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_account_chart as string ('dim_account_chart'),\n\tfile_extension_tsv as string ('.tsv'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_ACCOUNT_CHART as string ('ACCOUNT_CHART/')\n}\nsource(output(\n\t\tAccountChartKey as short,\n\t\tLanguageKeyCd as short,\n\t\tAccountsChartCd as short,\n\t\tAccountsChartDesc as short,\n\t\tCreatedDtTm as timestamp,\n\t\tLastUpdtDtTm as timestamp,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_dummy + $file_name_dim_account_chart +'_dummy'+ $file_extension_tsv)]) ~> dimDummy\ndimDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_ACCOUNT_CHART+$file_name_dim_account_chart+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> TSV\ndimDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_ACCOUNT_CHART+$file_name_dim_account_chart+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> Parquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IF_ECOLABDATALAKE_AZONE_DIM_ACCOUNT_DOCUMENT_TYPE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "TSV"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "Parquet"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tsrc_path_dummy as string ('offshore-test/Dummy_Data/'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_account_document_type as string ('dim_account_document_type'),\n\tfile_extension_tsv as string ('.tsv'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_ACCOUNT_DOCUMENT_TYPE as string ('ACCOUNT_DOCUMENT_TYPE/')\n}\nsource(output(\n\t\tAccountDocumentTypeKey as short,\n\t\tLanguageKeyCd as short,\n\t\tDocTypeCd as short,\n\t\tDocTypeDesc as short,\n\t\tCreatedDtTm as timestamp,\n\t\tLastUpdtDtTm as timestamp,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_dummy + $file_name_dim_account_document_type +'_dummy'+ $file_extension_tsv)]) ~> dimDummy\ndimDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_ACCOUNT_DOCUMENT_TYPE+$file_name_dim_account_document_type+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> TSV\ndimDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_ACCOUNT_DOCUMENT_TYPE+$file_name_dim_account_document_type+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> Parquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IF_ECOLABDATALAKE_AZONE_DIM_CREDIT_CONTROLLING_AREA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimCreditControllingAreaDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "TSV"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "Parquet"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tsrc_path_dummy as string ('offshore-test/Dummy_Data/'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_credit_controlling_area as string ('dim_credit_controlling_area'),\n\tfile_extension_tsv as string ('.tsv'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_CREDIT_CONTROLLING_AREA as string ('CREDIT_CONTROLLING_AREA/')\n}\nsource(output(\n\t\tCreditControlAreaKey as short,\n\t\tCreditControlAreaCd as short,\n\t\tCurrencyKeyCd as short,\n\t\tRiskCatgCd as short,\n\t\tRepresentativeGroupCd as short,\n\t\tLanguageKeyCd as short,\n\t\tCreditControlAreaDesc as short,\n\t\tCreatedDtTm as timestamp,\n\t\tLastUpdtDtTm as timestamp,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_dummy + $file_name_dim_credit_controlling_area+'_dummy' + $file_extension_tsv)]) ~> dimCreditControllingAreaDummy\ndimCreditControllingAreaDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_CREDIT_CONTROLLING_AREA+$file_name_dim_credit_controlling_area+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> TSV\ndimCreditControllingAreaDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_CREDIT_CONTROLLING_AREA+$file_name_dim_credit_controlling_area+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> Parquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IF_ECOLABDATALAKE_AZONE_DIM_DUNNING')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimdunningDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimrouteTSV"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimrouteParquet"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tfile_name_dim_stor_chan as string ('dim_dunning'),\n\tfile_extension_tsv as string ('.tsv'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tAnalytics_Folder_DUNNING as string ('DUNNING/'),\n\tsrc_path_dummy as string ('offshore-test/Dummy_Data/')\n}\nsource(output(\n\t\tDunningKey as short,\n\t\tLanguageCd as short,\n\t\tDunningKeyCd as short,\n\t\tDunningKeyDesc as short,\n\t\tCreatedDtTm as timestamp,\n\t\tLastUpdtDtTm as timestamp,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_dummy + $file_name_dim_stor_chan + '_dummy' + $file_extension_tsv)]) ~> dimdunningDummy\ndimdunningDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path+ $Analytics_Folder_DUNNING+$file_name_dim_stor_chan+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> dimrouteTSV\ndimdunningDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path+ $Analytics_Folder_DUNNING+$file_name_dim_stor_chan+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> dimrouteParquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IF_ECOLABDATALAKE_AZONE_DIM_DUNNING_BLOCK')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimdunningblockDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimrouteTSV"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimrouteParquet"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tfile_name_dim_dunning_block as string ('dim_dunning_block'),\n\tfile_extension_tsv as string ('.tsv'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tAnalytics_Folder_DUNNING_BLOCK as string ('DUNNING_BLOCK/'),\n\tsrc_path_dummy as string ('offshore-test/Dummy_Data/')\n}\nsource(output(\n\t\tDunningBlockKey as short,\n\t\tLanguageCd as short,\n\t\tDunningBlockCd as short,\n\t\tDunningBlockDesc as short,\n\t\tCreatedDtTm as timestamp,\n\t\tLastUpdtDtTm as timestamp,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_dummy + $file_name_dim_dunning_block + '_dummy' + $file_extension_tsv)]) ~> dimdunningblockDummy\ndimdunningblockDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path+ $Analytics_Folder_DUNNING_BLOCK+$file_name_dim_dunning_block+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> dimrouteTSV\ndimdunningblockDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path+ $Analytics_Folder_DUNNING_BLOCK+$file_name_dim_dunning_block+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> dimrouteParquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IF_ECOLABDATALAKE_AZONE_DIM_PAYMENT_BLOCK')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimpaymentblockDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimrouteTSV"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimrouteParquet"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tfile_name_dim_payment_block as string ('dim_payment_block'),\n\tfile_extension_tsv as string ('.tsv'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tAnalytics_Folder_PAYMENT_BLOCK as string ('PAYMENT_BLOCK/'),\n\tsrc_path_dummy as string ('offshore-test/Dummy_Data/')\n}\nsource(output(\n\t\tPaymentBlockKey as short,\n\t\tLanguageCd as short,\n\t\tPaymentBlockCd as short,\n\t\tPaymentBlockDesc as short,\n\t\tCreatedDtTm as timestamp,\n\t\tLastUpdtDtTm as timestamp,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_dummy + $file_name_dim_payment_block + '_dummy' + $file_extension_tsv)]) ~> dimpaymentblockDummy\ndimpaymentblockDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path+ $Analytics_Folder_PAYMENT_BLOCK+$file_name_dim_payment_block+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> dimrouteTSV\ndimpaymentblockDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path+ $Analytics_Folder_PAYMENT_BLOCK+$file_name_dim_payment_block+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> dimrouteParquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IF_ECOLABDATALAKE_AZONE_DIM_PAYMENT_METHOD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "TSV"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "Parquet"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tsrc_path_dummy as string ('offshore-test/Dummy_Data/'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_payment_method as string ('dim_payment_method'),\n\tfile_extension_tsv as string ('.tsv'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_PAYMENT_METHOD as string ('PAYMENT_METHOD/')\n}\nsource(output(\n\t\tPaymentMethodKey as short,\n\t\tCountryCd as short,\n\t\tPaymentMethCd as short,\n\t\tPaymentMethName as short,\n\t\tCreatedDtTm as timestamp,\n\t\tLastUpdtDtTm as timestamp,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_dummy + $file_name_dim_payment_method +'_dummy'+ $file_extension_tsv)]) ~> dimDummy\ndimDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_PAYMENT_METHOD+$file_name_dim_payment_method+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> TSV\ndimDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_PAYMENT_METHOD+$file_name_dim_payment_method+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> Parquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IF_ECOLABDATALAKE_AZONE_DIM_PAYMENT_REASON')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "TSV"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "Parquet"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tsrc_path_dummy as string ('offshore-test/Dummy_Data/'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_payment_reason as string ('dim_payment_reason'),\n\tfile_extension_tsv as string ('.tsv'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_PAYMENT_REASON as string ('PAYMENT_REASON/')\n}\nsource(output(\n\t\tPaymentReasonKey as short,\n\t\tLanguageCd as short,\n\t\tCompanyCd as short,\n\t\tPaymentReasonCd as short,\n\t\tReasonShortTxt as short,\n\t\tReasonLongTxt as short,\n\t\tCreatedDtTm as short,\n\t\tLastUpdtDtTm as timestamp,\n\t\tIsDeletedInd8 as timestamp,\n\t\tIsDeletedInd9 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_dummy + $file_name_dim_payment_reason +'_dummy'+ $file_extension_tsv)]) ~> dimDummy\ndimDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_PAYMENT_REASON+$file_name_dim_payment_reason+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> TSV\ndimDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_PAYMENT_REASON+$file_name_dim_payment_reason+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> Parquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IF_ECOLABDATALAKE_AZONE_DIM_PAYMENT_TERM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Analytics/O2CAZ"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "dimDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "TSV"
						},
						{
							"dataset": {
								"referenceName": "Parquet_Dataset",
								"type": "DatasetReference"
							},
							"name": "Parquet"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tsrc_path_dummy as string ('offshore-test/Dummy_Data/'),\n\tAnalytics_Path as string ('Analytics/EnterpriseCertified/EnterpriseDims/'),\n\tfile_name_dim_payment_term as string ('dim_payment_term'),\n\tfile_extension_tsv as string ('.tsv'),\n\tfile_extension_parquet as string ('.parquet'),\n\tAnalytics_Folder_PAYMENT_TERM as string ('PAYMENT_TERM/')\n}\nsource(output(\n\t\tPaymentTermKey as short,\n\t\tClientCd as short,\n\t\tTermsofPaymentKeyCd as short,\n\t\tValidityAreaofConditionDesc as short,\n\t\tFirstPaymentTermExplanationDesc as short,\n\t\tSecondPaymentTermExplanationDesc as short,\n\t\tNetPaymentTermExplanationDesc as short,\n\t\tCreatedDtTm as timestamp,\n\t\tLastUpdtDtTm as timestamp,\n\t\tIsDeletedInd as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($src_path_dummy + $file_name_dim_payment_term+'_dummy' + $file_extension_tsv)]) ~> dimDummy\ndimDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_PAYMENT_TERM+$file_name_dim_payment_term+$file_extension_tsv)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> TSV\ndimDummy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[($Analytics_Path+$Analytics_Folder_PAYMENT_TERM+$file_name_dim_payment_term+$file_extension_parquet)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> Parquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Payroll_to_DeltaLake')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "WFO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "JSON_Payroll",
								"type": "DatasetReference"
							},
							"name": "PayrollJSON"
						},
						{
							"linkedService": {
								"referenceName": "ADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "SrcPayrollErrorCSV"
						},
						{
							"linkedService": {
								"referenceName": "ADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "SrcPayrollTaskTypeTagCSV"
						},
						{
							"linkedService": {
								"referenceName": "ADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "SrcPayrollRecordCSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "PayrollErrorCSV"
						},
						{
							"linkedService": {
								"referenceName": "ADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "PayrollTaskTypeTagCSV"
						},
						{
							"linkedService": {
								"referenceName": "ADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "PayrollRecordCSV"
						},
						{
							"linkedService": {
								"referenceName": "ADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "PayrollErrorCSVDelete"
						},
						{
							"linkedService": {
								"referenceName": "ADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "PayrollTaskTypeTagCSVDelete"
						},
						{
							"linkedService": {
								"referenceName": "ADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "PayrollRecordCSVDelete"
						}
					],
					"transformations": [
						{
							"name": "PayrollRecordFields"
						},
						{
							"name": "PayrollRecordFileName"
						},
						{
							"name": "PayrollTaskTypeTag"
						},
						{
							"name": "PayrollTaskTypeTagFileName"
						},
						{
							"name": "PayrollErrorFields"
						},
						{
							"name": "PayrollErrorFileName"
						},
						{
							"name": "PayrollErrorCSVUniqueRunDateTime"
						},
						{
							"name": "PayrollErrorCSVToTarget"
						},
						{
							"name": "PayrollErrorCSVTargetRunDateTime"
						},
						{
							"name": "PayrollErrorCSVDeleteDeltaIfExists"
						},
						{
							"name": "PayrollTaskTypeTagCSVUniqueRunDateTime"
						},
						{
							"name": "PayrollTaskTypeTagCSVToTarget"
						},
						{
							"name": "PayrollTaskTypeTagCSVUniqueTargetRunDateTime"
						},
						{
							"name": "PayrollTaskTypeTagCSVDeleteDeltaIfExists"
						},
						{
							"name": "PayrollRecordCSVUniqueRunDateTime"
						},
						{
							"name": "PayrollRecordCSVToTarget"
						},
						{
							"name": "PayrollRecordCSVUniqueTargetRunDateTime"
						},
						{
							"name": "PayrollRecordCSVDeleteDeltaIfExists"
						}
					],
					"script": "parameters{\n\tdatePath as string ('2020/08/24/AM/'),\n\tinputRoot as string ('raw/natural/GTWFO/'),\n\toutputRoot as string ('natural/WFO/'),\n\tpayroll_partition_date as string ('2021-01-01'),\n\tpayroll_partition_time as string ('AM'),\n\tadls_container_name as string ('raw')\n}\nsource(output(\n\t\tsuccess as boolean,\n\t\tpayload as (payroll_records as (employee_id as string, employee_name as string, payroll_code as string, employee_payroll_code as string, external_id as string, payroll_description as string, date as string, task_type_id as string, task_type_tags as (id as string, value as string, tag_group as string)[], hours as string, days as string, is_confirmed as boolean, updated_at as string, time_span_type as string, time_unit_type as string, planning_unit_id as string)[], payroll_errors as (employee_id as string, employee_name as string, error_type as string, error_dates as string[])[])\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'file-name',\n\tdocumentForm: 'singleDocument',\n\twildcardPaths:[($inputRoot+'payroll/'+ $datePath +'*.json')]) ~> PayrollJSON\nsource(output(\n\t\trun_date as string,\n\t\trun_time as string,\n\t\tfilename as string,\n\t\temployee_id as string,\n\t\temployee_name as string,\n\t\terror_type as string,\n\t\terror_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tformat: 'delta',\n\tfileSystem: ($adls_container_name),\n\tfolderPath: ($outputRoot + 'payroll-error' + '/')) ~> SrcPayrollErrorCSV\nsource(output(\n\t\trun_date as string,\n\t\trun_time as string,\n\t\tfilename as string,\n\t\temployee_id as string,\n\t\tpayroll_code as string,\n\t\tdate as string,\n\t\ttask_type_id as string,\n\t\ttag_id as string,\n\t\ttag_group as string,\n\t\ttag_value as string,\n\t\tplanning_unit_id as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tformat: 'delta',\n\tfileSystem: ($adls_container_name),\n\tfolderPath: ($outputRoot + 'payroll-task-type-tag' + '/')) ~> SrcPayrollTaskTypeTagCSV\nsource(output(\n\t\trun_date as string,\n\t\trun_time as string,\n\t\tfilename as string,\n\t\temployee_id as string,\n\t\temployee_name as string,\n\t\tpayroll_code as string,\n\t\tpayroll_description as string,\n\t\tdate as string,\n\t\ttask_type_id as string,\n\t\thours as string,\n\t\tdays as string,\n\t\tis_confirmed as boolean,\n\t\tupdated_at as string,\n\t\ttime_span_type as string,\n\t\ttime_unit_type as string,\n\t\tplanning_unit_id as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tformat: 'delta',\n\tfileSystem: ($adls_container_name),\n\tfolderPath: ($outputRoot + 'payroll-record' + '/')) ~> SrcPayrollRecordCSV\nPayrollJSON foldDown(unroll(payload.payroll_records, payload.payroll_records),\n\tmapColumn(\n\t\t{file-name},\n\t\temployee_id = payload.payroll_records.employee_id,\n\t\temployee_name = payload.payroll_records.employee_name,\n\t\tpayroll_code = payload.payroll_records.payroll_code,\n\t\tpayroll_description = payload.payroll_records.payroll_description,\n\t\tdate = payload.payroll_records.date,\n\t\ttask_type_id = payload.payroll_records.task_type_id,\n\t\thours = payload.payroll_records.hours,\n\t\tdays = payload.payroll_records.days,\n\t\tis_confirmed = payload.payroll_records.is_confirmed,\n\t\tupdated_at = payload.payroll_records.updated_at,\n\t\ttime_span_type = payload.payroll_records.time_span_type,\n\t\ttime_unit_type = payload.payroll_records.time_unit_type,\n\t\tplanning_unit_id = payload.payroll_records.planning_unit_id\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PayrollRecordFields\nPayrollRecordFields derive({file-name} = replace(replace(replace({file-name},'payroll', 'payroll-record'), $inputRoot, $outputRoot),'.json','.csv'),\n\t\toutPath = '/' + $outputRoot + \n'payroll-record'+          /* entity */\n'/'+$datePath+'WFO_'+                   /* date & WFO */\n'payroll-record'+'_'+      /* entity + _ */\nreplace(                        /* planning unit */\n    substring(\n        {file-name},\n        1 + length('/'+$inputRoot+'payroll/'+$datePath+'YYYY_MM_DD_HH_SS_payroll_')\n    ),\n    '.json', '')+\n'_'+\nreplace(                                /* timestamp without _ */\n    left(\n        substring(\n            {file-name}, \n            1 + length('/'+$inputRoot+'payroll/'+$datePath)\n        ),\n        length('YYYY_MM_DD_HH_MM')\n    ),\n    '_', '')+\n'00'+                                   /* 00 for secs */\n'.csv',\n\t\t{column_file-name} = 'WFO_'+                   /* date & WFO */\r\n'payroll-record'+'_'+      /* entity + _ */\r\nreplace(                        /* planning unit */\r\n    substring(\r\n        {file-name},\r\n        1 + length('/'+$inputRoot+'payroll/'+$datePath+'YYYY_MM_DD_HH_SS_payroll_')\r\n    ),\r\n    '.json', '')+\r\n'_'+\r\nreplace(                                /* timestamp without _ */\r\n    left(\r\n        substring(\r\n            {file-name}, \r\n            1 + length('/'+$inputRoot+'payroll/'+$datePath)\r\n        ),\r\n        length('YYYY_MM_DD_HH_MM')\r\n    ),\r\n    '_', '')+\r\n'00'+                                   /* 00 for secs */\r\n'.csv',\n\t\temployee_partition_date = $payroll_partition_date,\n\t\temployee_partition_time = $payroll_partition_time) ~> PayrollRecordFileName\nPayrollJSON foldDown(unroll(payload.payroll_records.task_type_tags),\n\tmapColumn(\n\t\t{file-name},\n\t\temployee_id = payload.payroll_records.employee_id,\n\t\tpayroll_code = payload.payroll_records.payroll_code,\n\t\tdate = payload.payroll_records.date,\n\t\ttask_type_id = payload.payroll_records.task_type_id,\n\t\ttag_id = payload.payroll_records.task_type_tags.id,\n\t\ttag_group = payload.payroll_records.task_type_tags.tag_group,\n\t\ttag_value = payload.payroll_records.task_type_tags.value,\n\t\tplanning_unit_id = payload.payroll_records.planning_unit_id\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PayrollTaskTypeTag\nPayrollTaskTypeTag derive({file-name} = replace(replace(replace({file-name},'payroll', 'payroll-task-type-tag'), $inputRoot, $outputRoot),'.json','.csv'),\n\t\toutPath = '/' + $outputRoot + \n'payroll-task-type-tag'+          /* entity */\n'/'+$datePath+'WFO_'+                   /* date & WFO */\n'payroll-task-type-tag'+'_'+      /* entity + _ */\nreplace(                        /* planning unit */\n    substring(\n        {file-name},\n        1 + length('/'+$inputRoot+'payroll/'+$datePath+'YYYY_MM_DD_HH_SS_payroll_')\n    ),\n    '.json', '')+\n'_'+\nreplace(                                /* timestamp without _ */\n    left(\n        substring(\n            {file-name}, \n            1 + length('/'+$inputRoot+'payroll/'+$datePath)\n        ),\n        length('YYYY_MM_DD_HH_MM')\n    ),\n    '_', '')+\n'00'+                                   /* 00 for secs */\n'.csv',\n\t\t{column_file-name} = 'WFO_'+                   /* date & WFO */\r\n'payroll-task-type-tag'+'_'+      /* entity + _ */\r\nreplace(                        /* planning unit */\r\n    substring(\r\n        {file-name},\r\n        1 + length('/'+$inputRoot+'payroll/'+$datePath+'YYYY_MM_DD_HH_SS_payroll_')\r\n    ),\r\n    '.json', '')+\r\n'_'+\r\nreplace(                                /* timestamp without _ */\r\n    left(\r\n        substring(\r\n            {file-name}, \r\n            1 + length('/'+$inputRoot+'payroll/'+$datePath)\r\n        ),\r\n        length('YYYY_MM_DD_HH_MM')\r\n    ),\r\n    '_', '')+\r\n'00'+                                   /* 00 for secs */\r\n'.csv',\n\t\temployee_partition_date = $payroll_partition_date,\n\t\temployee_partition_time = $payroll_partition_time) ~> PayrollTaskTypeTagFileName\nPayrollJSON foldDown(unroll(payload.payroll_errors.error_dates, payload.payroll_errors),\n\tmapColumn(\n\t\t{file-name},\n\t\temployee_id = payload.payroll_errors.employee_id,\n\t\temployee_name = payload.payroll_errors.employee_name,\n\t\terror_type = payload.payroll_errors.error_type,\n\t\terror_date = payload.payroll_errors.error_dates\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PayrollErrorFields\nPayrollErrorFields derive({file-name} = replace(replace(replace({file-name},'payroll', 'payroll-error'), $inputRoot, $outputRoot),'.json','.csv'),\n\t\toutPath = '/' + $outputRoot + \n'payroll-error'+          /* entity */\n'/'+$datePath+'WFO_'+                   /* date & WFO */\n'payroll-error'+'_'+      /* entity + _ */\nreplace(                        /* planning unit */\n    substring(\n        {file-name},\n        1 + length('/'+$inputRoot+'payroll/'+$datePath+'YYYY_MM_DD_HH_SS_payroll_')\n    ),\n    '.json', '')+\n'_'+\nreplace(                                /* timestamp without _ */\n    left(\n        substring(\n            {file-name}, \n            1 + length('/'+$inputRoot+'payroll/'+$datePath)\n        ),\n        length('YYYY_MM_DD_HH_MM')\n    ),\n    '_', '')+\n'00'+                                   /* 00 for secs */\n'.csv',\n\t\temployee_partition_date = $payroll_partition_date,\n\t\temployee_partition_time = $payroll_partition_time,\n\t\t{column_file-name} = 'WFO_'+                   /* date & WFO */\r\n'payroll-error'+'_'+      /* entity + _ */\r\nreplace(                        /* planning unit */\r\n    substring(\r\n        {file-name},\r\n        1 + length('/'+$inputRoot+'payroll/'+$datePath+'YYYY_MM_DD_HH_SS_payroll_')\r\n    ),\r\n    '.json', '')+\r\n'_'+\r\nreplace(                                /* timestamp without _ */\r\n    left(\r\n        substring(\r\n            {file-name}, \r\n            1 + length('/'+$inputRoot+'payroll/'+$datePath)\r\n        ),\r\n        length('YYYY_MM_DD_HH_MM')\r\n    ),\r\n    '_', '')+\r\n'00'+                                   /* 00 for secs */\r\n'.csv') ~> PayrollErrorFileName\nSrcPayrollErrorCSV aggregate(groupBy(run_date,\n\t\trun_time),\n\tagg_run_date = first(run_date),\n\t\tagg_run_time = first(run_time)) ~> PayrollErrorCSVUniqueRunDateTime\nPayrollErrorCSVUniqueRunDateTime, PayrollErrorFileName join(agg_run_date == employee_partition_date\n\t&& agg_run_time == employee_partition_time,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> PayrollErrorCSVToTarget\nPayrollErrorCSVToTarget aggregate(groupBy(agg_run_date,\n\t\tagg_run_time),\n\trun_date = first(agg_run_date),\n\t\trun_time = first(agg_run_time)) ~> PayrollErrorCSVTargetRunDateTime\nPayrollErrorCSVTargetRunDateTime alterRow(deleteIf(!isNull(run_date))) ~> PayrollErrorCSVDeleteDeltaIfExists\nSrcPayrollTaskTypeTagCSV aggregate(groupBy(run_date,\n\t\trun_time),\n\tagg_run_date = first(run_date),\n\t\tagg_run_time = first(run_time)) ~> PayrollTaskTypeTagCSVUniqueRunDateTime\nPayrollTaskTypeTagCSVUniqueRunDateTime, PayrollTaskTypeTagFileName join(agg_run_date == employee_partition_date\n\t&& agg_run_time == employee_partition_time,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> PayrollTaskTypeTagCSVToTarget\nPayrollTaskTypeTagCSVToTarget aggregate(groupBy(agg_run_date,\n\t\tagg_run_time),\n\trun_date = first(agg_run_date),\n\t\trun_time = first(agg_run_time)) ~> PayrollTaskTypeTagCSVUniqueTargetRunDateTime\nPayrollTaskTypeTagCSVUniqueTargetRunDateTime alterRow(deleteIf(!isNull(run_date))) ~> PayrollTaskTypeTagCSVDeleteDeltaIfExists\nSrcPayrollRecordCSV aggregate(groupBy(run_date,\n\t\trun_time),\n\tagg_run_date = first(run_date),\n\t\tagg_run_time = first(run_time)) ~> PayrollRecordCSVUniqueRunDateTime\nPayrollRecordCSVUniqueRunDateTime, PayrollRecordFileName join(agg_run_date == employee_partition_date\n\t&& agg_run_time == employee_partition_time,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> PayrollRecordCSVToTarget\nPayrollRecordCSVToTarget aggregate(groupBy(agg_run_date,\n\t\tagg_run_time),\n\trun_date = first(agg_run_date),\n\t\trun_time = first(agg_run_time)) ~> PayrollRecordCSVUniqueTargetRunDateTime\nPayrollRecordCSVUniqueTargetRunDateTime alterRow(deleteIf(!isNull(run_date))) ~> PayrollRecordCSVDeleteDeltaIfExists\nPayrollErrorFileName sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: ($adls_container_name),\n\tfolderPath: ($outputRoot + 'payroll-error' + '/'),\n\tmergeSchema: true,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\trun_date = employee_partition_date,\n\t\trun_time = employee_partition_time,\n\t\tfilename = {column_file-name},\n\t\temployee_id,\n\t\temployee_name,\n\t\terror_type,\n\t\terror_date\n\t),\n\tpartitionBy('dynamicRange', 20,\n\t\trun_date\n\t)) ~> PayrollErrorCSV\nPayrollTaskTypeTagFileName sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: ($adls_container_name),\n\tfolderPath: ($outputRoot + 'payroll-task-type-tag' + '/'),\n\tmergeSchema: true,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\trun_date = employee_partition_date,\n\t\trun_time = employee_partition_time,\n\t\tfilename = {column_file-name},\n\t\temployee_id,\n\t\tpayroll_code,\n\t\tdate,\n\t\ttask_type_id,\n\t\ttag_id,\n\t\ttag_group,\n\t\ttag_value,\n\t\tplanning_unit_id\n\t),\n\tpartitionBy('dynamicRange', 20,\n\t\trun_date\n\t)) ~> PayrollTaskTypeTagCSV\nPayrollRecordFileName sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: ($adls_container_name),\n\tfolderPath: ($outputRoot + 'payroll-record' + '/'),\n\tmergeSchema: true,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2,\n\tmapColumn(\n\t\trun_date = employee_partition_date,\n\t\trun_time = employee_partition_time,\n\t\tfilename = {column_file-name},\n\t\temployee_id,\n\t\temployee_name,\n\t\tpayroll_code,\n\t\tpayroll_description,\n\t\tdate,\n\t\ttask_type_id,\n\t\thours,\n\t\tdays,\n\t\tis_confirmed,\n\t\tupdated_at,\n\t\ttime_span_type,\n\t\ttime_unit_type,\n\t\tplanning_unit_id\n\t),\n\tpartitionBy('dynamicRange', 20,\n\t\trun_date\n\t)) ~> PayrollRecordCSV\nPayrollErrorCSVDeleteDeltaIfExists sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: ($adls_container_name),\n\tfolderPath: ($outputRoot + 'payroll-error' + '/'),\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['run_date','run_time'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\trun_date,\n\t\trun_time\n\t)) ~> PayrollErrorCSVDelete\nPayrollTaskTypeTagCSVDeleteDeltaIfExists sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: ($adls_container_name),\n\tfolderPath: ($outputRoot + 'payroll-task-type-tag' + '/'),\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['run_date','run_time'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\trun_date,\n\t\trun_time\n\t)) ~> PayrollTaskTypeTagCSVDelete\nPayrollRecordCSVDeleteDeltaIfExists sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: ($adls_container_name),\n\tfolderPath: ($outputRoot + 'payroll-record' + '/'),\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['run_date','run_time'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\trun_date,\n\t\trun_time\n\t)) ~> PayrollRecordCSVDelete"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/JSON_Payroll')]",
				"[concat(variables('factoryId'), '/linkedServices/ADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowFlakeTriggerExists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Union1"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Sort1"
						}
					],
					"script": "parameters{\n\tTriggerFileFolder as string ('TriggerFile/Snowflake/Outbound/'),\n\tTriggerFileName as string ('1AZ_Trigger.tsv')\n}\nsource(output(\n\t\tCurrentDate as timestamp 'yyyy-MM-dd HH:mm:ss',\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($TriggerFileFolder+$TriggerFileName)]) ~> source1\nsource1 derive(CurrentDate = currentTimestamp(),\n\t\tStatus = 'Y') ~> DerivedColumn1\nDerivedColumn1 aggregate(groupBy(Status),\n\tCurrentDate = max(CurrentDate)) ~> Aggregate1\nsource1, Aggregate1 union(byName: true)~> Union1\nUnion1 aggregate(groupBy(CurrentDate,\n\t\tStatus),\n\tdummy = count(1)) ~> Aggregate2\nSort1 select(mapColumn(\n\t\tCurrentDate,\n\t\tStatus\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nAggregate2 sort(desc(CurrentDate, false)) ~> Sort1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($TriggerFileFolder+$TriggerFileName)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowFlakeTriggerNotExists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "DummyCntl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_Dataset",
								"type": "DatasetReference"
							},
							"name": "Output"
						}
					],
					"transformations": [
						{
							"name": "DeriveDate"
						},
						{
							"name": "DistinctRecords"
						},
						{
							"name": "SortByDate"
						},
						{
							"name": "SelectFinal"
						}
					],
					"script": "parameters{\n\tDummyControlFolder as string ('Dummy_Data/'),\n\tDummyControlFile as string ('SnowFlakeDummyCntl'),\n\ttsvExtension as string ('.tsv'),\n\tOutputFolder as string ('Analytics/EnterpriseCertified/EnterpriseApps/CommercialReporting/AUDIT_DATA/Snowflake_Trigger/Inbound/'),\n\tOutputFile as string ('DimsSuccess.ind')\n}\nsource(output(\n\t\tStatus as string,\n\t\tDATE as timestamp 'yyyy-MM-dd HH:mm:ss'\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[($DummyControlFolder+$DummyControlFile+$tsvExtension)]) ~> DummyCntl\nDummyCntl derive(Status = 'Y',\n\t\tCurrentDate = currentTimestamp()) ~> DeriveDate\nDeriveDate aggregate(groupBy(CurrentDate,\n\t\tStatus),\n\tdummy = count(1)) ~> DistinctRecords\nDistinctRecords sort(desc(CurrentDate, false)) ~> SortByDate\nSortByDate select(mapColumn(\n\t\tCurrentDate,\n\t\tStatus\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFinal\nSelectFinal sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($OutputFolder+$OutputFile+$tsvExtension)],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> Output"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Usefiltertransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText17",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText12",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tempid as string,\n\t\tname as string,\n\t\tcountry as string,\n\t\tdepartment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 filter(equals(department, '3')) ~> Filter1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string\n\t),\n\tpartitionFileNames:['filter.csv'],\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText17')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText12')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/conditionalsplit1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employeesdatads",
								"type": "DatasetReference"
							},
							"name": "Employeesdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText14",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText15",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						}
					],
					"script": "source(output(\n\t\tEmpid as string,\n\t\tName as string,\n\t\tCountry as string,\n\t\tDepartment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Employeesdata\nEmployeesdata split(equals(Department, '1'),\n\tequals(Department, '2'),\n\tequals(Department, '3'),\n\tdisjoint: false) ~> ConditionalSplit1@(ITEmployees, HREmployees, PayrollEmployees, OtherEmployees)\nConditionalSplit1@ITEmployees sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\t{30} as string,\n\t\tRahul as string,\n\t\tIndia as string,\n\t\t{33} as string\n\t),\n\tpartitionFileNames:['conditiona.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1\nConditionalSplit1@HREmployees sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\t{30} as string,\n\t\tRahul as string,\n\t\tIndia as string,\n\t\t{33} as string\n\t),\n\tpartitionFileNames:['hremployees.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employeesdatads')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText14')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText15')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Excel1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						}
					],
					"script": "source(output(\n\t\tEmplName as string,\n\t\tEmplDept as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false) ~> source1\nsource1 split(isNull(EmplName),\n\tdisjoint: false) ~> ConditionalSplit1@(errorfolderoutput, outputfolder)\nConditionalSplit1@errorfolderoutput sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1\nConditionalSplit1@outputfolder sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Excel1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Excel4",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Excel4')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/harishconditional')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText18",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText19",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText20",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText21",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText22",
								"type": "DatasetReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						}
					],
					"script": "source(output(\n\t\tEmpid as string,\n\t\tName as string,\n\t\tCountry as string,\n\t\tDepartment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 split(equals(Department, '1'),\n\tequals(Department, '2'),\n\tequals(Department, '3'),\n\tdisjoint: false) ~> ConditionalSplit1@(ITemployees, HREmployees, PayrollEmployees, Others)\nConditionalSplit1@ITemployees sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tDepartment as string,\n\t\tEmployeecount as string\n\t),\n\tpartitionFileNames:['harishITempl.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1\nConditionalSplit1@HREmployees sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tDepartment as string,\n\t\tEmployeecount as string\n\t),\n\tpartitionFileNames:['harishHRempl.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink2\nConditionalSplit1@PayrollEmployees sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tDepartment as string,\n\t\tEmployeecount as string\n\t),\n\tpartitionFileNames:['harishpayrollempl.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink3\nConditionalSplit1@Others sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tDepartment as string,\n\t\tEmployeecount as string\n\t),\n\tpartitionFileNames:['harishothers.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink4"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText18')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText19')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText20')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText21')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText22')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsonarrays')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Json4",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tid as string,\n\t\tos_version as string,\n\t\tmodel as string,\n\t\tapp_version as string,\n\t\tos_type as string,\n\t\tudid as string,\n\t\timei as string,\n\t\tserial_number as string,\n\t\thardware_serial_number as string,\n\t\tname as string,\n\t\tproduct_name as string,\n\t\tactivated_at as string,\n\t\tlast_app_connection as string,\n\t\tuser as (id as string, name as string, email as string, external_id as string, organization as (name as string, id as string)),\n\t\tidentifier as string,\n\t\thealth_status as string,\n\t\tcompliance_status as string,\n\t\trisk_status as string,\n\t\tmdm_status as string,\n\t\tcurrent_health_warnings as string[],\n\t\tcurrent_compliance_warnings as string[],\n\t\tcurrent_risk_warnings as string[],\n\t\tcompromised as boolean,\n\t\tconfiguration as (location_services as string, push_notifications as string, personal_vpn as string, default_installer as string, system_admin as string, samsung_knox_services as string),\n\t\tstats as (networks_monitored as string, access_points_scanned as string, apps_analyzed as string, incidents as (network as (open as string, total as string), malware as (open as string, total as string), indicator_of_compromise as (open as string, total as string), configuration as (open as string, total as string), os as (open as string, total as string))),\n\t\tmdm as (username as string, device_id as string, friendly_name as string, last_connection as string, organization_group as string),\n\t\tcontainer as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 100,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'arrayOfDocuments') ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json3')]",
				"[concat(variables('factoryId'), '/datasets/Json4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		}
	]
}